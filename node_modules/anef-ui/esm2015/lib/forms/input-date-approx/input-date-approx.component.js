/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date-approx/input-date-approx.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular
import { Component, Input } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil, startWith, distinctUntilChanged, } from 'rxjs/operators';
import moment from 'moment';
/**
 * ReactiveForm Date Input - Séjour
 * Composed with a text input for the day, a dropdown for the month, a text input for the year
 * Approximative date option
 */
export class InputDateApproxComponent {
    constructor() {
        this.notifier = new Subject();
        this.unknownMonthItem = { label: 'Inconnu', value: 'i' };
        this.isDateApprox = false;
        /**
         * Is FormGroup required
         */
        this.required = true;
        /**
         * Is FormGroup readonly
         */
        this.readonly = false;
        /**
         * Default date value displayed in readonly mode
         * \@default 'N/A'
         */
        this.defaultDisplay = 'N/A';
        /**
         * FormGroup day control label
         * \@default 'Jour'
         */
        this.dayLabel = 'Jour';
        /**
         * FormGroup day control placeholder
         * \@default 'JJ'
         */
        this.dayPlaceholder = 'JJ';
        /**
         * FormGroup month control label
         * \@default 'Mois'
         */
        this.monthLabel = 'Mois';
        /**
         * FormGroup day control placeholder
         * \@default 'MM'
         */
        this.monthPlaceholder = 'MM';
        /**
         * FormGroup year control label
         * \@default 'Année'
         */
        this.yearLabel = 'Année';
        /**
         * FormGroup year control placeholder
         * \@default 'AAAA'
         */
        this.yearPlaceholder = 'AAAA';
        /**
         * FormGroup month control dropdown options
         * \@default SelectItem[] = [
         * { label: 'Janvier', value: 1 },
         * { label: 'Février', value: 2 },
         * { label: 'Mars', value: 3 },
         * { label: 'Avril', value: 4 },
         * { label: 'Mai', value: 5 },
         * { label: 'Juin', value: 6 },
         * { label: 'Juillet', value: 7 },
         * { label: 'Août', value: 8 },
         * { label: 'Septembre', value: 9 },
         * { label: 'Octobre', value: 10 },
         * { label: 'Novembre', value: 11 },
         * { label: 'Décembre', value: 12 }
         * ]
         */
        this.monthOptions = [
            { label: 'Janvier', value: 1 },
            { label: 'Février', value: 2 },
            { label: 'Mars', value: 3 },
            { label: 'Avril', value: 4 },
            { label: 'Mai', value: 5 },
            { label: 'Juin', value: 6 },
            { label: 'Juillet', value: 7 },
            { label: 'Août', value: 8 },
            { label: 'Septembre', value: 9 },
            { label: 'Octobre', value: 10 },
            { label: 'Novembre', value: 11 },
            { label: 'Décembre', value: 12 }
        ];
        /**
         * FormGroup validation error messages
         * \@default DateErrorMessage = {
         *     day: {
         *       required: 'Le jour est requis',
         *       pattern: 'Le jour doit être un nombre',
         *       length: 'Le jour doit contenir 2 chiffres au maximum',
         *       minMax: 'Le jour doit être compris entre 1 et 31'
         *     },
         *     month: {
         *       required: 'Le mois est requis'
         *     },
         *     year: {
         *       required: 'L\'année est requise',
         *       pattern: 'L\'année doit être un nombre',
         *       length: 'L\'année doit contenir 4 chiffres'
         *     },
         *     invalid: 'La date est invalide',
         *     required: 'Ce champ est obligatoire.'
         *   }
         */
        this.messages = {
            day: {
                required: 'Le jour est requis',
                pattern: 'Le jour doit être un nombre',
                length: 'Le jour doit contenir 2 chiffres au maximum',
                minMax: 'Le jour doit être compris entre 1 et 31'
            },
            month: {
                required: 'Le mois est requis'
            },
            year: {
                required: 'L\'année est requise',
                pattern: 'L\'année doit être un nombre',
                length: 'L\'année doit contenir 4 chiffres'
            },
            invalid: 'La date est invalide',
            required: 'Ce champ est obligatoire.'
        };
        /**
         * Can the date be approximative or not
         * \@default false
         * \@usage [canBeApproximative]="true"
         */
        this.canBeApproximative = false;
        /**
         * FormGroup approximative date label
         * \@default 'Approximative'
         */
        this.dateApproxLabel = 'Approximative';
        /**
         * Approximative date format
         * \@values {known: 'FF/FF/FFFF', dayUnknown: '00/FF/FFFF', dayMonthUnknown: '00/00/FFFF'}
         */
        this.dateApproxMasks = { known: 'FF/FF/FFFF', dayUnknown: '00/FF/FFFF', dayMonthUnknown: '00/00/FFFF' };
        this.crossFieldsMinDateValidator = (/**
         * @param {?} fg
         * @return {?}
         */
        (fg) => {
            /** @type {?} */
            const fields = this.getFields();
            if (moment([fields.year, fields.month, fields.day]).isValid() && !this.formContainsErrors()) {
                if (moment([fields.year, fields.month, fields.day]) < moment(this.minDate, 'DD/MM/YYYY')) {
                    return { tooOld: true };
                }
            }
            return null;
        });
        this.crossFieldsMaxDateValidator = (/**
         * @param {?} fg
         * @return {?}
         */
        (fg) => {
            /** @type {?} */
            const fields = this.getFields();
            if (moment([fields.year, fields.month, fields.day]).isValid() && !this.formContainsErrors()) {
                /** @type {?} */
                const date = moment([fields.year, fields.month, fields.day]);
                if (this.maxDate === 'now' && date > moment() || date > moment(this.maxDate, 'DD/MM/YYYY')) {
                    return { tooFuture: true };
                }
            }
            return null;
        });
        this.crossFieldsDateValidator = (/**
         * @param {?} fg
         * @return {?}
         */
        (fg) => {
            /** @type {?} */
            const fields = this.getFields();
            if (!moment([fields.year, fields.month, fields.day]).isValid()) {
                if (this.areFieldsFilled()) {
                    this.formGroup.get(this.yearName).setErrors({ invalidDate: true }, { emitEvent: true });
                    this.formGroup.get(this.monthName).setErrors({ invalidDate: true }, { emitEvent: true });
                    this.formGroup.get(this.dayName).setErrors({ invalidDate: true }, { emitEvent: true });
                }
                this.formGroup.setErrors({ invalidDate: true });
                if ((this.required || this.yearRequired) && this.areFieldsFilled()) {
                    return { invalidDate: true };
                }
            }
            if (moment([fields.year, fields.month, fields.day]).isValid()) {
                this.formGroup.setErrors(null);
                this.formGroup.get(this.yearName).setErrors(null);
                this.formGroup.get(this.monthName).setErrors(null);
                this.formGroup.get(this.dayName).setErrors(null);
            }
            return null;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['readonly'] && changes['readonly'].previousValue != changes['readonly'].currentValue) {
            this.setCheckboxStyle(changes['readonly'].currentValue);
            if (this.formGroup.get(this.dateApproxMaskName) && this.formGroup.get(this.dateApproxMaskName).value === this.dateApproxMasks.dayMonthUnknown) {
                this.editMonthOptions(true);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.readonly) {
            this.addDayControlMinMaxValidator();
            this.addFormGroupValidators();
        }
        if (this.canBeApproximative && this.formGroup.get(this.dateApproxCheckboxName)) {
            this.dateApproxCheckboxChange();
            this.monthOptionChange();
        }
    }
    /**
     * @return {?}
     */
    addDayControlMinMaxValidator() {
        /** @type {?} */
        const validatorsArray = [];
        validatorsArray.push(Validators.min(1), Validators.max(31));
        if (this.formGroup.get(this.dayName).validator) {
            validatorsArray.push(this.formGroup.get(this.dayName).validator);
        }
        this.formGroup.get(this.dayName).setValidators(validatorsArray);
        this.formGroup.get(this.dayName).updateValueAndValidity();
    }
    /**
     * @return {?}
     */
    addFormGroupValidators() {
        /** @type {?} */
        const validatorsArray = [];
        validatorsArray.push(this.crossFieldsDateValidator);
        if (this.minDate && this.minDateErrorMessage) {
            validatorsArray.push(this.crossFieldsMinDateValidator);
        }
        if (this.maxDate && this.maxDateErrorMessage) {
            validatorsArray.push(this.crossFieldsMaxDateValidator);
        }
        if (this.formGroup.validator) {
            validatorsArray.push(this.formGroup.validator);
        }
        this.formGroup.setValidators(validatorsArray);
        this.formGroup.updateValueAndValidity();
    }
    /**
     * @private
     * @return {?}
     */
    getFields() {
        return { day: this.formGroup.get(this.dayName).value, month: this.getMonthValue(true), year: this.formGroup.get(this.yearName).value };
    }
    /**
     * @return {?}
     */
    areFieldsEmpty() {
        /** @type {?} */
        const fields = this.getFields();
        return !fields.day && !fields.month && !fields.year;
    }
    /**
     * @return {?}
     */
    areFieldsFilled() {
        /** @type {?} */
        const fields = this.getFields();
        return fields.day != null && fields.month > -1 && fields.year != null;
    }
    /**
     * @return {?}
     */
    areFieldsTouched() {
        return this.formGroup.get(this.yearName).touched && this.formGroup.get(this.yearName).touched && this.formGroup.get(this.yearName).touched;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.notifier.next();
        this.notifier.unsubscribe();
    }
    /**
     * Returns true if form is invalid
     * @return {?}
     */
    formContainsErrors() {
        /** @type {?} */
        const controlNames = [this.dayName, this.monthName, this.yearName];
        return controlNames.some((/**
         * @param {?} controlName
         * @return {?}
         */
        controlName => {
            return this.controlContainsErrors(controlName);
        }));
    }
    /**
     * @return {?}
     */
    formError() {
        return this.formGroup.touched && this.formGroup.errors !== null;
    }
    /**
     * Returns true if a control is invalid
     * @param {?} controlName
     * @return {?}
     */
    controlContainsErrors(controlName) {
        return this.formGroup && (this.formGroup.controls[controlName].errors !== null && (this.formGroup.controls[controlName].dirty || this.formGroup.controls[controlName].touched));
    }
    /**
     * Returns true if control value has pattern errors
     * @param {?} controlName
     * @return {?}
     */
    hasPatternError(controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.pattern;
    }
    /**
     * Returns true if control value is inferior to control min value or superior to control max value
     * @param {?} controlName
     * @return {?}
     */
    hasMinMaxError(controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.min || this.formGroup.controls[controlName].errors.max);
    }
    /**
     * Returns true if control value length is inferior to control min value length or superior to control max value length
     * @param {?} controlName
     * @return {?}
     */
    hasLengthError(controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.minlength || this.formGroup.controls[controlName].errors.maxlength);
    }
    /**
     * Returns true if control is required but not filled
     * @param {?} controlName
     * @return {?}
     */
    hasRequiredError(controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.required;
    }
    /**
     * Returns true if control is not a valid date
     * @param {?} controlName
     * @return {?}
     */
    hasInvalidDateError(controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.invalidDate;
    }
    /**
     * Returns true if form does not have a valid date
     * @return {?}
     */
    hasFormGroupInvalidateError() {
        return this.formGroup.errors && this.formGroup.errors.invalidDate;
    }
    /**
     * @return {?}
     */
    hasFutureDateError() {
        return this.formGroup.errors && this.formGroup.errors.tooFuture;
    }
    /**
     * @return {?}
     */
    hasTooOldDateError() {
        return this.formGroup.errors && this.formGroup.errors.tooOld;
    }
    /**
     * @return {?}
     */
    isAllFieldsFilled() {
        return this.hasRequiredError(this.yearName)
            && this.hasRequiredError(this.monthName)
            && this.hasRequiredError(this.dayName);
    }
    /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    getMonthValue(correctForMoment) {
        /** @type {?} */
        let value = this.formGroup.get(this.monthName).value;
        if (value === this.unknownMonthItem.value) {
            value = 1;
        }
        if (correctForMoment) {
            return value - 1;
        }
        return value;
    }
    /**
     * Format date to string for display
     * @return {?}
     */
    toString() {
        /** @type {?} */
        let dateString;
        /** @type {?} */
        const day = this.formGroup.get(this.dayName).value;
        /** @type {?} */
        const month = this.formGroup.get(this.monthName).value;
        /** @type {?} */
        const year = this.formGroup.get(this.yearName).value;
        /** @type {?} */
        const nonApproxAndEmpty = !this.isDateApprox && !day && !month && !year;
        /** @type {?} */
        const approxAndEmpty = this.isDateApprox && !month && !year;
        if (nonApproxAndEmpty || approxAndEmpty) {
            dateString = this.defaultDisplay;
        }
        else {
            moment.updateLocale(moment.locale(), { invalidDate: this.defaultDisplay });
            dateString = moment([Number(year), Number(this.getMonthValue(true)), Number(day)]).format('DD/MM/YYYY');
            if (!nonApproxAndEmpty && !this.isDateApprox) {
                return dateString;
            }
            else if (!approxAndEmpty && this.isDateApprox) {
                /** @type {?} */
                const mask = this.formGroup.get(this.dateApproxMaskName).value;
                /** @type {?} */
                const dateStringArray = dateString.split('/');
                if (mask === this.dateApproxMasks.dayUnknown) {
                    dateStringArray[0] = '-';
                }
                else if (mask === this.dateApproxMasks.dayMonthUnknown) {
                    dateStringArray[0] = '-';
                    dateStringArray[1] = '-';
                }
                dateString = dateStringArray.join('/');
            }
        }
        return dateString;
    }
    /**
     * Triggers date approx editing functions following date approx checkbox values
     * @private
     * @return {?}
     */
    dateApproxCheckboxChange() {
        this.formGroup.get(this.dateApproxCheckboxName).valueChanges
            .pipe(startWith(this.formGroup.get(this.dateApproxCheckboxName).value), distinctUntilChanged(), takeUntil(this.notifier))
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.isDateApprox = value;
            this.setDayValue(value);
            this.editMonthOptions(value);
            this.setDateApproxMask(value);
        }));
    }
    /**
     * Triggers SetDateApproxMAsk on monthOptions change
     * @private
     * @return {?}
     */
    monthOptionChange() {
        this.formGroup.get(this.monthName).valueChanges
            .pipe(startWith(this.formGroup.get(this.monthName).value), distinctUntilChanged(), takeUntil(this.notifier))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.setDateApproxMask(this.isDateApprox);
            this.formGroup.updateValueAndValidity();
        }));
    }
    /**
     * Sets day value to 1 if date is approximative
     * @private
     * @param {?} value
     * @return {?}
     */
    setDayValue(value) {
        if (value) {
            this.formGroup.get(this.dayName).setValue('1');
        }
        else {
            if (this.formGroup.get(this.dateApproxCheckboxName).dirty) {
                this.formGroup.get(this.dayName).reset();
            }
        }
    }
    /**
     * Adds or remove 'Inconnu' month option
     * @private
     * @param {?} value
     * @return {?}
     */
    editMonthOptions(value) {
        /** @type {?} */
        const hasUnknownMonthItem = this.monthOptions.some((/**
         * @param {?} item
         * @return {?}
         */
        item => item.value === this.unknownMonthItem.value));
        if (value) {
            if (!hasUnknownMonthItem) {
                this.monthOptions.unshift(this.unknownMonthItem);
            }
            if (this.formGroup.get(this.dateApproxMaskName).value === this.dateApproxMasks.dayMonthUnknown) {
                this.formGroup.get(this.monthName).setValue(this.unknownMonthItem.value);
            }
        }
        else {
            if (hasUnknownMonthItem) {
                this.monthOptions.shift();
            }
            if (this.formGroup.get(this.monthName).value === this.unknownMonthItem.value) {
                this.formGroup.get(this.monthName).reset();
            }
        }
    }
    /**
     * Sets date approx mask
     * @private
     * @param {?} value
     * @return {?}
     */
    setDateApproxMask(value) {
        /** @type {?} */
        const dateApproxMaskName = this.formGroup.get(this.dateApproxMaskName);
        if (value) {
            if (this.formGroup.get(this.monthName).value === this.unknownMonthItem.value) {
                dateApproxMaskName.setValue(this.dateApproxMasks.dayMonthUnknown);
            }
            else {
                dateApproxMaskName.setValue(this.dateApproxMasks.dayUnknown);
            }
        }
        else {
            dateApproxMaskName.setValue(this.dateApproxMasks.known);
        }
    }
    /**
     * Set approx checkbox style in readonly mode
     * @private
     * @param {?} isReadOnly
     * @return {?}
     */
    setCheckboxStyle(isReadOnly) {
        if (this.canBeApproximative && this.formGroup.get(this.dateApproxCheckboxName)) {
            if (isReadOnly) {
                this.formGroup.get(this.dateApproxCheckboxName).disable();
            }
            else {
                this.formGroup.get(this.dateApproxCheckboxName).enable();
            }
        }
    }
}
InputDateApproxComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-input-date-approx',
                template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <fieldset>\n      <div class=\"p-grid nogutter\" *ngIf=\"canBeApproximative; else dateCannotBeApproximative\">\n        <div class=\"p-col-8\">\n          <legend *ngIf=\"label\">\n            {{ label }} <span class=\"redish\" *ngIf=\"required\">*</span> :\n          </legend>\n        </div>\n        <div class=\"p-col-4\">\n          <p-checkbox\n                [name]=\"dateApproxCheckboxName\"\n                value=\"true\"\n                binary=\"true\"\n                [label]=\"dateApproxLabel\"\n                [formControlName]=\"dateApproxCheckboxName\"\n                checkboxIcon=\"pi pi-check\"\n                >\n          </p-checkbox>\n\n        </div>\n      </div>\n      <ng-template #dateCannotBeApproximative>\n        <legend *ngIf=\"label\">\n          {{ label }} <span class=\"redish\" *ngIf=\"required\">*</span> :\n        </legend>\n      </ng-template>\n\n      <ng-content select=\"[sub-label]\"></ng-content>\n      <input *ngIf=\"isDateApprox\" pInputText type=\"hidden\" [id]=\"dateApproxMaskName\" [name]=\"dateApproxMaskName\" [formControlName]=\"dateApproxMaskName\">\n\n      <div *ngIf=\"!readonly; else textual\" class=\"p-grid\">\n        <div class=\"p-col-12 p-md-2\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"dayHelpBlock\">{{ dayLabel }} :\n              </label>\n              <input pInputText [id]=\"dayName\" [name]=\"dayName\" type=\"text\" class=\"day\"\n                     placeholder=\"{{dayPlaceholder}}\" aria-describedby=\"dayHelpBlock\" [hidden]=\"isDateApprox\"\n                     [formControlName]=\"dayName\" pattern=\"[0-9]{0,2}\" min=\"1\" max=\"31\" maxlength=\"2\">\n\n              <input *ngIf=\"isDateApprox\" pInputText id=\"dayApproxName\" name=\"dayApproxName\" type=\"text\" class=\"day\"\n              placeholder=\" \" aria-describedby=\"dayHelpBlock\" disabled=\"true\">\n            </div>\n          </div>\n        </div>\n        <div class=\"p-col-12 p-md-6\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"monthHelpBlock\">{{ monthLabel }} :\n              </label>\n              <p-dropdown class=\"month-dropdown\" [id]=\"monthName\" [name]=\"monthName\" aria-describedby=\"monthHelpBlock\"\n                          [placeholder]=monthPlaceholder [options]=monthOptions\n                          [formControlName]=\"monthName\" >\n              </p-dropdown>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"p-col-12 p-md-4\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"yearHelpBlock\">{{ yearLabel}}\n                <span class=\"redish\" *ngIf=\"yearRequired\"> *</span> :\n              </label>\n              <input pInputText [id]=\"yearName\" [name]=\"yearName\" type=\"text\" placeholder=\"{{ yearPlaceholder }}\"\n                     pattern=\"[0-9]{0,4}\" minlength=\"4\" maxlength=\"4\"\n                     aria-describedby=\"yearHelpBlock\" [formControlName]=\"yearName\">\n            </div>\n          </div>\n        </div>\n      </div>\n      <ng-template #textual>\n        <span class=\"textual\">{{toString()}}</span>\n      </ng-template>\n\n      <ng-content select=\"[complement]\"></ng-content>\n\n      <div class=\"redish errors\" *ngIf=\"(formContainsErrors() || formGroup.errors) && !isAllFieldsFilled(); else dateRequired\">\n        <div *ngIf=\"controlContainsErrors(dayName)\">\n          <div *ngIf=\"hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasMinMaxError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.minMax}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(dayName) && !hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(monthName)\">\n          <div *ngIf=\"hasRequiredError(monthName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.month.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(yearName)\">\n          <div *ngIf=\"hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.required}}\n            </span>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasFormGroupInvalidateError()\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{messages.invalid}}\n          </span>\n        </div>\n\n        <div *ngIf=\"hasTooOldDateError()\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{minDateErrorMessage}}\n          </span>\n        </div>\n\n\n        <div *ngIf=\"hasFutureDateError()\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{maxDateErrorMessage}}\n          </span>\n        </div>\n\n        <ng-content select=\"[messages]\"></ng-content>\n      </div>\n      <ng-template #dateRequired >\n        <div class=\"redish errors\" *ngIf=\"isAllFieldsFilled()\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n            {{messages.required}}\n          </span>\n        </div>\n      </ng-template>\n    </fieldset>\n  </div>\n</div>\n",
                styles: [".textual{display:block}.day{padding-left:1rem;padding-right:1rem;min-width:4rem}#dayHelpBlock{white-space:nowrap}fieldset{border-color:transparent;border-width:0;padding:0}legend{-webkit-padding-start:0;padding-inline-start:0;padding-bottom:1rem}.p-grid label{margin:0;color:#656565}body .ui-dropdown-panel .ui-dropdown-items .ui-dropdown-item span:first{color:#656565}::-webkit-input-placeholder{color:#111}:-moz-placeholder{color:#111}::-moz-placeholder{color:#111}:-ms-input-placeholder{color:#111}"]
            }] }
];
/** @nocollapse */
InputDateApproxComponent.ctorParameters = () => [];
InputDateApproxComponent.propDecorators = {
    formGroup: [{ type: Input }],
    label: [{ type: Input }],
    required: [{ type: Input }],
    readonly: [{ type: Input }],
    defaultDisplay: [{ type: Input }],
    dayName: [{ type: Input }],
    dayLabel: [{ type: Input }],
    dayPlaceholder: [{ type: Input }],
    monthName: [{ type: Input }],
    monthLabel: [{ type: Input }],
    monthPlaceholder: [{ type: Input }],
    yearName: [{ type: Input }],
    yearRequired: [{ type: Input }],
    yearLabel: [{ type: Input }],
    yearPlaceholder: [{ type: Input }],
    model: [{ type: Input }],
    monthOptions: [{ type: Input }],
    messages: [{ type: Input }],
    canBeApproximative: [{ type: Input }],
    dateApproxLabel: [{ type: Input }],
    dateApproxCheckboxName: [{ type: Input }],
    dateApproxMasks: [{ type: Input }],
    dateApproxMaskName: [{ type: Input }],
    maxDate: [{ type: Input }],
    maxDateErrorMessage: [{ type: Input }],
    minDate: [{ type: Input }],
    minDateErrorMessage: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputDateApproxComponent.prototype.notifier;
    /**
     * @type {?}
     * @private
     */
    InputDateApproxComponent.prototype.unknownMonthItem;
    /** @type {?} */
    InputDateApproxComponent.prototype.isDateApprox;
    /**
     * FormGroup name
     * @type {?}
     */
    InputDateApproxComponent.prototype.formGroup;
    /**
     * FormGroup label
     * @type {?}
     */
    InputDateApproxComponent.prototype.label;
    /**
     * Is FormGroup required
     * @type {?}
     */
    InputDateApproxComponent.prototype.required;
    /**
     * Is FormGroup readonly
     * @type {?}
     */
    InputDateApproxComponent.prototype.readonly;
    /**
     * Default date value displayed in readonly mode
     * \@default 'N/A'
     * @type {?}
     */
    InputDateApproxComponent.prototype.defaultDisplay;
    /**
     * FormGroup day control name
     * @type {?}
     */
    InputDateApproxComponent.prototype.dayName;
    /**
     * FormGroup day control label
     * \@default 'Jour'
     * @type {?}
     */
    InputDateApproxComponent.prototype.dayLabel;
    /**
     * FormGroup day control placeholder
     * \@default 'JJ'
     * @type {?}
     */
    InputDateApproxComponent.prototype.dayPlaceholder;
    /**
     * FormGroup month control name
     * @type {?}
     */
    InputDateApproxComponent.prototype.monthName;
    /**
     * FormGroup month control label
     * \@default 'Mois'
     * @type {?}
     */
    InputDateApproxComponent.prototype.monthLabel;
    /**
     * FormGroup day control placeholder
     * \@default 'MM'
     * @type {?}
     */
    InputDateApproxComponent.prototype.monthPlaceholder;
    /**
     * FormGroup year control name
     * @type {?}
     */
    InputDateApproxComponent.prototype.yearName;
    /**
     * Puts a required * mark aside the year control
     * @type {?}
     */
    InputDateApproxComponent.prototype.yearRequired;
    /**
     * FormGroup year control label
     * \@default 'Année'
     * @type {?}
     */
    InputDateApproxComponent.prototype.yearLabel;
    /**
     * FormGroup year control placeholder
     * \@default 'AAAA'
     * @type {?}
     */
    InputDateApproxComponent.prototype.yearPlaceholder;
    /**
     * model property for usage with ngModel to be defined
     * @type {?}
     */
    InputDateApproxComponent.prototype.model;
    /**
     * FormGroup month control dropdown options
     * \@default SelectItem[] = [
     * { label: 'Janvier', value: 1 },
     * { label: 'Février', value: 2 },
     * { label: 'Mars', value: 3 },
     * { label: 'Avril', value: 4 },
     * { label: 'Mai', value: 5 },
     * { label: 'Juin', value: 6 },
     * { label: 'Juillet', value: 7 },
     * { label: 'Août', value: 8 },
     * { label: 'Septembre', value: 9 },
     * { label: 'Octobre', value: 10 },
     * { label: 'Novembre', value: 11 },
     * { label: 'Décembre', value: 12 }
     * ]
     * @type {?}
     */
    InputDateApproxComponent.prototype.monthOptions;
    /**
     * FormGroup validation error messages
     * \@default DateErrorMessage = {
     *     day: {
     *       required: 'Le jour est requis',
     *       pattern: 'Le jour doit être un nombre',
     *       length: 'Le jour doit contenir 2 chiffres au maximum',
     *       minMax: 'Le jour doit être compris entre 1 et 31'
     *     },
     *     month: {
     *       required: 'Le mois est requis'
     *     },
     *     year: {
     *       required: 'L\'année est requise',
     *       pattern: 'L\'année doit être un nombre',
     *       length: 'L\'année doit contenir 4 chiffres'
     *     },
     *     invalid: 'La date est invalide',
     *     required: 'Ce champ est obligatoire.'
     *   }
     * @type {?}
     */
    InputDateApproxComponent.prototype.messages;
    /**
     * Can the date be approximative or not
     * \@default false
     * \@usage [canBeApproximative]="true"
     * @type {?}
     */
    InputDateApproxComponent.prototype.canBeApproximative;
    /**
     * FormGroup approximative date label
     * \@default 'Approximative'
     * @type {?}
     */
    InputDateApproxComponent.prototype.dateApproxLabel;
    /**
     * FormGroup approximative date checkbox control name, required if approximative date
     * @type {?}
     */
    InputDateApproxComponent.prototype.dateApproxCheckboxName;
    /**
     * Approximative date format
     * \@values {known: 'FF/FF/FFFF', dayUnknown: '00/FF/FFFF', dayMonthUnknown: '00/00/FFFF'}
     * @type {?}
     */
    InputDateApproxComponent.prototype.dateApproxMasks;
    /**
     * FormGroup approximative date mask hidden control name, required if approximative date
     * @type {?}
     */
    InputDateApproxComponent.prototype.dateApproxMaskName;
    /**
     * max value for date DD/MM/YYY or 'now'
     * @type {?}
     */
    InputDateApproxComponent.prototype.maxDate;
    /**
     * Error message if date > max value
     * @type {?}
     */
    InputDateApproxComponent.prototype.maxDateErrorMessage;
    /**
     * min value for date DD/MM/YYY
     * @type {?}
     */
    InputDateApproxComponent.prototype.minDate;
    /**
     * Error message if date < min value
     * @type {?}
     */
    InputDateApproxComponent.prototype.minDateErrorMessage;
    /** @type {?} */
    InputDateApproxComponent.prototype.crossFieldsMinDateValidator;
    /** @type {?} */
    InputDateApproxComponent.prototype.crossFieldsMaxDateValidator;
    /** @type {?} */
    InputDateApproxComponent.prototype.crossFieldsDateValidator;
}
//# sourceMappingURL=data:application/json;base64,