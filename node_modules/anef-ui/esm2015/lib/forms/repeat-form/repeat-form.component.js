/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/repeat-form/repeat-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { FormBuilder, FormGroupDirective, Validators } from '@angular/forms';
export class RepeatFormComponent {
    /**
     * @param {?} parentForm
     * @param {?} formBuilder
     */
    constructor(parentForm, formBuilder) {
        this.parentForm = parentForm;
        this.formBuilder = formBuilder;
        this.readOnly = false;
        this.required = true;
        this.minNumber = 1;
        this.inputNumberLabel = '';
        this.removeLabel = '';
        this.confirmLabel = '';
        this.errorMessages = {
            required: 'Ce champ est obligatoire',
            pattern: 'Le format n\'est pas correct',
            min: 'Le nombre de répétition n\'est pas assez grand',
            max: 'Le nombre de répétition est trop grand'
        };
        this.header = '';
        this.isFormTouched = false;
        this.entreprisesSizeVide = false;
        this.addedForm = new EventEmitter();
        this.addedFormZero = new EventEmitter();
        this.numberRegexPattern = /^\d+$/;
        this.isMinZeroReadOnly = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initForm();
        this.patchForm();
        this.patchFormSizeVide();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isFormTouched) {
            this.formSize.controls['SIZE'].markAsTouched();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initForm() {
        this.form = (/** @type {?} */ (this.parentForm.form.get(this.controlName)));
        /** @type {?} */
        const validators = this.buildSizeValidators();
        this.formSize = this.formBuilder.group({
            SIZE: ['', validators]
        });
        if (this.readOnly) {
            this.formSize.disable();
        }
    }
    /**
     * @private
     * @return {?}
     */
    patchForm() {
        /** @type {?} */
        const initialFormSize = this.form.length === 0 ? '' : this.form.length;
        this.formSize.get('SIZE').setValue(initialFormSize);
        if (initialFormSize) {
            this.confirmSize();
        }
    }
    /**
     * @private
     * @return {?}
     */
    patchFormSizeVide() {
        if (this.minNumber == 0 && this.entreprisesSizeVide) {
            /** @type {?} */
            const initialFormSize = this.form.length;
            this.formSize.get('SIZE').setValue('0');
            this.isMinZeroReadOnly = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    buildSizeValidators() {
        /** @type {?} */
        let validators = [Validators.pattern(this.numberRegexPattern)];
        if (this.required) {
            validators.push(Validators.required);
        }
        if (this.minNumber) {
            validators.push(Validators.min(this.minNumber));
        }
        if (this.maxNumber && this.maxNumber > 0) {
            validators.push(Validators.max(this.maxNumber));
        }
        return validators;
    }
    /**
     * @return {?}
     */
    confirmSize() {
        this.formSize.get('SIZE').markAsTouched();
        if (this.formSize.valid) {
            while (!this.isMaxSizeReached() && !this.isMinSizeZero()) {
                this.addElement();
            }
            if (this.isMinSizeZero()) {
                this.isMinZeroReadOnly = true;
                this.addedFormZero.emit(true);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    addElement() {
        /** @type {?} */
        const newForm = this.formBuilder.group({});
        this.form.push(newForm);
        this.addedForm.emit(newForm);
    }
    /**
     * @return {?}
     */
    clearAllElements() {
        this.resetFormIsMinSizeZero();
        while (this.form.length > 0) {
            this.form.removeAt(0);
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetFormIsMinSizeZero() {
        if (this.isMinSizeZero()) {
            this.isMinZeroReadOnly = false;
            this.formSize.get('SIZE').reset();
        }
    }
    /**
     * @return {?}
     */
    isMaxSizeReached() {
        if (this.isMinZeroReadOnly) {
            return true;
        }
        return this.formSize.valid && this.size >= this.formSize.get('SIZE').value && this.formSize.get('SIZE').value > 0;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.form.length;
    }
    /**
     * @return {?}
     */
    isMinSizeZero() {
        return this.minNumber == 0 && parseInt(this.formSize.get('SIZE').value, 10) === 0;
    }
}
RepeatFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'anef-repeat-form',
                template: "<div>\n  <div class=\"p-grid form-element\" [ngClass]=\"{'on-error': !formSize.valid}\">\n    <div class=\"p-col-12 responsiv-md\">\n      <div class=\"p-col-fixed\">\n        <anef-input-text\n          class=\"amount\"\n          [required]=\"required\"\n          [readonly]=\"readOnly || isMaxSizeReached()\"\n          [formGroup]=\"formSize\"\n          [label]=\"inputNumberLabel\"\n          controlName=\"SIZE\"\n          [maxLength]= \"5\"\n          [messages]=\"{\n            required: 'Ce champ est obligatoire',\n            pattern: 'Le format n\\'est pas correct',\n            min: 'Le nombre de r\u00E9p\u00E9tition n\\'est pas assez grand',\n            max: 'Le nombre de r\u00E9p\u00E9tition est trop grand'\n          }\">\n        </anef-input-text>\n      </div>\n      <div>\n        <legend class=\"label\" *ngIf=\"size >= 1 && !readOnly || isMinSizeZero() && isMinZeroReadOnly && !readOnly\">\n          <span class=\"remove\" (click)=\"clearAllElements()\">\n            <i class=\"fa fa-close\" aria-hidden=\"true\"></i>\n            {{ removeLabel }}\n          </span>\n        </legend>\n      </div>\n\n    </div>\n\n    <div class=\"p-col-12\" *ngIf=\"!isMaxSizeReached() && !readOnly\">\n      <button pButton\n        label=\"{{ confirmLabel }}\"\n        (click)=\"confirmSize()\"\n        class=\"ui-button-secondary custom-responsiv\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"list-element p-grid wraper\" [ngClass]=\"{first: i==0, editable: !readOnly}\"\n    *ngFor=\"let subform of this.form['controls']; let i=index;\">\n    <fieldset class=\"full-width\">\n      <legend class=\"label\">\n        <ng-container *ngIf=\"header\">\n          {{ header }} {{i+1}}\n        </ng-container>\n      </legend>\n\n      <ng-container [ngTemplateOutlet]='template' [ngTemplateOutletContext]='{ $implicit: subform, idx: i  }'></ng-container>\n    </fieldset>\n  </div>\n</div>\n",
                styles: [".list-element{display:flex;flex-flow:row;flex-wrap:wrap;margin-top:0}.list-element .full-width{width:100%}.list-element .label{color:#417f90;font-size:1.2em;font-weight:700;padding:.5em}.list-element.editable .label{padding-top:.7em}.important{font-weight:700}.ui-button-secondary{background-color:#fff!important;color:#256cb9!important;border-color:#256cb9!important;text-align:center;margin:auto}fieldset legend{margin:0;padding:0;border:0}.remove{cursor:pointer;color:#d13721;font-size:1em;display:block;float:right;margin-top:-2.3em;position:relative;z-index:2}.remove .fa-close{font-weight:700;font-size:1em;margin-right:.4;margin-left:2em}::ng-deep .amount input,::ng-deep .amount span.textual{width:10em!important;display:block}::ng-deep .amount label{font-weight:200;width:100%}::ng-deep .amount .redish.errors.ng-star-inserted{width:100%}"]
            }] }
];
/** @nocollapse */
RepeatFormComponent.ctorParameters = () => [
    { type: FormGroupDirective },
    { type: FormBuilder }
];
RepeatFormComponent.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    readOnly: [{ type: Input }],
    required: [{ type: Input }],
    maxNumber: [{ type: Input }],
    minNumber: [{ type: Input }],
    inputNumberLabel: [{ type: Input }],
    removeLabel: [{ type: Input }],
    confirmLabel: [{ type: Input }],
    errorMessages: [{ type: Input }],
    controlName: [{ type: Input }],
    header: [{ type: Input }],
    isFormTouched: [{ type: Input }],
    entreprisesSizeVide: [{ type: Input }],
    addedForm: [{ type: Output }],
    addedFormZero: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RepeatFormComponent.prototype.template;
    /** @type {?} */
    RepeatFormComponent.prototype.readOnly;
    /** @type {?} */
    RepeatFormComponent.prototype.required;
    /** @type {?} */
    RepeatFormComponent.prototype.maxNumber;
    /** @type {?} */
    RepeatFormComponent.prototype.minNumber;
    /** @type {?} */
    RepeatFormComponent.prototype.inputNumberLabel;
    /** @type {?} */
    RepeatFormComponent.prototype.removeLabel;
    /** @type {?} */
    RepeatFormComponent.prototype.confirmLabel;
    /** @type {?} */
    RepeatFormComponent.prototype.errorMessages;
    /** @type {?} */
    RepeatFormComponent.prototype.controlName;
    /** @type {?} */
    RepeatFormComponent.prototype.header;
    /** @type {?} */
    RepeatFormComponent.prototype.isFormTouched;
    /** @type {?} */
    RepeatFormComponent.prototype.entreprisesSizeVide;
    /** @type {?} */
    RepeatFormComponent.prototype.addedForm;
    /** @type {?} */
    RepeatFormComponent.prototype.addedFormZero;
    /** @type {?} */
    RepeatFormComponent.prototype.numberRegexPattern;
    /** @type {?} */
    RepeatFormComponent.prototype.form;
    /** @type {?} */
    RepeatFormComponent.prototype.formSize;
    /** @type {?} */
    RepeatFormComponent.prototype.isMinZeroReadOnly;
    /**
     * @type {?}
     * @private
     */
    RepeatFormComponent.prototype.parentForm;
    /**
     * @type {?}
     * @private
     */
    RepeatFormComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,