/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date-two-way-binding/input-date-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { generateGuid } from '../../shared/guid';
export class InputDateTwoWayBindingComponent {
    constructor() {
        this.required = false;
        this.readonly = false;
        this.disabled = false;
        this.showTime = false;
        this.helpText = '';
        this.showCheckbox = false;
        this.checkboxModel = false;
        this.disableDateOnCheck = false;
        this.ngModelChange = new EventEmitter();
        this.checkboxValueChanged = new EventEmitter();
        this.yearRangeMin = new Date().getFullYear() - 100;
        this.yearRangeMax = new Date().getFullYear() + 3;
        this.guid = generateGuid();
        this.error = null;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        if (typeof model === 'string') {
            if (!model || this.showTime) {
                this.modelDate = new Date(model);
            }
            else {
                model = new Date(model);
                this.modelDate = new Date(model.getUTCFullYear(), model.getUTCMonth(), model.getUTCDate());
            }
        }
        else {
            if (!model || this.showTime) {
                this.modelDate = model;
            }
            else {
                this.modelDate = new Date(model.getUTCFullYear(), model.getUTCMonth(), model.getUTCDate());
            }
        }
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    set errors(errors) {
        if (!errors) {
            this.error = null;
        }
        else if (typeof (errors) === 'string') {
            this.error = [errors];
        }
        else {
            this.error = errors;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.disableDateFromCheck = (this.checkboxModel && this.disableDateOnCheck) ? true : false;
        this.fr = {
            firstDayOfWeek: 1,
            dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
            dayNamesShort: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],
            dayNamesMin: ['Di', 'Lu', 'Ma', 'Me', 'Je', 'Ve', 'Sa'],
            monthNames: [
                'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet',
                'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
            ],
            monthNamesShort: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aoû', 'Set', 'Oct', 'Nov', 'Déc'],
            today: `Aujourd'hui`,
            clear: 'Annuler',
            dateFormat: 'dd/mm/yy',
            weekHeader: 'Sem'
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    checkboxChanged(event) {
        this.checkboxValueChanged.emit(event);
        if (event === true && this.disableDateOnCheck) {
            this.modelDate = null;
            this.disableDateFromCheck = true;
            this.ngModelChange.emit(this.modelDate);
        }
        else {
            this.disableDateFromCheck = false;
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    onDateChange(date) {
        if (!date || this.showTime) {
            this.ngModelChange.emit(date);
        }
        else {
            /** @type {?} */
            const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            this.ngModelChange.emit(utcDate);
        }
    }
}
InputDateTwoWayBindingComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-input-date-two-way-binding',
                template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !(readonly || disabled)\" class=\"redish\">*</span> :\n      <button *ngIf=\"helpText\" class=\"help-button\" title=\"{{helpText}}\">\n        <i class=\"fa fa-question-circle fa-lg\"></i>\n      </button>\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\" class=\"ui-inputgroup\">\n        <p-calendar\n          (ngModelChange)=\"onDateChange($event)\"\n          [(ngModel)]=\"modelDate\"\n          [disabled]=\"disabled || disableDateFromCheck\"\n          [inputId]=\"guid\"\n          [locale]=\"fr\"\n          [maxDate]=\"maxDateValue\"\n          [minDate]=\"minDateValue\"\n          [monthNavigator]=\"true\"\n          [ngClass]=\"{'error': error && error.length}\"\n          [readonlyInput]=\"readonly\"\n          [required]=\"required\"\n          [showIcon]=\"true\"\n          [showTime]=\"showTime\"\n          [yearNavigator]=\"true\"\n          appendTo=\"body\"\n          dateFormat=\"dd/mm/yy\"\n          hourFormat=\"24\"\n          name=\"{{guid}}\"\n          yearRange=\"{{yearRangeMin}}:{{yearRangeMax}}\">\n        </p-calendar>\n        <span\n          *ngIf=\"showCheckbox\"\n          class=\"ui-inputgroup-addon checkbox\"\n          id=\"custom-span-checkbox\"\n        >\n          <p-checkbox\n            (onChange)=\"checkboxChanged($event)\"\n            [(ngModel)]=\"checkboxModel\"\n            binary=\"true\">\n          </p-checkbox>\n        </span>\n        <span\n          *ngIf=\"showCheckbox\"\n          class=\"ui-inputgroup-addon label\">\n          {{checkboxLabel}}\n        </span>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">\n          <span *ngIf=\"!showTime\">\n            {{ (modelDate !== null) ? (modelDate | date: 'dd/MM/yyyy') : '-' }}\n          </span>\n          <span *ngIf=\"showTime\">\n            {{ (modelDate !== null) ? (modelDate | date: 'dd/MM/yyyy \u00E0 HH:mm') : '-' }}\n          </span>\n          <span *ngIf=\"showCheckbox && checkboxModel\" class=\"textual-checkboxLabel\">\n            {{checkboxLabel}}\n          </span>\n        </div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                styles: ["p-calendar{margin-top:-.5rem}label{color:#656565;font-size:1.4rem}.help-button{border:none;background-color:#fff;color:#256cb9}.ui-inputgroup-addon.label{padding:.8rem 1rem 0;text-align:left;color:#271519;background:0 0;border:none;line-height:22px}.ui-inputgroup-addon.checkbox{line-height:3rem;background:0 0;border-right:none;border-top:none;border-bottom:none;padding:0 0 0 1rem}.textual-checkboxLabel{padding-left:1rem}#custom-span-checkbox{border-left:none;line-height:2.9rem}.textual{margin-top:7px}"]
            }] }
];
InputDateTwoWayBindingComponent.propDecorators = {
    model: [{ type: Input }],
    label: [{ type: Input }],
    required: [{ type: Input }],
    readonly: [{ type: Input }],
    disabled: [{ type: Input }],
    minDateValue: [{ type: Input }],
    maxDateValue: [{ type: Input }],
    showTime: [{ type: Input }],
    helpText: [{ type: Input }],
    showCheckbox: [{ type: Input }],
    checkboxModel: [{ type: Input }],
    checkboxLabel: [{ type: Input }],
    disableDateOnCheck: [{ type: Input }],
    errors: [{ type: Input }],
    ngModelChange: [{ type: Output }],
    checkboxValueChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.disabled;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.minDateValue;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.maxDateValue;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.showTime;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.helpText;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.showCheckbox;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.checkboxModel;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.checkboxLabel;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.disableDateOnCheck;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.checkboxValueChanged;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.modelDate;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.fr;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.disableDateFromCheck;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.yearRangeMin;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.yearRangeMax;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.guid;
    /** @type {?} */
    InputDateTwoWayBindingComponent.prototype.error;
}
//# sourceMappingURL=data:application/json;base64,