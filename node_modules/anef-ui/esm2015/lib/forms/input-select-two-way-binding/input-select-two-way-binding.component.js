/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select-two-way-binding/input-select-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { isEqual } from 'lodash';
import { generateGuid } from '../../shared/guid';
export class InputSelectTwoWayBindingComponent {
    constructor() {
        this.error = null;
        this.required = false;
        this.showDeleteItemsButton = false;
        this.readonly = false;
        this.disabled = false;
        this.options = [];
        this.filter = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.colSize = '12';
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    set errors(errors) {
        if (!errors) {
            this.error = null;
        }
        else if (typeof (errors) === 'string') {
            this.error = [errors];
        }
        else {
            this.error = errors;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.colSize = this.showDeleteItemsButton ? '11' : '12';
    }
    /**
     * @return {?}
     */
    onModelChange() {
        this.ngModelChange.emit(this.model);
    }
    /**
     * @return {?}
     */
    toString() {
        if (!this.options) {
            return '-';
        }
        /** @type {?} */
        const selectedOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        option => isEqual(this.model, option.value)));
        return selectedOption ? selectedOption.label : '-';
    }
    /**
     * @return {?}
     */
    deleteItem() {
        this.model = null;
        this.ngModelChange.emit(this.model);
    }
}
InputSelectTwoWayBindingComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-input-select-two-way-binding',
                template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <p-dropdown\n            id=\"{{guid}}\"\n            name=\"{{guid}}\"\n            [placeholder]=\"placeholder\"\n            [(ngModel)]=\"model\"\n            (ngModelChange)=\"onModelChange()\"\n            [options]=\"options\"\n            [required]=\"required\"\n            [disabled]=\"disabled\"\n            class=\"p-col-{{colSize}}\"\n            [ngClass]=\"{\n              'error': error && error.length,\n              'fluid': !showDeleteItemsButton\n            }\"\n            [filter]=\"filter\">\n          </p-dropdown>\n\n          <span\n            (click)=\"deleteItem()\"\n            *ngIf=\"showDeleteItemsButton\"\n            class=\"delete-button\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">{{ toString() }}</div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                styles: ["label{color:#656565;font-size:1.4rem}.delete-button{margin-bottom:7px;margin-left:5px;cursor:pointer;color:#d13721;font-size:1.2rem}p-dropdown{margin-top:-.5rem}p-dropdown.fluid{width:100%}.textual{padding-top:7px}"]
            }] }
];
InputSelectTwoWayBindingComponent.propDecorators = {
    model: [{ type: Input }],
    required: [{ type: Input }],
    showDeleteItemsButton: [{ type: Input }],
    readonly: [{ type: Input }],
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    options: [{ type: Input }],
    filter: [{ type: Input }],
    errors: [{ type: Input }],
    ngModelChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.error;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.model;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.showDeleteItemsButton;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.disabled;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.placeholder;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.options;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.filter;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.guid;
    /** @type {?} */
    InputSelectTwoWayBindingComponent.prototype.colSize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc2VsZWN0LXR3by13YXktYmluZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmVmLXVpLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2lucHV0LXNlbGVjdC10d28td2F5LWJpbmRpbmcvaW5wdXQtc2VsZWN0LXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRy9FLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFakMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBUWpELE1BQU0sT0FBTyxpQ0FBaUM7SUFOOUM7UUFPRSxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBR0osYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQiwwQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFDOUIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBR2pCLFlBQU8sR0FBaUIsRUFBRSxDQUFDO1FBQzNCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFVZCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFN0MsU0FBSSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQ3RCLFlBQU8sR0FBRyxJQUFJLENBQUM7SUFzQmpCLENBQUM7Ozs7O0lBbENDLElBQWEsTUFBTSxDQUFDLE1BQThCO1FBQ2hELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNuQjthQUFNLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7OztJQU1ELFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELGFBQWE7UUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixPQUFPLEdBQUcsQ0FBQztTQUNaOztjQUNLLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7Ozs7UUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQztRQUNyRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3JELENBQUM7Ozs7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OztZQW5ERixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSxtQ0FBbUM7Z0JBQzdDLCsvQ0FBNEQ7O2FBRTdEOzs7b0JBSUUsS0FBSzt1QkFDTCxLQUFLO29DQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO29CQUNMLEtBQUs7MEJBQ0wsS0FBSztzQkFDTCxLQUFLO3FCQUNMLEtBQUs7cUJBQ0wsS0FBSzs0QkFTTCxNQUFNOzs7O0lBcEJQLGtEQUFhOztJQUViLGtEQUFvQjs7SUFDcEIscURBQTBCOztJQUMxQixrRUFBdUM7O0lBQ3ZDLHFEQUEwQjs7SUFDMUIscURBQTBCOztJQUMxQixrREFBdUI7O0lBQ3ZCLHdEQUE2Qjs7SUFDN0Isb0RBQW9DOztJQUNwQyxtREFBd0I7O0lBVXhCLDBEQUE2Qzs7SUFFN0MsaURBQXNCOztJQUN0QixvREFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU2VsZWN0SXRlbSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZUd1aWQgfSBmcm9tICcuLi8uLi9zaGFyZWQvZ3VpZCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2FuZWYtaW5wdXQtc2VsZWN0LXR3by13YXktYmluZGluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1zZWxlY3QtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtc2VsZWN0LXR3by13YXktYmluZGluZy5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFNlbGVjdFR3b1dheUJpbmRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBlcnJvciA9IG51bGw7XG5cbiAgQElucHV0KCkgbW9kZWw6IGFueTtcbiAgQElucHV0KCkgcmVxdWlyZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgc2hvd0RlbGV0ZUl0ZW1zQnV0dG9uID0gZmFsc2U7XG4gIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG9wdGlvbnM6IFNlbGVjdEl0ZW1bXSA9IFtdO1xuICBASW5wdXQoKSBmaWx0ZXIgPSBmYWxzZTtcbiAgQElucHV0KCkgc2V0IGVycm9ycyhlcnJvcnM6IHN0cmluZyB8IEFycmF5PHN0cmluZz4pIHtcbiAgICBpZiAoIWVycm9ycykge1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoZXJyb3JzKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBbZXJyb3JzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9ycztcbiAgICB9XG4gIH1cbiAgQE91dHB1dCgpIG5nTW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZ3VpZCA9IGdlbmVyYXRlR3VpZCgpO1xuICBjb2xTaXplID0gJzEyJztcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNvbFNpemUgPSB0aGlzLnNob3dEZWxldGVJdGVtc0J1dHRvbiA/ICcxMScgOiAnMTInO1xuICB9XG5cbiAgb25Nb2RlbENoYW5nZSgpOiB2b2lkIHtcbiAgICB0aGlzLm5nTW9kZWxDaGFuZ2UuZW1pdCh0aGlzLm1vZGVsKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAnLSc7XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gdGhpcy5vcHRpb25zLmZpbmQob3B0aW9uID0+IGlzRXF1YWwodGhpcy5tb2RlbCwgb3B0aW9uLnZhbHVlKSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkT3B0aW9uID8gc2VsZWN0ZWRPcHRpb24ubGFiZWwgOiAnLSc7XG4gIH1cblxuICBkZWxldGVJdGVtKCk6IHZvaWQge1xuICAgIHRoaXMubW9kZWwgPSBudWxsO1xuICAgIHRoaXMubmdNb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xuICB9XG59XG4iXX0=