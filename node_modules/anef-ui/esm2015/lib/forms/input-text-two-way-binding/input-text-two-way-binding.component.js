/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text-two-way-binding/input-text-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { generateGuid } from '../../shared/guid';
/**
 * @record
 */
function Icon() { }
if (false) {
    /** @type {?} */
    Icon.prototype.type;
    /** @type {?} */
    Icon.prototype.class;
}
export class InputTextTwoWayBindingComponent {
    constructor() {
        this.MAX_LENGTH = 524288;
        this.error = null;
        this.type = 'text';
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.maxLength = this.MAX_LENGTH;
        this.disabled = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    set errors(errors) {
        if (!errors) {
            this.error = null;
        }
        else if (typeof (errors) === 'string') {
            this.error = [errors];
        }
        else {
            this.error = errors;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onModelChange(event) {
        if (this.capitalize) {
            event = event.charAt(0).toUpperCase() + event.slice(1);
        }
        this.ngModelChange.emit(event);
    }
    /**
     * @return {?}
     */
    toString() {
        return this.model ? this.model : '-';
    }
}
InputTextTwoWayBindingComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-input-text-two-way-binding',
                template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\" class=\"ui-inputgroup\">\n        <input (ngModelChange)=\"onModelChange($event)\"\n               [(ngModel)]=\"model\"\n               [disabled]=\"disabled\"\n               [maxlength]=maxLength\n               [ngClass]=\"{'error': error && error.length}\"\n               [readonly]=\"readonly\"\n               [required]=\"required\"\n               id=\"{{guid}}\"\n               name=\"{{guid}}\"\n               pInputText\n               placeholder=\"{{placeholder}}\"\n               type=\"{{type}}\">\n        <button *ngIf=\"icon\" [class]=\"icon.class\" [icon]=\"icon.type\" pButton type=\"button\"></button>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">{{ toString() }}</div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                styles: ["label{color:#656565;font-size:1.4rem}.textual{margin-top:7px}"]
            }] }
];
InputTextTwoWayBindingComponent.propDecorators = {
    model: [{ type: Input }],
    type: [{ type: Input }],
    required: [{ type: Input }],
    readonly: [{ type: Input }],
    capitalize: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    maxLength: [{ type: Input }],
    errors: [{ type: Input }],
    icon: [{ type: Input }],
    disabled: [{ type: Input }],
    ngModelChange: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputTextTwoWayBindingComponent.prototype.MAX_LENGTH;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.error;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.model;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.type;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.capitalize;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.placeholder;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.maxLength;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.icon;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.disabled;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.guid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5lZi11aS8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC10ZXh0LXR3by13YXktYmluZGluZy9pbnB1dC10ZXh0LXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUVqRCxtQkFHQzs7O0lBRkMsb0JBQWE7O0lBQ2IscUJBQWM7O0FBU2hCLE1BQU0sT0FBTywrQkFBK0I7SUFONUM7UUFPbUIsZUFBVSxHQUFXLE1BQU0sQ0FBQztRQUM3QyxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBR0osU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUNkLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBR25CLGNBQVMsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBV3BDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDaEIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTdDLFNBQUksR0FBRyxZQUFZLEVBQUUsQ0FBQztJQVl4QixDQUFDOzs7OztJQXpCQyxJQUFhLE1BQU0sQ0FBQyxNQUE4QjtRQUNoRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7YUFBTSxJQUFJLE9BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7O0lBT0QsYUFBYSxDQUFDLEtBQWE7UUFDekIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3ZDLENBQUM7OztZQTFDRixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLCt5Q0FBMEQ7O2FBRTNEOzs7b0JBS0UsS0FBSzttQkFDTCxLQUFLO3VCQUNMLEtBQUs7dUJBQ0wsS0FBSzt5QkFDTCxLQUFLO29CQUNMLEtBQUs7MEJBQ0wsS0FBSzt3QkFDTCxLQUFLO3FCQUNMLEtBQUs7bUJBU0wsS0FBSzt1QkFDTCxLQUFLOzRCQUNMLE1BQU07Ozs7Ozs7SUF0QlAscURBQTZDOztJQUM3QyxnREFBYTs7SUFFYixnREFBb0I7O0lBQ3BCLCtDQUF1Qjs7SUFDdkIsbURBQTBCOztJQUMxQixtREFBMEI7O0lBQzFCLHFEQUE0Qjs7SUFDNUIsZ0RBQXVCOztJQUN2QixzREFBNkI7O0lBQzdCLG9EQUE2Qzs7SUFVN0MsK0NBQW9COztJQUNwQixtREFBMEI7O0lBQzFCLHdEQUE2Qzs7SUFFN0MsK0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2VuZXJhdGVHdWlkIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2d1aWQnO1xuXG5pbnRlcmZhY2UgSWNvbiB7XG4gIHR5cGU6IHN0cmluZztcbiAgY2xhc3M6IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnYW5lZi1pbnB1dC10ZXh0LXR3by13YXktYmluZGluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC10ZXh0LXR3by13YXktYmluZGluZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lucHV0LXRleHQtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0VHdvV2F5QmluZGluZ0NvbXBvbmVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgTUFYX0xFTkdUSDogbnVtYmVyID0gNTI0Mjg4O1xuICBlcnJvciA9IG51bGw7XG5cbiAgQElucHV0KCkgbW9kZWw6IGFueTtcbiAgQElucHV0KCkgdHlwZSA9ICd0ZXh0JztcbiAgQElucHV0KCkgcmVxdWlyZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgcmVhZG9ubHkgPSBmYWxzZTtcbiAgQElucHV0KCkgY2FwaXRhbGl6ZSA9IGZhbHNlO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBtYXhMZW5ndGg6IG51bWJlciA9IHRoaXMuTUFYX0xFTkdUSDtcbiAgQElucHV0KCkgc2V0IGVycm9ycyhlcnJvcnM6IHN0cmluZyB8IEFycmF5PHN0cmluZz4pIHtcbiAgICBpZiAoIWVycm9ycykge1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoZXJyb3JzKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBbZXJyb3JzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9ycztcbiAgICB9XG4gIH1cbiAgQElucHV0KCkgaWNvbjogSWNvbjtcbiAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIG5nTW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZ3VpZCA9IGdlbmVyYXRlR3VpZCgpO1xuXG4gIG9uTW9kZWxDaGFuZ2UoZXZlbnQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmNhcGl0YWxpemUpIHtcbiAgICAgIGV2ZW50ID0gZXZlbnQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBldmVudC5zbGljZSgxKTtcbiAgICB9XG4gICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbCA/IHRoaXMubW9kZWwgOiAnLSc7XG4gIH1cbn1cbiJdfQ==