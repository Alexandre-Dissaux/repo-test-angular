/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-textarea-two-way-binding/input-textarea-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { generateGuid } from '../../shared/guid';
export class InputTextareaTwoWayBindingComponent {
    constructor() {
        this.required = false;
        this.readonly = false;
        this.rows = 5;
        this.cols = 30;
        this.errors = [];
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
}
InputTextareaTwoWayBindingComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-input-textarea-two-way-binding',
                template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <textarea (ngModelChange)=\"ngModelChange.emit($event)\"\n              [(ngModel)]=\"model\"\n              [cols]=\"cols\"\n              [ngClass]=\"{'error': errors.length}\"\n              [readonly]=\"readonly\"\n              [rows]=\"rows\"\n              id=\"{{guid}}\"\n              name=\"{{guid}}\"\n              pInputTextarea\n              type=\"text\">\n    </textarea>\n\n    <div *ngIf=\"errors.length\" class=\"error redish\">\n      <div *ngFor=\"let error of errors\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{error}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                styles: [".textual{display:block}label{color:#656565;font-size:1.4rem}"]
            }] }
];
InputTextareaTwoWayBindingComponent.propDecorators = {
    model: [{ type: Input }],
    required: [{ type: Input }],
    readonly: [{ type: Input }],
    label: [{ type: Input }],
    rows: [{ type: Input }],
    cols: [{ type: Input }],
    errors: [{ type: Input }],
    ngModelChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.model;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.rows;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.cols;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.errors;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputTextareaTwoWayBindingComponent.prototype.guid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dGFyZWEtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZWYtdWkvIiwic291cmNlcyI6WyJsaWIvZm9ybXMvaW5wdXQtdGV4dGFyZWEtdHdvLXdheS1iaW5kaW5nL2lucHV0LXRleHRhcmVhLXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVFqRCxNQUFNLE9BQU8sbUNBQW1DO0lBTmhEO1FBUVcsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLFNBQUksR0FBRyxDQUFDLENBQUM7UUFDVCxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNYLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU3QyxTQUFJLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBakJBLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLHFDQUFxQztnQkFDL0MsdTJCQUE4RDs7YUFFL0Q7OztvQkFFRSxLQUFLO3VCQUNMLEtBQUs7dUJBQ0wsS0FBSztvQkFDTCxLQUFLO21CQUNMLEtBQUs7bUJBQ0wsS0FBSztxQkFDTCxLQUFLOzRCQUNMLE1BQU07Ozs7SUFQUCxvREFBb0I7O0lBQ3BCLHVEQUEwQjs7SUFDMUIsdURBQTBCOztJQUMxQixvREFBdUI7O0lBQ3ZCLG1EQUFrQjs7SUFDbEIsbURBQW1COztJQUNuQixxREFBcUI7O0lBQ3JCLDREQUE2Qzs7SUFFN0MsbURBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2VuZXJhdGVHdWlkIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2d1aWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdhbmVmLWlucHV0LXRleHRhcmVhLXR3by13YXktYmluZGluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC10ZXh0YXJlYS10d28td2F5LWJpbmRpbmcuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9pbnB1dC10ZXh0YXJlYS10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0YXJlYVR3b1dheUJpbmRpbmdDb21wb25lbnQge1xuICBASW5wdXQoKSBtb2RlbDogYW55O1xuICBASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuICBASW5wdXQoKSByZWFkb25seSA9IGZhbHNlO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSByb3dzID0gNTtcbiAgQElucHV0KCkgY29scyA9IDMwO1xuICBASW5wdXQoKSBlcnJvcnMgPSBbXTtcbiAgQE91dHB1dCgpIG5nTW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZ3VpZCA9IGdlbmVyYXRlR3VpZCgpO1xufVxuIl19