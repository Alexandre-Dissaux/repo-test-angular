/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-text-two-way-binding/input-multi-text-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { generateGuid } from '../../shared/guid';
export class InputMultiTextTwoWayBindingComponent {
    constructor() {
        this.MAX_LENGTH = 524288;
        this.error = null;
        this.type = 'text';
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.maxLength = this.MAX_LENGTH;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.value = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set model(value) {
        this.value = value || [];
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    set errors(errors) {
        if (!errors) {
            this.error = null;
        }
        else if (typeof (errors) === 'string') {
            this.error = [errors];
        }
        else {
            this.error = errors;
        }
    }
    /**
     * @return {?}
     */
    onModelChange() {
        if (this.capitalize) {
            this.value = this.value.map((/**
             * @param {?} element
             * @return {?}
             */
            element => this._capitalize(element)));
        }
        if (this.value[0] === '' && this.value.length === 1) {
            this.value = null;
        }
        this.ngModelChange.emit(this.value);
    }
    /**
     * @return {?}
     */
    addItem() {
        this.value.push('');
    }
    /**
     * @param {?} index
     * @return {?}
     */
    deleteItem(index) {
        this.value.splice(index, 1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    toString(item) {
        return item ? item : '-';
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackByFn(index, item) {
        return index;
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    _capitalize(text) {
        return (text.charAt(0).toUpperCase() + text.slice(1));
    }
}
InputMultiTextTwoWayBindingComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-input-multi-text-two-way-binding',
                template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}-0\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <div [ngClass]=\"{\n            'p-col-11': value.length > 1,\n            'p-col-12': value.length <= 1\n          }\">\n            <input pInputText\n                   type=\"{{type}}\"\n                   id=\"{{guid}}-0\"\n                   name=\"{{guid}}-0\"\n                   [placeholder]=\"placeholder\"\n                   [maxlength]=\"maxLength\"\n                   [(ngModel)]=\"value[0]\"\n                   (ngModelChange)=\"onModelChange()\"\n                   [required]=\"required\"\n                   [ngClass]=\"{'error': error && error.length}\">\n          </div>\n\n          <span (click)=\"deleteItem(0)\"\n                *ngIf=\"value.length > 1\"\n                class=\"delete-button delete-{{guid}}-0\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <div *ngFor=\"let modelItem of value | slice:1; index as i; trackBy: trackByFn\"\n             class=\"p-grid p-align-center\">\n          <div [ngClass]=\"{\n            'p-col-11': value.length > 1,\n            'p-col-12': value.length <= 1\n          }\">\n            <input\n              pInputText\n              type=\"{{type}}\"\n              id=\"{{guid}}-{{i+1}}\"\n              name=\"{{guid}}-{{i+1}}\"\n              [maxlength]=\"maxLength\"\n              [(ngModel)]=\"value[i+1]\"\n              (ngModelChange)=\"onModelChange()\"\n              [ngClass]=\"{'error': error && error.length}\">\n          </div>\n\n          <span\n            (click)=\"deleteItem(i+1)\"\n            class=\"delete-button delete-{{guid}}-{{i+1}}\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <button (click)=\"addItem()\"\n                *ngIf=\"value[value.length - 1]\"\n                class=\"ui-button-borderless add-item\"\n                pButton>\n          {{addItemLabel}}\n        </button>\n      </div>\n\n      <ng-template #textual>\n        <ul class=\"item-readonly textual\">\n          <li *ngFor=\"let valueItem of value\">{{toString(valueItem)}}</li>\n          <li *ngIf=\"value.length === 0\">-</li>\n        </ul>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                styles: [".item-readonly{list-style-type:none;padding:0;margin:0}label{color:#656565;font-size:1.4rem}.delete-button{margin-bottom:7px;margin-left:5px;cursor:pointer;color:#d13721;font-size:1.2rem}.input{margin-top:-1.3rem}.textual{margin-top:7px}"]
            }] }
];
InputMultiTextTwoWayBindingComponent.propDecorators = {
    model: [{ type: Input, args: ['model',] }],
    type: [{ type: Input }],
    required: [{ type: Input }],
    readonly: [{ type: Input }],
    capitalize: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    maxLength: [{ type: Input }],
    addItemLabel: [{ type: Input }],
    errors: [{ type: Input }],
    ngModelChange: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputMultiTextTwoWayBindingComponent.prototype.MAX_LENGTH;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.error;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.type;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.capitalize;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.placeholder;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.maxLength;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.addItemLabel;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.guid;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbXVsdGktdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5lZi11aS8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC1tdWx0aS10ZXh0LXR3by13YXktYmluZGluZy9pbnB1dC1tdWx0aS10ZXh0LXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVFqRCxNQUFNLE9BQU8sb0NBQW9DO0lBTmpEO1FBT21CLGVBQVUsR0FBVyxNQUFNLENBQUM7UUFDN0MsVUFBSyxHQUFHLElBQUksQ0FBQztRQUtKLFNBQUksR0FBRyxNQUFNLENBQUM7UUFDZCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUduQixjQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQVczQixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFN0MsU0FBSSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQ3RCLFVBQUssR0FBVSxFQUFFLENBQUM7SUErQnBCLENBQUM7Ozs7O0lBdERDLElBQW9CLEtBQUssQ0FBQyxLQUFLO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQVNELElBQWEsTUFBTSxDQUFDLE1BQThCO1FBQ2hELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNuQjthQUFNLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7OztJQU1ELGFBQWE7UUFDWCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQztTQUNuRTtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBYTtRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsSUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDM0IsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEtBQWEsRUFBRSxJQUFZO1FBQ25DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRU8sV0FBVyxDQUFDLElBQVk7UUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7OztZQS9ERixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSx1Q0FBdUM7Z0JBQ2pELDB2RkFBZ0U7O2FBRWpFOzs7b0JBS0UsS0FBSyxTQUFDLE9BQU87bUJBR2IsS0FBSzt1QkFDTCxLQUFLO3VCQUNMLEtBQUs7eUJBQ0wsS0FBSztvQkFDTCxLQUFLOzBCQUNMLEtBQUs7d0JBQ0wsS0FBSzsyQkFDTCxLQUFLO3FCQUNMLEtBQUs7NEJBU0wsTUFBTTs7Ozs7OztJQXZCUCwwREFBNkM7O0lBQzdDLHFEQUFhOztJQUtiLG9EQUF1Qjs7SUFDdkIsd0RBQTBCOztJQUMxQix3REFBMEI7O0lBQzFCLDBEQUE0Qjs7SUFDNUIscURBQXVCOztJQUN2QiwyREFBNkI7O0lBQzdCLHlEQUFxQzs7SUFDckMsNERBQThCOztJQVU5Qiw2REFBNkM7O0lBRTdDLG9EQUFzQjs7SUFDdEIscURBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2VuZXJhdGVHdWlkIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2d1aWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdhbmVmLWlucHV0LW11bHRpLXRleHQtdHdvLXdheS1iaW5kaW5nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LW11bHRpLXRleHQtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtbXVsdGktdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRNdWx0aVRleHRUd29XYXlCaW5kaW5nQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBNQVhfTEVOR1RIOiBudW1iZXIgPSA1MjQyODg7XG4gIGVycm9yID0gbnVsbDtcblxuICBASW5wdXQoJ21vZGVsJykgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlIHx8wqBbXTtcbiAgfVxuICBASW5wdXQoKSB0eXBlID0gJ3RleHQnO1xuICBASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuICBASW5wdXQoKSByZWFkb25seSA9IGZhbHNlO1xuICBASW5wdXQoKSBjYXBpdGFsaXplID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1heExlbmd0aCA9IHRoaXMuTUFYX0xFTkdUSDtcbiAgQElucHV0KCkgYWRkSXRlbUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNldCBlcnJvcnMoZXJyb3JzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+KSB7XG4gICAgaWYgKCFlcnJvcnMpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKGVycm9ycykgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVycm9yID0gW2Vycm9yc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcnM7XG4gICAgfVxuICB9XG4gIEBPdXRwdXQoKSBuZ01vZGVsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGd1aWQgPSBnZW5lcmF0ZUd1aWQoKTtcbiAgdmFsdWU6IGFueVtdID0gW107XG5cbiAgb25Nb2RlbENoYW5nZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYXBpdGFsaXplKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5tYXAoZWxlbWVudCA9PiB0aGlzLl9jYXBpdGFsaXplKGVsZW1lbnQpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmFsdWVbMF0gPT09ICcnICYmIHRoaXMudmFsdWUubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICBhZGRJdGVtKCk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUucHVzaCgnJyk7XG4gIH1cblxuICBkZWxldGVJdGVtKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICB0b1N0cmluZyhpdGVtOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBpdGVtID8gaXRlbSA6ICctJztcbiAgfVxuXG4gIHRyYWNrQnlGbihpbmRleDogbnVtYmVyLCBpdGVtOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHByaXZhdGUgX2NhcGl0YWxpemUodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHRleHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnNsaWNlKDEpKTtcbiAgfVxufVxuIl19