/**
 * @fileoverview added by tsickle
 * Generated from: lib/vertical-menu/vertical-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostListener } from '@angular/core';
/**
 * @record
 */
export function VMenuItem() { }
if (false) {
    /** @type {?|undefined} */
    VMenuItem.prototype.items;
    /** @type {?|undefined} */
    VMenuItem.prototype.control;
}
export class VerticalMenuComponent {
    constructor() {
        this.topOffset = 0;
        this.isWithMarkers = false;
        this.isSingleLevel = true;
        this.targets = [];
    }
    /**
     * @return {?}
     */
    handleScroll() {
        if (!this.targets.length) {
            return;
        }
        /** @type {?} */
        const pos = (document.documentElement.scrollTop || document.body.scrollTop);
        /** @type {?} */
        let toActivate = this.targets[0];
        for (const elem of this.targets) {
            /** @type {?} */
            const threshold = this._getYOffset(elem.target) - 1;
            if (threshold <= pos) {
                toActivate = elem;
            }
            elem.expanded = false;
        }
        if (toActivate) {
            toActivate.expanded = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formattedItems = this._parseItems(this.items);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.items && changes.items.previousValue != changes.items.currentValue) {
            this.formattedItems = this._parseItems(changes.items.currentValue);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onAnchorLink(event) {
        // Scroll to the target adding the offset if defined
        /** @type {?} */
        const y = this._getYOffset(event.item.target);
        window.scrollTo({ top: y, behavior: 'smooth' });
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    _getYOffset(target) {
        /** @type {?} */
        const targetElem = document.querySelector(target);
        if (!targetElem) {
            // In case the target element is unreachable we return a value superior to the max-scroll so it can't be auto-selected
            return document.documentElement.scrollHeight + 1;
        }
        /** @type {?} */
        const y = targetElem.getBoundingClientRect().top + window.pageYOffset - this.topOffset;
        return y;
    }
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    _parseItems(items) {
        if (!items) {
            return;
        }
        /** @type {?} */
        const formatted = [];
        for (const item of items) {
            /** @type {?} */
            const tmpItem = Object.assign({}, item);
            // Set onclick event if not defined and an id is passed as target
            if (item.target && item.target.indexOf('#') !== -1 && !item.command) {
                tmpItem.command = this.onAnchorLink.bind(this);
                this.targets.push(tmpItem);
            }
            // Status marker specific controls
            if (this.isWithMarkers) {
                if (!tmpItem.icon) {
                    tmpItem.icon = 'fa fa-check-circle';
                }
                if (item.control) {
                    delete tmpItem.control;
                    if (!tmpItem.styleClass) {
                        tmpItem.styleClass = '';
                    }
                    this.setMarkerStatus(tmpItem, item.control);
                    item.control.statusChanges.subscribe((/**
                     * @param {?} status
                     * @return {?}
                     */
                    (status) => {
                        this.setMarkerStatus(tmpItem, item.control);
                    }));
                }
            }
            // Recurse
            if (item.items && item.items.length) {
                this.isSingleLevel = false;
                tmpItem.items = this._parseItems((/** @type {?} */ (item.items)));
            }
            formatted.push(tmpItem);
        }
        return formatted;
    }
    /**
     * @param {?} item
     * @param {?} control
     * @return {?}
     */
    setMarkerStatus(item, control) {
        /** @type {?} */
        const isCompleteValidClass = 'is-complete-valid';
        /** @type {?} */
        const isCompleteInvalidClass = 'is-complete-invalid';
        /** @type {?} */
        const completeWithRejectionErrorKey = 'completeInvalid';
        if (control.valid) {
            this.addClass(item, isCompleteValidClass);
            this.removeClass(item, isCompleteInvalidClass);
        }
        else {
            if (control.errors && completeWithRejectionErrorKey in control.errors) {
                this.addClass(item, isCompleteInvalidClass);
            }
            else {
                this.removeClass(item, isCompleteInvalidClass);
            }
            this.removeClass(item, isCompleteValidClass);
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?} className
     * @return {?}
     */
    addClass(item, className) {
        if (!item.styleClass) {
            item.styleClass = className;
        }
        if (-1 === item.styleClass.indexOf(className)) {
            item.styleClass += ` ${className}`;
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?} className
     * @return {?}
     */
    removeClass(item, className) {
        item.styleClass = item.styleClass.replace(className, '').trim();
    }
}
VerticalMenuComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'anef-vertical-menu',
                template: "<p-panelMenu\n  [model]=\"formattedItems\"\n  [multiple]=\"multiple\"\n  [style]=\"style\"\n  [styleClass]=\"styleClass\"\n  class=\"anef-ui-vmenu\"\n  [class.no-submenu]=\"isSingleLevel\"\n  [class.with-markers]=\"isWithMarkers\"\n  routerLinkActiveOptions=\"{exact: true}\"\n  ></p-panelMenu>\n",
                styles: [""]
            }] }
];
VerticalMenuComponent.propDecorators = {
    items: [{ type: Input }],
    style: [{ type: Input }],
    styleClass: [{ type: Input }],
    multiple: [{ type: Input }],
    topOffset: [{ type: Input }],
    isWithMarkers: [{ type: Input }],
    handleScroll: [{ type: HostListener, args: ['window:scroll',] }]
};
if (false) {
    /** @type {?} */
    VerticalMenuComponent.prototype.items;
    /** @type {?} */
    VerticalMenuComponent.prototype.style;
    /** @type {?} */
    VerticalMenuComponent.prototype.styleClass;
    /** @type {?} */
    VerticalMenuComponent.prototype.multiple;
    /** @type {?} */
    VerticalMenuComponent.prototype.topOffset;
    /** @type {?} */
    VerticalMenuComponent.prototype.isWithMarkers;
    /** @type {?} */
    VerticalMenuComponent.prototype.isSingleLevel;
    /** @type {?} */
    VerticalMenuComponent.prototype.formattedItems;
    /** @type {?} */
    VerticalMenuComponent.prototype.targets;
}
//# sourceMappingURL=data:application/json;base64,