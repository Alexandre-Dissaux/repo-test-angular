import { BreadcrumbModule } from 'primeng/breadcrumb';
import { MenubarModule } from 'primeng/menubar';
import { DialogModule } from 'primeng/dialog';
import { MessageModule } from 'primeng/message';
import { merge, Subject } from 'rxjs';
import { debounceTime, takeUntil, startWith, distinctUntilChanged } from 'rxjs/operators';
import { DropdownModule } from 'primeng/dropdown';
import { isEqual } from 'lodash';
import { RadioButtonModule } from 'primeng/radiobutton';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { PanelMenuModule } from 'primeng/panelmenu';
import { __values, __assign } from 'tslib';
import { InputSwitchModule } from 'primeng/inputswitch';
import { ProgressSpinnerModule } from 'primeng/progressspinner';
import { SelectButtonModule } from 'primeng/selectbutton';
import { CheckboxModule } from 'primeng/checkbox';
import { MultiSelectModule } from 'primeng/multiselect';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import listPlugin from '@fullcalendar/list';
import moment from 'moment';
import allLocales from '@fullcalendar/core/locales-all';
import { FullCalendarModule } from 'primeng/fullcalendar';
import { CalendarModule } from 'primeng/calendar';
import { TabViewModule } from 'primeng/tabview';
import { CommonModule } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';
import { InputTextModule } from 'primeng/inputtext';
import { ButtonModule } from 'primeng/button';
import { Pipe, NgModule, Component, Input, HostBinding, EventEmitter, Output, HostListener, ContentChild, TemplateRef, ViewChild } from '@angular/core';
import { FormsModule, ReactiveFormsModule, Validators, FormBuilder, FormGroupDirective } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/trim.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrimPipe = /** @class */ (function () {
    function TrimPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TrimPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            value = '';
        }
        return value.trim();
    };
    TrimPipe.decorators = [
        { type: Pipe, args: [{ name: 'trim' },] }
    ];
    return TrimPipe;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/truncate.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Truncate = /** @class */ (function () {
    function Truncate() {
    }
    // usage : | truncate:[limit, trail, tail]
    // default values : [20, '...', undefined]
    // exemple : | truncate:[10, '(...)', '.jpg'] -> "t(...).jpg"
    // usage : | truncate:[limit, trail, tail]
    // default values : [20, '...', undefined]
    // exemple : | truncate:[10, '(...)', '.jpg'] -> "t(...).jpg"
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    Truncate.prototype.transform = 
    // usage : | truncate:[limit, trail, tail]
    // default values : [20, '...', undefined]
    // exemple : | truncate:[10, '(...)', '.jpg'] -> "t(...).jpg"
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        if (args === void 0) { args = []; }
        /** @type {?} */
        var limit = args.length > 0 ? parseInt(args[0], 10) : 20;
        if (value.length <= limit) {
            return value;
        }
        /** @type {?} */
        var trail = args.length > 1 ? args[1] : '...';
        /** @type {?} */
        var tail = args.length > 2 ? args[2] : '';
        limit -= tail.length + trail.length;
        /** @type {?} */
        var result = value.substring(0, limit) + trail + tail;
        return result;
    };
    Truncate.decorators = [
        { type: Pipe, args: [{ name: 'truncate' },] }
    ];
    return Truncate;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/shared.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SharedModule = /** @class */ (function () {
    function SharedModule() {
    }
    SharedModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TrimPipe, Truncate],
                    exports: [TrimPipe, Truncate]
                },] }
    ];
    return SharedModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/breadcrumb/breadcrumb.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BreadcrumbComponent = /** @class */ (function () {
    function BreadcrumbComponent() {
    }
    BreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'anef-breadcrumb',
                    template: "<div class=\"breadcrumb\">\n  <span class=\"label\">{{prefix}}</span>\n  <p-breadcrumb [model]=\"model\" [home]=\"home\" [style]=\"style\" [styleClass]=\"styleClass\"></p-breadcrumb>\n</div>\n",
                    styles: [".breadcrumb{display:flex;align-items:flex-end}"]
                }] }
    ];
    BreadcrumbComponent.propDecorators = {
        prefix: [{ type: Input }],
        model: [{ type: Input }],
        style: [{ type: Input }],
        styleClass: [{ type: Input }],
        home: [{ type: Input }]
    };
    return BreadcrumbComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/breadcrumb.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BreadcrumbModule$1 = /** @class */ (function () {
    function BreadcrumbModule$$1() {
    }
    BreadcrumbModule$$1.decorators = [
        { type: NgModule, args: [{
                    declarations: [BreadcrumbComponent],
                    imports: [BreadcrumbModule],
                    exports: [BreadcrumbComponent]
                },] }
    ];
    return BreadcrumbModule$$1;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/tile/tile.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TileComponent = /** @class */ (function () {
    function TileComponent() {
        this.tileClass = true;
    }
    TileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'anef-tile',
                    template: "<a tabindex=\"0\">\n  <span class=\"tile-content p-grid no-grid-margin\">\n    <span class=\"p-col-3 p-sm-2 p-lg-12 p-col-align-center\">\n      <span class=\"fa p-align-center {{icon}}\"></span>\n    </span>\n    <span class=\"p-col-9 p-sm-10 p-lg-12 p-col-align-center\">\n      <span class=\"label\">\n        {{label}}\n      </span>\n    </span>\n  </span>\n</a>\n",
                    styles: [""]
                }] }
    ];
    TileComponent.propDecorators = {
        icon: [{ type: Input }],
        label: [{ type: Input }],
        tileClass: [{ type: HostBinding, args: ['class.ui-tile',] }]
    };
    return TileComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/tile.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TileModule = /** @class */ (function () {
    function TileModule() {
    }
    TileModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TileComponent],
                    exports: [TileComponent]
                },] }
    ];
    return TileModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/navigation/navigation-bar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NavigationBarComponent = /** @class */ (function () {
    function NavigationBarComponent() {
    }
    NavigationBarComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-navigation-bar',
                    template: "<div class=\"header-nav\" [ngClass]=theme>\n  <nav>\n    <p-menubar [model]=\"items\"></p-menubar>\n  </nav>\n</div>\n",
                    styles: [":host ::ng-deep .ui-menubar{background-color:#004990;border:0}:host ::ng-deep .ui-state-disabled,:host ::ng-deep .ui-state-disabled:focus,:host ::ng-deep .ui-state-disabled:hover{cursor:not-allowed!important;color:#656565;background-color:#004990;border-color:transparent}:host ::ng-deep .ui-state-active{background-color:#0f3c78;color:#fff;border-color:#d93e18;font-family:robotobold}:host ::ng-deep .light a{color:#256cb9}:host ::ng-deep .light .ui-menubar{background-color:#fff}:host ::ng-deep .light .ui-state-disabled,:host ::ng-deep .light .ui-state-disabled:focus,:host ::ng-deep .light .ui-state-disabled:hover{cursor:not-allowed!important;color:#c7c7c7;background-color:#fff;border-color:transparent}:host ::ng-deep .light .ui-state-active{background-color:#fff;color:#256cb9;border-color:#d93e18;font-family:robotobold}:host ::ng-deep .light a.is-active,:host ::ng-deep .light a:focus,:host ::ng-deep .light a:hover{background-color:#f5f5f5;color:#256cb9;border-color:#d93e18}:host ::ng-deep .active-tab{border-color:#d93e18}"]
                }] }
    ];
    /** @nocollapse */
    NavigationBarComponent.ctorParameters = function () { return []; };
    NavigationBarComponent.propDecorators = {
        theme: [{ type: Input }],
        items: [{ type: Input }]
    };
    return NavigationBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/navigation/navigation-bar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NavigationBarModule = /** @class */ (function () {
    function NavigationBarModule() {
    }
    NavigationBarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NavigationBarComponent],
                    imports: [CommonModule, MenubarModule],
                    exports: [NavigationBarComponent]
                },] }
    ];
    return NavigationBarModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/error-modal/error-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErrorModalComponent = /** @class */ (function () {
    function ErrorModalComponent() {
        this.displayErrorChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ErrorModalComponent.prototype.onClose = /**
     * @return {?}
     */
    function () {
        this.displayErrorChange.emit(false);
    };
    /**
     * @return {?}
     */
    ErrorModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.displayErrorChange.unsubscribe();
    };
    ErrorModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-error-modal',
                    template: "<p-dialog class=\"modalAlert\"\n          appendTo=\"body\"\n          [showHeader]=\"false\"\n          [(visible)]=\"displayError\"\n          [modal]=\"true\"\n          [closable]=\"false\"\n          [responsive]=\"true\"\n          [style]=\"{width: '60rem', minWidth: '28rem'}\" [minY]=\"70\"\n          [baseZIndex]=\"10000\">\n\n  <div class=\"alertHeader\"\n    >{{ title }}\n  </div>\n  \n  <div class=\"msgBox alert\">\n    <span class=\"fa fa-exclamation-triangle\"></span>\n    <p>{{titleCheck}}</p>\n  </div>\n  <p class=\"bold\">{{textBold | trim}}.</p>\n  <p>{{text | trim}}.</p>\n  <p *ngIf=\"facultativeText\">{{facultativeText}}</p>\n  <p-footer>\n    <button type=\"button\" pButton (click)=\"onClose()\" label=\"{{labelBtn}}\"></button>\n  </p-footer>\n</p-dialog>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ErrorModalComponent.ctorParameters = function () { return []; };
    ErrorModalComponent.propDecorators = {
        displayError: [{ type: Input }],
        title: [{ type: Input }],
        titleCheck: [{ type: Input }],
        text: [{ type: Input }],
        facultativeText: [{ type: Input }],
        labelBtn: [{ type: Input }],
        textBold: [{ type: Input }],
        displayErrorChange: [{ type: Output }]
    };
    return ErrorModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/error-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErrorModalModule = /** @class */ (function () {
    function ErrorModalModule() {
    }
    ErrorModalModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ErrorModalComponent],
                    imports: [
                        CommonModule,
                        DialogModule,
                        ButtonModule,
                        SharedModule
                    ],
                    exports: [ErrorModalComponent]
                },] }
    ];
    return ErrorModalModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/success-modal/success-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SuccessModalComponent = /** @class */ (function () {
    function SuccessModalComponent() {
        this.displaySuccessChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SuccessModalComponent.prototype.onClose = /**
     * @return {?}
     */
    function () {
        this.displaySuccessChange.emit(false);
    };
    /**
     * @return {?}
     */
    SuccessModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.displaySuccessChange.unsubscribe();
    };
    SuccessModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-success-modal',
                    template: "<p-dialog\n  [(visible)]=\"displaySuccess\"\n  [modal]=\"true\"\n  [closable]=\"false\"\n  [responsive]=\"true\"\n  (onAfterHide)=\"onClose()\"\n  [style]=\"{width: '60rem', minWidth: '28rem'}\" [minY]=\"70\"\n  [baseZIndex]=\"10000\">\n  <p-header>\n    {{ title }}\n  </p-header>\n  <div class=\"msgBox info\">\n    <span class=\"fa fa-check-square-o check-icon\"></span>\n    <p>{{titleCheck}}</p>\n  </div>\n  <p class=\"bold\">{{textBold | trim}}.</p>\n  <p>{{text | trim}}.</p>\n  <p *ngIf=\"facultativeText\">{{facultativeText}}</p>\n  <p-footer>\n    <button type=\"button\" pButton (click)=\"onClose()\" label=\"{{labelBtn}}\"></button>\n  </p-footer>\n</p-dialog>\n",
                    styles: [".check-icon{color:#0c6b0d!important}"]
                }] }
    ];
    /** @nocollapse */
    SuccessModalComponent.ctorParameters = function () { return []; };
    SuccessModalComponent.propDecorators = {
        displaySuccess: [{ type: Input }],
        title: [{ type: Input }],
        titleCheck: [{ type: Input }],
        text: [{ type: Input }],
        facultativeText: [{ type: Input }],
        labelBtn: [{ type: Input }],
        textBold: [{ type: Input }],
        displaySuccessChange: [{ type: Output }]
    };
    return SuccessModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/success-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SuccessModalModule = /** @class */ (function () {
    function SuccessModalModule() {
    }
    SuccessModalModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SuccessModalComponent],
                    imports: [CommonModule,
                        DialogModule,
                        ButtonModule,
                        SharedModule],
                    exports: [SuccessModalComponent]
                },] }
    ];
    return SuccessModalModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/confirm-modal/confirm-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfirmModalComponent = /** @class */ (function () {
    function ConfirmModalComponent() {
        this.classIcon = 'fa fa-check-square-o';
        this.displayChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ConfirmModalComponent.prototype.onClose = /**
     * @return {?}
     */
    function () {
        this.displayChange.emit(false);
    };
    /**
     * @return {?}
     */
    ConfirmModalComponent.prototype.onSubmit = /**
     * @return {?}
     */
    function () {
        this.displayChange.emit(true);
    };
    /**
     * @return {?}
     */
    ConfirmModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.displayChange.unsubscribe();
    };
    ConfirmModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-confirm-modal',
                    template: "<p-dialog\n  [(visible)]=\"display\"\n  [modal]=\"true\"\n  [closable]=\"false\"\n  [responsive]=\"true\"\n  (onAfterHide)=\"onClose()\"\n  [style]=\"{width: '60rem', minWidth: '28rem'}\" [minY]=\"70\"\n  [baseZIndex]=\"10000\">\n  <p-header>\n    {{ title }}\n  </p-header>\n  <div class=\"msgBox info\">\n    <span class=\"{{classIcon}} check-icon\"></span>\n    <p>{{titleIcon}}</p>\n  </div>\n  <p *ngIf=\"warning\" class=\"warning\">{{warning | trim}}</p>\n  <p class=\"bold\">{{textBold | trim}}</p>\n  <p>{{text | trim}}</p>\n  \n  <p-footer>\n    <button\n      type=\"button\"\n      class=\"button-with-neighbour ui-button-secondary\"\n      pButton\n      (click)=\"onClose()\"\n      label=\"{{closeBtn}}\"\n      >\n    </button>\n    <button\n      type=\"button\"\n      pButton\n      (click)=\"onSubmit()\"\n      label=\"{{confirmBtn}}\"\n      class=\"ui-button-primary\"\n      >\n    </button>\n  </p-footer>\n</p-dialog>\n",
                    styles: [".fa-check-square-o.check-icon{color:#0c6b0d!important}.warning{color:orange;background-color:#fbe5d6;text-align:start;padding:10px;margin-bottom:20px}"]
                }] }
    ];
    /** @nocollapse */
    ConfirmModalComponent.ctorParameters = function () { return []; };
    ConfirmModalComponent.propDecorators = {
        display: [{ type: Input }],
        title: [{ type: Input }],
        classIcon: [{ type: Input }],
        titleIcon: [{ type: Input }],
        textBold: [{ type: Input }],
        text: [{ type: Input }],
        warning: [{ type: Input }],
        closeBtn: [{ type: Input }],
        confirmBtn: [{ type: Input }],
        confirmBtnClass: [{ type: Input }],
        closeBtnClass: [{ type: Input }],
        displayChange: [{ type: Output }]
    };
    return ConfirmModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/confirm-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfirmModalModule = /** @class */ (function () {
    function ConfirmModalModule() {
    }
    ConfirmModalModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ConfirmModalComponent],
                    imports: [CommonModule,
                        DialogModule,
                        ButtonModule,
                        SharedModule],
                    exports: [ConfirmModalComponent]
                },] }
    ];
    return ConfirmModalModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/information-modal/information-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InformationModalComponent = /** @class */ (function () {
    function InformationModalComponent() {
        this.hideIconBloc = false;
        this.displayInfoChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InformationModalComponent.prototype.onClose = /**
     * @return {?}
     */
    function () {
        this.displayInfoChange.emit(false);
    };
    /**
     * @return {?}
     */
    InformationModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.displayInfoChange.unsubscribe();
    };
    InformationModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-information-modal',
                    template: "<p-dialog\n  appendTo=\"body\"\n  [(visible)]=\"displayInfo\"\n  [modal]=\"true\"\n  [closable]=\"false\"\n  [responsive]=\"true\"\n  (onAfterHide)=\"onClose()\"\n  [style]=\"{width: '60rem', minWidth: '28rem'}\" [minY]=\"70\"\n  [baseZIndex]=\"10000\">\n  <p-header>\n    {{ title }}\n\n  </p-header>\n  <div class=\"msgBox info\" *ngIf=\"!hideIconBloc\">\n    <span class=\"fa fa-info-circle\"></span>\n    <p class=\"bold\">{{titleCheck}}</p>\n  </div>\n  <p class=\"bold\" *ngIf=\"textBold\">{{textBold | trim}}.</p>\n  <p>{{text | trim}}.</p>\n  <p *ngIf=\"facultativeText\">{{facultativeText}}</p>\n  <p-footer>\n    <button type=\"button\" pButton (click)=\"onClose()\"  label=\"{{labelBtn}}\"></button>\n  </p-footer>\n</p-dialog>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    InformationModalComponent.ctorParameters = function () { return []; };
    InformationModalComponent.propDecorators = {
        displayInfo: [{ type: Input }],
        title: [{ type: Input }],
        titleCheck: [{ type: Input }],
        text: [{ type: Input }],
        facultativeText: [{ type: Input }],
        labelBtn: [{ type: Input }],
        textBold: [{ type: Input }],
        hideIconBloc: [{ type: Input }],
        displayInfoChange: [{ type: Output }]
    };
    return InformationModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/information-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InformationModalModule = /** @class */ (function () {
    function InformationModalModule() {
    }
    InformationModalModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InformationModalComponent],
                    imports: [CommonModule,
                        DialogModule,
                        ButtonModule,
                        SharedModule],
                    exports: [InformationModalComponent]
                },] }
    ];
    return InformationModalModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/generic-modal/generic-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GenericModalComponent = /** @class */ (function () {
    function GenericModalComponent() {
        this.modalWidth = 60;
        this.displayGenericModalChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GenericModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.width = this.modalWidth + 'rem';
    };
    /**
     * @return {?}
     */
    GenericModalComponent.prototype.onClose = /**
     * @return {?}
     */
    function () {
        this.displayGenericModalChange.emit(false);
    };
    /**
     * @return {?}
     */
    GenericModalComponent.prototype.onSubmit = /**
     * @return {?}
     */
    function () {
        this.displayGenericModalChange.emit(true);
    };
    /**
     * @return {?}
     */
    GenericModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.displayGenericModalChange.unsubscribe();
    };
    GenericModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-generic-modal',
                    template: "<p-dialog\n    [class]=\"modalClass\"\n    [(visible)]=\"displayGenericModal\"\n    [modal]=\"true\"\n    [closable]=\"false\"\n    [responsive]=\"true\"\n    (onAfterHide)=\"onClose()\"\n    [style]=\"{width: width, minWidth: '28rem'}\"\n    [minY]=\"70\">\n    <p-header>\n        {{ title }}\n    </p-header>\n    <ng-content></ng-content>\n    <p-footer>\n        <button\n            *ngIf=\"!hideCloseBtn\"\n            type=\"button\"\n            class=\" button-with-neighbour\"\n            pButton\n            (click)=\"onClose()\"\n            label=\"{{closeBtn}}\"\n            [ngClass]=\"closeBtnClass ? closeBtnClass:'ui-button-secondary'\"\n        >\n        </button>\n        <button\n            *ngIf=\"!hideConfirmBtn\"\n            type=\"button\"\n            pButton\n            (click)=\"onSubmit()\"\n            label=\"{{confirmBtn}}\"\n            [ngClass]=\"confirmBtnClass ? confirmBtnClass:'ui-button-primary'\"\n            [disabled]=\"disableConfirmBtn\"\n            >\n        </button>\n    </p-footer>\n</p-dialog>\n",
                    styles: [""]
                }] }
    ];
    GenericModalComponent.propDecorators = {
        displayGenericModal: [{ type: Input }],
        title: [{ type: Input }],
        hideCloseBtn: [{ type: Input }],
        hideConfirmBtn: [{ type: Input }],
        closeBtn: [{ type: Input }],
        confirmBtn: [{ type: Input }],
        modalClass: [{ type: Input }],
        confirmBtnClass: [{ type: Input }],
        closeBtnClass: [{ type: Input }],
        disableConfirmBtn: [{ type: Input }],
        modalWidth: [{ type: Input }],
        displayGenericModalChange: [{ type: Output }]
    };
    return GenericModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/generic-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GenericModalModule = /** @class */ (function () {
    function GenericModalModule() {
    }
    GenericModalModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [GenericModalComponent],
                    imports: [CommonModule,
                        DialogModule,
                        ButtonModule,
                        SharedModule],
                    exports: [GenericModalComponent]
                },] }
    ];
    return GenericModalModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal-radio/modal-radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ModalRadioComponent = /** @class */ (function () {
    function ModalRadioComponent() {
        this.selectionChanged = new EventEmitter();
        this.selectionClosed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ModalRadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.selectedIndex = this.preSelectedIndex;
    };
    /**
     * @return {?}
     */
    ModalRadioComponent.prototype.onClose = /**
     * @return {?}
     */
    function () {
        this.selectedIndex = this.preSelectedIndex;
        this.selectionClosed.emit(false);
    };
    /**
     * @return {?}
     */
    ModalRadioComponent.prototype.onSubmit = /**
     * @return {?}
     */
    function () {
        this.selectionChanged.emit(this.selectedIndex);
    };
    /**
     * @return {?}
     */
    ModalRadioComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.selectionChanged.unsubscribe();
        this.selectionClosed.unsubscribe();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    ModalRadioComponent.prototype.setSelected = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.selectedIndex = i;
    };
    ModalRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-modal-radio',
                    template: "<p-dialog\n\t[class]=\"'modal-radio ' + modalClass\"\n\t[(visible)]=\"displayModalRadio\"\n\t[modal]=\"true\"\n\t[blockScroll]=\"true\"\n\t[closable]=\"false\"\n\t(onAfterHide)=\"onClose()\"\n\t[style]=\"{width: '60rem', minWidth: '28rem'}\"\n\t[minY]=\"70\"\n\t[baseZIndex]=\"10000\">\n\t<p-header>\n\t\t<div class=\"title\">\n\t\t\t{{ title }}\n\t\t</div>\n\t\t<div class=\"closer\" (click)=\"onClose()\"></div>\n\t</p-header>\n\t<div>\n\t\t<div *ngIf=\"topContentText\">\n\t\t\t{{ topContentText }}\n\t\t</div>\n\t\t<p-message *ngIf=\"warningMessage\" severity=\"warn\" text={{warningMessage}}></p-message>\n\t</div>\n\t<div class=\"p-grid p-justify-center list-bloc\">\n\t\t<div class=\"p-col-12\"\n\t\t\t*ngFor=\"let elem of radioList ; let index = index;\">\n\t\t\t<div class=\"p-grid p-align-center\">\n\t\t\t\t<div class=\"p-col-1\">\n\t\t\t\t\t<p-radioButton name=\"modalRadio\" [value]=\"index\" [(ngModel)]=\"selectedIndex\"></p-radioButton>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"p-col-11 label\" (click)=\"setSelected(index)\">\n\t\t\t\t\t<ng-container *ngFor=\"let item of radioLabels\">\n\t\t\t\t\t\t<p *ngIf=\"elem[item.key]\">\n\t\t\t\t\t\t\t<strong>{{item.label}} : </strong> {{elem[item.key]}}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<p-footer>\n\t\t<button *ngIf=\"!hideCloseBtn\" type=\"button\" class=\" button-with-neighbour\" pButton (click)=\"onClose()\"\n\t\t\tlabel=\"{{closeBtn}}\" [ngClass]=\"closeBtnClass ? closeBtnClass:'ui-button-secondary'\">\n\t\t</button>\n\t\t<button *ngIf=\"!hideConfirmBtn\" type=\"button\" pButton (click)=\"onSubmit()\" label=\"{{confirmBtn}}\"\n\t\t\tclass=\"ui-button-primary\" [disabled]=\"selectedIndex == preSelectedIndex\">\n\t\t</button>\n\t</p-footer>\n</p-dialog>\n",
                    styles: [""]
                }] }
    ];
    ModalRadioComponent.propDecorators = {
        displayModalRadio: [{ type: Input }],
        title: [{ type: Input }],
        topContentText: [{ type: Input }],
        warningMessage: [{ type: Input }],
        hideCloseBtn: [{ type: Input }],
        hideConfirmBtn: [{ type: Input }],
        closeBtn: [{ type: Input }],
        confirmBtn: [{ type: Input }],
        modalClass: [{ type: Input }],
        confirmBtnClass: [{ type: Input }],
        closeBtnClass: [{ type: Input }],
        preSelectedIndex: [{ type: Input }],
        radioList: [{ type: Input }],
        radioLabels: [{ type: Input }],
        selectionChanged: [{ type: Output }],
        selectionClosed: [{ type: Output }]
    };
    return ModalRadioComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/modal-radio.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ModalRadioModule = /** @class */ (function () {
    function ModalRadioModule() {
    }
    ModalRadioModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ModalRadioComponent],
                    imports: [
                        CommonModule,
                        DialogModule,
                        ButtonModule,
                        MessageModule,
                        FormsModule,
                        RadioButtonModule,
                        SharedModule
                    ],
                    exports: [ModalRadioComponent]
                },] }
    ];
    return ModalRadioModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/models/date-error-message.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date/input-date.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputDateComponent = /** @class */ (function () {
    function InputDateComponent() {
        this.notifier = new Subject();
        this.unknownMonthItem = { label: 'Inconnu', value: 'i' };
        this.required = false;
        this.readonly = false;
        this.defaultDisplay = 'N/A';
        this.dayLabel = 'Jour';
        this.dayPlaceholder = 'JJ';
        this.monthLabel = 'Mois';
        this.monthPlaceholder = 'MM';
        this.yearLabel = 'Année';
        this.yearPlaceholder = 'AAAA';
        this.monthOptions = [
            { label: 'Janvier', value: 1 },
            { label: 'Février', value: 2 },
            { label: 'Mars', value: 3 },
            { label: 'Avril', value: 4 },
            { label: 'Mai', value: 5 },
            { label: 'Juin', value: 6 },
            { label: 'Juillet', value: 7 },
            { label: 'Août', value: 8 },
            { label: 'Septembre', value: 9 },
            { label: 'Octobre', value: 10 },
            { label: 'Novembre', value: 11 },
            { label: 'Décembre', value: 12 }
        ];
        this.messages = {
            day: {
                required: 'Le jour est requis',
                pattern: 'Le jour doit être un nombre',
                length: 'Le jour doit contenir 2 chiffres au maximum',
                minMax: 'Le jour doit être compris entre 1 et 31'
            },
            month: {
                required: 'Le mois est requis'
            },
            year: {
                required: 'L\'année est requise',
                pattern: 'L\'année doit être un nombre',
                length: 'L\'année doit contenir 4 chiffres'
            },
            invalid: 'La date est invalide'
        };
    }
    /**
     * @return {?}
     */
    InputDateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dayChanges = this.formGroup.get(this.dayName).valueChanges;
        /** @type {?} */
        var monthChanges = this.formGroup.get(this.monthName).valueChanges;
        /** @type {?} */
        var yearChanges = this.formGroup.get(this.yearName).valueChanges;
        this.dateChanges = merge(dayChanges, monthChanges, yearChanges);
        this.dateValidityChange();
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.notifier.next();
        this.notifier.unsubscribe();
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.formContainsErrors = /**
     * @return {?}
     */
    function () {
        return (this.controlContainsErrors(this.dayName) ||
            this.controlContainsErrors(this.monthName) ||
            this.controlContainsErrors(this.yearName));
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.controlContainsErrors = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.formGroup && (this.formGroup.controls[controlName].errors !== null && this.formGroup.controls[controlName].dirty);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasPatternError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.pattern;
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasMinMaxError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.min || this.formGroup.controls[controlName].errors.max);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasLengthError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.minlength || this.formGroup.controls[controlName].errors.maxlength);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasRequiredError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.required;
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasInvalidDateError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.invalidDate;
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.dateValidityChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dateChanges.pipe(debounceTime(200), takeUntil(this.notifier)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.resetErrors();
            /** @type {?} */
            var day = Number(_this.formGroup.get(_this.dayName).value);
            /** @type {?} */
            var month = _this.formGroup.get(_this.monthName).value - 1;
            /** @type {?} */
            var year = Number(_this.formGroup.get(_this.yearName).value);
            _this.checkDateValidity(day, month, year);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    InputDateComponent.prototype.getFields = /**
     * @private
     * @return {?}
     */
    function () {
        return { day: this.formGroup.get(this.dayName).value, month: this.getMonthValue(true), year: this.formGroup.get(this.yearName).value };
    };
    /*** Returns FormGroup month field value */
    /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    InputDateComponent.prototype.getMonthValue = /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    function (correctForMoment) {
        /** @type {?} */
        var value = this.formGroup.get(this.monthName).value;
        if (value === this.unknownMonthItem.value) {
            value = 1;
        }
        if (correctForMoment) {
            return value - 1;
        }
        return value;
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.areFieldsFilled = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fields = this.getFields();
        return fields.day != null && fields.month != -1 && fields.year != null;
    };
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    InputDateComponent.prototype.checkDateValidity = /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (day, month, year) {
        /** @type {?} */
        var fields = this.getFields();
        if (this.areFieldsFilled() && !moment([year, month, day]).isValid()) {
            this.formGroup.get(this.yearName).setErrors({ invalidDate: true }, { emitEvent: true });
            this.formGroup.get(this.monthName).setErrors({ invalidDate: true }, { emitEvent: true });
            this.formGroup.get(this.dayName).setErrors({ invalidDate: true }, { emitEvent: true });
            this.formGroup.setErrors({ invalidDate: true }, { emitEvent: true });
            if ((this.required || this.yearRequired) && this.areFieldsFilled()) {
                return { invalidDate: true };
            }
        }
        if (moment([fields.year, fields.month, fields.day]).isValid()) {
            this.formGroup.setErrors(null);
            this.formGroup.get(this.yearName).setErrors(null);
            this.formGroup.get(this.monthName).setErrors(null);
            this.formGroup.get(this.dayName).setErrors(null);
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    InputDateComponent.prototype.resetErrors = /**
     * @private
     * @return {?}
     */
    function () {
        this.formGroup.get(this.dayName).setErrors(null);
        this.formGroup.get(this.monthName).setErrors(null);
        this.formGroup.get(this.yearName).setErrors(null);
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = '';
        /** @type {?} */
        var day = Number(this.formGroup.get(this.dayName).value);
        result += day ? ('0' + day).slice(-2) + '/' : '';
        /** @type {?} */
        var month = Number(this.formGroup.get(this.monthName).value);
        result += month ? ('0' + month).slice(-2) + '/' : '';
        /** @type {?} */
        var year = Number(this.formGroup.get(this.yearName).value);
        result += year;
        return result === '0' ? this.defaultDisplay : result;
    };
    InputDateComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-date',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <fieldset>\n      <legend *ngIf=\"label\">\n        {{ label }} <span class=\"redish\" *ngIf=\"required\">*</span> :\n      </legend>\n\n      <ng-content select=\"[sub-label]\"></ng-content>\n\n      <div *ngIf=\"!readonly; else textual\" class=\"p-grid\">\n        <div class=\"p-col-12 p-md-2\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"dayHelpBlock\">{{ dayLabel }} :\n              </label>\n              <input pInputText [id]=\"dayName\" [name]=\"dayName\" type=\"text\" class=\"day\"\n                     placeholder=\"{{ dayPlaceholder}}\" aria-describedby=\"dayHelpBlock\"\n                     [formControlName]=\"dayName\" pattern=\"[0-9]{0,2}\" maxlength=\"2\">\n            </div>\n          </div>\n        </div>\n        <div class=\"p-col-12 p-md-6\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"monthHelpBlock\">{{ monthLabel }} :\n              </label>\n              <p-dropdown class=\"month-dropdown\" [id]=\"monthName\" [name]=\"monthName\" aria-describedby=\"monthHelpBlock\"\n                          [placeholder]=monthPlaceholder [options]=monthOptions\n                          [formControlName]=\"monthName\">\n              </p-dropdown>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"p-col-12 p-md-4\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"yearHelpBlock\">{{ yearLabel}}\n                <span class=\"redish\" *ngIf=\"yearRequired\"> *</span> :\n              </label>\n              <input pInputText [id]=\"yearName\" [name]=\"yearName\" type=\"text\" placeholder=\"{{ yearPlaceholder }}\"\n                     pattern=\"[0-9]{0,4}\" minlength=\"4\" maxlength=\"4\"\n                     aria-describedby=\"yearHelpBlock\" [formControlName]=\"yearName\">\n            </div>\n          </div>\n        </div>\n      </div>\n      <ng-template #textual>\n        <span class=\"textual\">{{toString()}}</span>\n      </ng-template>\n\n      <ng-content select=\"[complement]\"></ng-content>\n\n      <div class=\"redish errors\" *ngIf=\"formContainsErrors()\">\n        <div *ngIf=\"controlContainsErrors(dayName)\">\n          <div *ngIf=\"hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasMinMaxError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.minMax}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(dayName) && !hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(monthName)\">\n          <div *ngIf=\"hasRequiredError(monthName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.month.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(yearName)\">\n          <div *ngIf=\"hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.required}}\n            </span>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasInvalidDateError(dayName) || hasInvalidDateError(monthName) || hasInvalidDateError(yearName)\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{messages.invalid}}\n          </span>\n        </div>\n\n        <ng-content select=\"[messages]\"></ng-content>\n      </div>\n    </fieldset>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}.day{padding-left:1rem;padding-right:1rem;min-width:4rem}#dayHelpBlock{white-space:nowrap}fieldset{border-color:transparent;border-width:0;padding:0}legend{-webkit-padding-start:0;padding-inline-start:0;padding-bottom:1rem}.p-grid label{margin:0;color:#656565}body .ui-dropdown-panel .ui-dropdown-items .ui-dropdown-item span:first{color:#656565}::-webkit-input-placeholder{color:#111}:-moz-placeholder{color:#111}::-moz-placeholder{color:#111}:-ms-input-placeholder{color:#111}"]
                }] }
    ];
    /** @nocollapse */
    InputDateComponent.ctorParameters = function () { return []; };
    InputDateComponent.propDecorators = {
        formGroup: [{ type: Input }],
        label: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        dayName: [{ type: Input }],
        dayLabel: [{ type: Input }],
        dayPlaceholder: [{ type: Input }],
        monthName: [{ type: Input }],
        monthLabel: [{ type: Input }],
        monthPlaceholder: [{ type: Input }],
        yearName: [{ type: Input }],
        yearRequired: [{ type: Input }],
        yearLabel: [{ type: Input }],
        yearPlaceholder: [{ type: Input }],
        model: [{ type: Input }],
        monthOptions: [{ type: Input }],
        messages: [{ type: Input }]
    };
    return InputDateComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date/input-date.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputDateModule = /** @class */ (function () {
    function InputDateModule() {
    }
    InputDateModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputDateComponent],
                    imports: [CommonModule, FormsModule, ReactiveFormsModule, InputTextModule, DropdownModule],
                    exports: [InputDateComponent]
                },] }
    ];
    return InputDateModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date-approx/input-date-approx.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputDateApproxComponent = /** @class */ (function () {
    function InputDateApproxComponent() {
        var _this = this;
        this.notifier = new Subject();
        this.unknownMonthItem = { label: 'Inconnu', value: 'i' };
        this.isDateApprox = false;
        /**
         * Is FormGroup required
         */
        this.required = true;
        /**
         * Is FormGroup readonly
         */
        this.readonly = false;
        /**
         * Default date value displayed in readonly mode
         * \@default 'N/A'
         */
        this.defaultDisplay = 'N/A';
        /**
         * FormGroup day control label
         * \@default 'Jour'
         */
        this.dayLabel = 'Jour';
        /**
         * FormGroup day control placeholder
         * \@default 'JJ'
         */
        this.dayPlaceholder = 'JJ';
        /**
         * FormGroup month control label
         * \@default 'Mois'
         */
        this.monthLabel = 'Mois';
        /**
         * FormGroup day control placeholder
         * \@default 'MM'
         */
        this.monthPlaceholder = 'MM';
        /**
         * FormGroup year control label
         * \@default 'Année'
         */
        this.yearLabel = 'Année';
        /**
         * FormGroup year control placeholder
         * \@default 'AAAA'
         */
        this.yearPlaceholder = 'AAAA';
        /**
         * FormGroup month control dropdown options
         * \@default SelectItem[] = [
         * { label: 'Janvier', value: 1 },
         * { label: 'Février', value: 2 },
         * { label: 'Mars', value: 3 },
         * { label: 'Avril', value: 4 },
         * { label: 'Mai', value: 5 },
         * { label: 'Juin', value: 6 },
         * { label: 'Juillet', value: 7 },
         * { label: 'Août', value: 8 },
         * { label: 'Septembre', value: 9 },
         * { label: 'Octobre', value: 10 },
         * { label: 'Novembre', value: 11 },
         * { label: 'Décembre', value: 12 }
         * ]
         */
        this.monthOptions = [
            { label: 'Janvier', value: 1 },
            { label: 'Février', value: 2 },
            { label: 'Mars', value: 3 },
            { label: 'Avril', value: 4 },
            { label: 'Mai', value: 5 },
            { label: 'Juin', value: 6 },
            { label: 'Juillet', value: 7 },
            { label: 'Août', value: 8 },
            { label: 'Septembre', value: 9 },
            { label: 'Octobre', value: 10 },
            { label: 'Novembre', value: 11 },
            { label: 'Décembre', value: 12 }
        ];
        /**
         * FormGroup validation error messages
         * \@default DateErrorMessage = {
         *     day: {
         *       required: 'Le jour est requis',
         *       pattern: 'Le jour doit être un nombre',
         *       length: 'Le jour doit contenir 2 chiffres au maximum',
         *       minMax: 'Le jour doit être compris entre 1 et 31'
         *     },
         *     month: {
         *       required: 'Le mois est requis'
         *     },
         *     year: {
         *       required: 'L\'année est requise',
         *       pattern: 'L\'année doit être un nombre',
         *       length: 'L\'année doit contenir 4 chiffres'
         *     },
         *     invalid: 'La date est invalide',
         *     required: 'Ce champ est obligatoire.'
         *   }
         */
        this.messages = {
            day: {
                required: 'Le jour est requis',
                pattern: 'Le jour doit être un nombre',
                length: 'Le jour doit contenir 2 chiffres au maximum',
                minMax: 'Le jour doit être compris entre 1 et 31'
            },
            month: {
                required: 'Le mois est requis'
            },
            year: {
                required: 'L\'année est requise',
                pattern: 'L\'année doit être un nombre',
                length: 'L\'année doit contenir 4 chiffres'
            },
            invalid: 'La date est invalide',
            required: 'Ce champ est obligatoire.'
        };
        /**
         * Can the date be approximative or not
         * \@default false
         * \@usage [canBeApproximative]="true"
         */
        this.canBeApproximative = false;
        /**
         * FormGroup approximative date label
         * \@default 'Approximative'
         */
        this.dateApproxLabel = 'Approximative';
        /**
         * Approximative date format
         * \@values {known: 'FF/FF/FFFF', dayUnknown: '00/FF/FFFF', dayMonthUnknown: '00/00/FFFF'}
         */
        this.dateApproxMasks = { known: 'FF/FF/FFFF', dayUnknown: '00/FF/FFFF', dayMonthUnknown: '00/00/FFFF' };
        this.crossFieldsMinDateValidator = (/**
         * @param {?} fg
         * @return {?}
         */
        function (fg) {
            /** @type {?} */
            var fields = _this.getFields();
            if (moment([fields.year, fields.month, fields.day]).isValid() && !_this.formContainsErrors()) {
                if (moment([fields.year, fields.month, fields.day]) < moment(_this.minDate, 'DD/MM/YYYY')) {
                    return { tooOld: true };
                }
            }
            return null;
        });
        this.crossFieldsMaxDateValidator = (/**
         * @param {?} fg
         * @return {?}
         */
        function (fg) {
            /** @type {?} */
            var fields = _this.getFields();
            if (moment([fields.year, fields.month, fields.day]).isValid() && !_this.formContainsErrors()) {
                /** @type {?} */
                var date = moment([fields.year, fields.month, fields.day]);
                if (_this.maxDate === 'now' && date > moment() || date > moment(_this.maxDate, 'DD/MM/YYYY')) {
                    return { tooFuture: true };
                }
            }
            return null;
        });
        this.crossFieldsDateValidator = (/**
         * @param {?} fg
         * @return {?}
         */
        function (fg) {
            /** @type {?} */
            var fields = _this.getFields();
            if (!moment([fields.year, fields.month, fields.day]).isValid()) {
                if (_this.areFieldsFilled()) {
                    _this.formGroup.get(_this.yearName).setErrors({ invalidDate: true }, { emitEvent: true });
                    _this.formGroup.get(_this.monthName).setErrors({ invalidDate: true }, { emitEvent: true });
                    _this.formGroup.get(_this.dayName).setErrors({ invalidDate: true }, { emitEvent: true });
                }
                _this.formGroup.setErrors({ invalidDate: true });
                if ((_this.required || _this.yearRequired) && _this.areFieldsFilled()) {
                    return { invalidDate: true };
                }
            }
            if (moment([fields.year, fields.month, fields.day]).isValid()) {
                _this.formGroup.setErrors(null);
                _this.formGroup.get(_this.yearName).setErrors(null);
                _this.formGroup.get(_this.monthName).setErrors(null);
                _this.formGroup.get(_this.dayName).setErrors(null);
            }
            return null;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    InputDateApproxComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['readonly'] && changes['readonly'].previousValue != changes['readonly'].currentValue) {
            this.setCheckboxStyle(changes['readonly'].currentValue);
            if (this.formGroup.get(this.dateApproxMaskName) && this.formGroup.get(this.dateApproxMaskName).value === this.dateApproxMasks.dayMonthUnknown) {
                this.editMonthOptions(true);
            }
        }
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.readonly) {
            this.addDayControlMinMaxValidator();
            this.addFormGroupValidators();
        }
        if (this.canBeApproximative && this.formGroup.get(this.dateApproxCheckboxName)) {
            this.dateApproxCheckboxChange();
            this.monthOptionChange();
        }
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.addDayControlMinMaxValidator = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validatorsArray = [];
        validatorsArray.push(Validators.min(1), Validators.max(31));
        if (this.formGroup.get(this.dayName).validator) {
            validatorsArray.push(this.formGroup.get(this.dayName).validator);
        }
        this.formGroup.get(this.dayName).setValidators(validatorsArray);
        this.formGroup.get(this.dayName).updateValueAndValidity();
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.addFormGroupValidators = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validatorsArray = [];
        validatorsArray.push(this.crossFieldsDateValidator);
        if (this.minDate && this.minDateErrorMessage) {
            validatorsArray.push(this.crossFieldsMinDateValidator);
        }
        if (this.maxDate && this.maxDateErrorMessage) {
            validatorsArray.push(this.crossFieldsMaxDateValidator);
        }
        if (this.formGroup.validator) {
            validatorsArray.push(this.formGroup.validator);
        }
        this.formGroup.setValidators(validatorsArray);
        this.formGroup.updateValueAndValidity();
    };
    /**
     * @private
     * @return {?}
     */
    InputDateApproxComponent.prototype.getFields = /**
     * @private
     * @return {?}
     */
    function () {
        return { day: this.formGroup.get(this.dayName).value, month: this.getMonthValue(true), year: this.formGroup.get(this.yearName).value };
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.areFieldsEmpty = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fields = this.getFields();
        return !fields.day && !fields.month && !fields.year;
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.areFieldsFilled = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fields = this.getFields();
        return fields.day != null && fields.month > -1 && fields.year != null;
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.areFieldsTouched = /**
     * @return {?}
     */
    function () {
        return this.formGroup.get(this.yearName).touched && this.formGroup.get(this.yearName).touched && this.formGroup.get(this.yearName).touched;
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.notifier.next();
        this.notifier.unsubscribe();
    };
    /** Returns true if form is invalid */
    /**
     * Returns true if form is invalid
     * @return {?}
     */
    InputDateApproxComponent.prototype.formContainsErrors = /**
     * Returns true if form is invalid
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var controlNames = [this.dayName, this.monthName, this.yearName];
        return controlNames.some((/**
         * @param {?} controlName
         * @return {?}
         */
        function (controlName) {
            return _this.controlContainsErrors(controlName);
        }));
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.formError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.touched && this.formGroup.errors !== null;
    };
    /** Returns true if a control is invalid */
    /**
     * Returns true if a control is invalid
     * @param {?} controlName
     * @return {?}
     */
    InputDateApproxComponent.prototype.controlContainsErrors = /**
     * Returns true if a control is invalid
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.formGroup && (this.formGroup.controls[controlName].errors !== null && (this.formGroup.controls[controlName].dirty || this.formGroup.controls[controlName].touched));
    };
    /** Returns true if control value has pattern errors */
    /**
     * Returns true if control value has pattern errors
     * @param {?} controlName
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasPatternError = /**
     * Returns true if control value has pattern errors
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.pattern;
    };
    /** Returns true if control value is inferior to control min value or superior to control max value */
    /**
     * Returns true if control value is inferior to control min value or superior to control max value
     * @param {?} controlName
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasMinMaxError = /**
     * Returns true if control value is inferior to control min value or superior to control max value
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.min || this.formGroup.controls[controlName].errors.max);
    };
    /** Returns true if control value length is inferior to control min value length or superior to control max value length */
    /**
     * Returns true if control value length is inferior to control min value length or superior to control max value length
     * @param {?} controlName
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasLengthError = /**
     * Returns true if control value length is inferior to control min value length or superior to control max value length
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.minlength || this.formGroup.controls[controlName].errors.maxlength);
    };
    /** Returns true if control is required but not filled */
    /**
     * Returns true if control is required but not filled
     * @param {?} controlName
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasRequiredError = /**
     * Returns true if control is required but not filled
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.required;
    };
    /** Returns true if control is not a valid date */
    /**
     * Returns true if control is not a valid date
     * @param {?} controlName
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasInvalidDateError = /**
     * Returns true if control is not a valid date
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.invalidDate;
    };
    /** Returns true if form does not have a valid date */
    /**
     * Returns true if form does not have a valid date
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasFormGroupInvalidateError = /**
     * Returns true if form does not have a valid date
     * @return {?}
     */
    function () {
        return this.formGroup.errors && this.formGroup.errors.invalidDate;
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasFutureDateError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.errors && this.formGroup.errors.tooFuture;
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.hasTooOldDateError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.errors && this.formGroup.errors.tooOld;
    };
    /**
     * @return {?}
     */
    InputDateApproxComponent.prototype.isAllFieldsFilled = /**
     * @return {?}
     */
    function () {
        return this.hasRequiredError(this.yearName)
            && this.hasRequiredError(this.monthName)
            && this.hasRequiredError(this.dayName);
    };
    /*** Returns FormGroup month field value */
    /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    InputDateApproxComponent.prototype.getMonthValue = /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    function (correctForMoment) {
        /** @type {?} */
        var value = this.formGroup.get(this.monthName).value;
        if (value === this.unknownMonthItem.value) {
            value = 1;
        }
        if (correctForMoment) {
            return value - 1;
        }
        return value;
    };
    /** Format date to string for display */
    /**
     * Format date to string for display
     * @return {?}
     */
    InputDateApproxComponent.prototype.toString = /**
     * Format date to string for display
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dateString;
        /** @type {?} */
        var day = this.formGroup.get(this.dayName).value;
        /** @type {?} */
        var month = this.formGroup.get(this.monthName).value;
        /** @type {?} */
        var year = this.formGroup.get(this.yearName).value;
        /** @type {?} */
        var nonApproxAndEmpty = !this.isDateApprox && !day && !month && !year;
        /** @type {?} */
        var approxAndEmpty = this.isDateApprox && !month && !year;
        if (nonApproxAndEmpty || approxAndEmpty) {
            dateString = this.defaultDisplay;
        }
        else {
            moment.updateLocale(moment.locale(), { invalidDate: this.defaultDisplay });
            dateString = moment([Number(year), Number(this.getMonthValue(true)), Number(day)]).format('DD/MM/YYYY');
            if (!nonApproxAndEmpty && !this.isDateApprox) {
                return dateString;
            }
            else if (!approxAndEmpty && this.isDateApprox) {
                /** @type {?} */
                var mask = this.formGroup.get(this.dateApproxMaskName).value;
                /** @type {?} */
                var dateStringArray = dateString.split('/');
                if (mask === this.dateApproxMasks.dayUnknown) {
                    dateStringArray[0] = '-';
                }
                else if (mask === this.dateApproxMasks.dayMonthUnknown) {
                    dateStringArray[0] = '-';
                    dateStringArray[1] = '-';
                }
                dateString = dateStringArray.join('/');
            }
        }
        return dateString;
    };
    /** Triggers date approx editing functions following date approx checkbox values */
    /**
     * Triggers date approx editing functions following date approx checkbox values
     * @private
     * @return {?}
     */
    InputDateApproxComponent.prototype.dateApproxCheckboxChange = /**
     * Triggers date approx editing functions following date approx checkbox values
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.formGroup.get(this.dateApproxCheckboxName).valueChanges
            .pipe(startWith(this.formGroup.get(this.dateApproxCheckboxName).value), distinctUntilChanged(), takeUntil(this.notifier))
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.isDateApprox = value;
            _this.setDayValue(value);
            _this.editMonthOptions(value);
            _this.setDateApproxMask(value);
        }));
    };
    /** Triggers SetDateApproxMAsk on monthOptions change */
    /**
     * Triggers SetDateApproxMAsk on monthOptions change
     * @private
     * @return {?}
     */
    InputDateApproxComponent.prototype.monthOptionChange = /**
     * Triggers SetDateApproxMAsk on monthOptions change
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.formGroup.get(this.monthName).valueChanges
            .pipe(startWith(this.formGroup.get(this.monthName).value), distinctUntilChanged(), takeUntil(this.notifier))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.setDateApproxMask(_this.isDateApprox);
            _this.formGroup.updateValueAndValidity();
        }));
    };
    /** Sets day value to 1 if date is approximative */
    /**
     * Sets day value to 1 if date is approximative
     * @private
     * @param {?} value
     * @return {?}
     */
    InputDateApproxComponent.prototype.setDayValue = /**
     * Sets day value to 1 if date is approximative
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.formGroup.get(this.dayName).setValue('1');
        }
        else {
            if (this.formGroup.get(this.dateApproxCheckboxName).dirty) {
                this.formGroup.get(this.dayName).reset();
            }
        }
    };
    /** Adds or remove 'Inconnu' month option */
    /**
     * Adds or remove 'Inconnu' month option
     * @private
     * @param {?} value
     * @return {?}
     */
    InputDateApproxComponent.prototype.editMonthOptions = /**
     * Adds or remove 'Inconnu' month option
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var hasUnknownMonthItem = this.monthOptions.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.value === _this.unknownMonthItem.value; }));
        if (value) {
            if (!hasUnknownMonthItem) {
                this.monthOptions.unshift(this.unknownMonthItem);
            }
            if (this.formGroup.get(this.dateApproxMaskName).value === this.dateApproxMasks.dayMonthUnknown) {
                this.formGroup.get(this.monthName).setValue(this.unknownMonthItem.value);
            }
        }
        else {
            if (hasUnknownMonthItem) {
                this.monthOptions.shift();
            }
            if (this.formGroup.get(this.monthName).value === this.unknownMonthItem.value) {
                this.formGroup.get(this.monthName).reset();
            }
        }
    };
    /** Sets date approx mask  */
    /**
     * Sets date approx mask
     * @private
     * @param {?} value
     * @return {?}
     */
    InputDateApproxComponent.prototype.setDateApproxMask = /**
     * Sets date approx mask
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var dateApproxMaskName = this.formGroup.get(this.dateApproxMaskName);
        if (value) {
            if (this.formGroup.get(this.monthName).value === this.unknownMonthItem.value) {
                dateApproxMaskName.setValue(this.dateApproxMasks.dayMonthUnknown);
            }
            else {
                dateApproxMaskName.setValue(this.dateApproxMasks.dayUnknown);
            }
        }
        else {
            dateApproxMaskName.setValue(this.dateApproxMasks.known);
        }
    };
    /** Set approx checkbox style in readonly mode */
    /**
     * Set approx checkbox style in readonly mode
     * @private
     * @param {?} isReadOnly
     * @return {?}
     */
    InputDateApproxComponent.prototype.setCheckboxStyle = /**
     * Set approx checkbox style in readonly mode
     * @private
     * @param {?} isReadOnly
     * @return {?}
     */
    function (isReadOnly) {
        if (this.canBeApproximative && this.formGroup.get(this.dateApproxCheckboxName)) {
            if (isReadOnly) {
                this.formGroup.get(this.dateApproxCheckboxName).disable();
            }
            else {
                this.formGroup.get(this.dateApproxCheckboxName).enable();
            }
        }
    };
    InputDateApproxComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-date-approx',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <fieldset>\n      <div class=\"p-grid nogutter\" *ngIf=\"canBeApproximative; else dateCannotBeApproximative\">\n        <div class=\"p-col-8\">\n          <legend *ngIf=\"label\">\n            {{ label }} <span class=\"redish\" *ngIf=\"required\">*</span> :\n          </legend>\n        </div>\n        <div class=\"p-col-4\">\n          <p-checkbox\n                [name]=\"dateApproxCheckboxName\"\n                value=\"true\"\n                binary=\"true\"\n                [label]=\"dateApproxLabel\"\n                [formControlName]=\"dateApproxCheckboxName\"\n                checkboxIcon=\"pi pi-check\"\n                >\n          </p-checkbox>\n\n        </div>\n      </div>\n      <ng-template #dateCannotBeApproximative>\n        <legend *ngIf=\"label\">\n          {{ label }} <span class=\"redish\" *ngIf=\"required\">*</span> :\n        </legend>\n      </ng-template>\n\n      <ng-content select=\"[sub-label]\"></ng-content>\n      <input *ngIf=\"isDateApprox\" pInputText type=\"hidden\" [id]=\"dateApproxMaskName\" [name]=\"dateApproxMaskName\" [formControlName]=\"dateApproxMaskName\">\n\n      <div *ngIf=\"!readonly; else textual\" class=\"p-grid\">\n        <div class=\"p-col-12 p-md-2\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"dayHelpBlock\">{{ dayLabel }} :\n              </label>\n              <input pInputText [id]=\"dayName\" [name]=\"dayName\" type=\"text\" class=\"day\"\n                     placeholder=\"{{dayPlaceholder}}\" aria-describedby=\"dayHelpBlock\" [hidden]=\"isDateApprox\"\n                     [formControlName]=\"dayName\" pattern=\"[0-9]{0,2}\" min=\"1\" max=\"31\" maxlength=\"2\">\n\n              <input *ngIf=\"isDateApprox\" pInputText id=\"dayApproxName\" name=\"dayApproxName\" type=\"text\" class=\"day\"\n              placeholder=\" \" aria-describedby=\"dayHelpBlock\" disabled=\"true\">\n            </div>\n          </div>\n        </div>\n        <div class=\"p-col-12 p-md-6\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"monthHelpBlock\">{{ monthLabel }} :\n              </label>\n              <p-dropdown class=\"month-dropdown\" [id]=\"monthName\" [name]=\"monthName\" aria-describedby=\"monthHelpBlock\"\n                          [placeholder]=monthPlaceholder [options]=monthOptions\n                          [formControlName]=\"monthName\" >\n              </p-dropdown>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"p-col-12 p-md-4\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"yearHelpBlock\">{{ yearLabel}}\n                <span class=\"redish\" *ngIf=\"yearRequired\"> *</span> :\n              </label>\n              <input pInputText [id]=\"yearName\" [name]=\"yearName\" type=\"text\" placeholder=\"{{ yearPlaceholder }}\"\n                     pattern=\"[0-9]{0,4}\" minlength=\"4\" maxlength=\"4\"\n                     aria-describedby=\"yearHelpBlock\" [formControlName]=\"yearName\">\n            </div>\n          </div>\n        </div>\n      </div>\n      <ng-template #textual>\n        <span class=\"textual\">{{toString()}}</span>\n      </ng-template>\n\n      <ng-content select=\"[complement]\"></ng-content>\n\n      <div class=\"redish errors\" *ngIf=\"(formContainsErrors() || formGroup.errors) && !isAllFieldsFilled(); else dateRequired\">\n        <div *ngIf=\"controlContainsErrors(dayName)\">\n          <div *ngIf=\"hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasMinMaxError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.minMax}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(dayName) && !hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(monthName)\">\n          <div *ngIf=\"hasRequiredError(monthName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.month.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(yearName)\">\n          <div *ngIf=\"hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.required}}\n            </span>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasFormGroupInvalidateError()\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{messages.invalid}}\n          </span>\n        </div>\n\n        <div *ngIf=\"hasTooOldDateError()\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{minDateErrorMessage}}\n          </span>\n        </div>\n\n\n        <div *ngIf=\"hasFutureDateError()\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{maxDateErrorMessage}}\n          </span>\n        </div>\n\n        <ng-content select=\"[messages]\"></ng-content>\n      </div>\n      <ng-template #dateRequired >\n        <div class=\"redish errors\" *ngIf=\"isAllFieldsFilled()\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n            {{messages.required}}\n          </span>\n        </div>\n      </ng-template>\n    </fieldset>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}.day{padding-left:1rem;padding-right:1rem;min-width:4rem}#dayHelpBlock{white-space:nowrap}fieldset{border-color:transparent;border-width:0;padding:0}legend{-webkit-padding-start:0;padding-inline-start:0;padding-bottom:1rem}.p-grid label{margin:0;color:#656565}body .ui-dropdown-panel .ui-dropdown-items .ui-dropdown-item span:first{color:#656565}::-webkit-input-placeholder{color:#111}:-moz-placeholder{color:#111}::-moz-placeholder{color:#111}:-ms-input-placeholder{color:#111}"]
                }] }
    ];
    /** @nocollapse */
    InputDateApproxComponent.ctorParameters = function () { return []; };
    InputDateApproxComponent.propDecorators = {
        formGroup: [{ type: Input }],
        label: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        dayName: [{ type: Input }],
        dayLabel: [{ type: Input }],
        dayPlaceholder: [{ type: Input }],
        monthName: [{ type: Input }],
        monthLabel: [{ type: Input }],
        monthPlaceholder: [{ type: Input }],
        yearName: [{ type: Input }],
        yearRequired: [{ type: Input }],
        yearLabel: [{ type: Input }],
        yearPlaceholder: [{ type: Input }],
        model: [{ type: Input }],
        monthOptions: [{ type: Input }],
        messages: [{ type: Input }],
        canBeApproximative: [{ type: Input }],
        dateApproxLabel: [{ type: Input }],
        dateApproxCheckboxName: [{ type: Input }],
        dateApproxMasks: [{ type: Input }],
        dateApproxMaskName: [{ type: Input }],
        maxDate: [{ type: Input }],
        maxDateErrorMessage: [{ type: Input }],
        minDate: [{ type: Input }],
        minDateErrorMessage: [{ type: Input }]
    };
    return InputDateApproxComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date-approx/input-date-approx.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputDateApproxModule = /** @class */ (function () {
    function InputDateApproxModule() {
    }
    InputDateApproxModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputDateApproxComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        InputTextModule,
                        DropdownModule,
                        CheckboxModule
                    ],
                    exports: [InputDateApproxComponent]
                },] }
    ];
    return InputDateApproxModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text/input-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextComponent = /** @class */ (function () {
    function InputTextComponent() {
        this.MAX_LENGTH = 524288;
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.placeholder = '';
        this.maxLength = this.MAX_LENGTH;
        this.defaultDisplay = 'N/A';
        this.change = new EventEmitter();
        this.messages = {
            required: 'Ce champ est obligatoire',
            pattern: 'Le format n\'est pas correct',
            min: 'La valeur saisie est trop petite',
            max: 'La valeur saisie est trop grande',
            maxLength: 'La saisie dépasse le nombre de caractères autorisé'
        };
        this.textAfterReadOnly = '';
    }
    /**
     * @return {?}
     */
    InputTextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formGroup.get(this.controlName).valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.capitalize) {
                /** @type {?} */
                var changed = value.charAt(0).toUpperCase() + value.slice(1);
                _this.formGroup.get(_this.controlName).setValue(changed, { emitEvent: false });
            }
        }));
    };
    /**
     * @return {?}
     */
    InputTextComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @return {?}
     */
    InputTextComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].value || this.formGroup.controls[this.controlName].value === 0
            ? this.formGroup.controls[this.controlName].value : this.defaultDisplay;
    };
    InputTextComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-text',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" [htmlFor]=\"controlName\">\n      {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n    </label>\n\n    <ng-content select=\"[sub-label]\"></ng-content>\n\n    <input *ngIf=\"!readonly; else textual\"\n           [id]=\"controlName\"\n           type=\"text\"\n           pInputText\n           [formControlName]=\"controlName\"\n           [maxlength]=\"maxLength\"\n           [placeholder] = \"placeholder\">\n    <ng-template #textual>\n      <span class=\"textual\">{{ toString() }} &nbsp; {{ textAfterReadOnly }}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n        <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.required}} </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.pattern\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.pattern}} </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.min && messages.min\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.min}} (minimum : {{formGroup.controls[controlName].errors.min.min}}) </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.max && messages.max\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.max}} (maximum : {{formGroup.controls[controlName].errors.max.max}}) </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.maxlength && messages.maxLength\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.maxLength}} (maximum : {{formGroup.controls[controlName].errors.maxlength.requiredLength}}) </span>\n        </div>\n        <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}"]
                }] }
    ];
    InputTextComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        capitalize: [{ type: Input }],
        placeholder: [{ type: Input }],
        label: [{ type: Input }],
        maxLength: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        change: [{ type: Output }],
        messages: [{ type: Input }],
        textAfterReadOnly: [{ type: Input }]
    };
    return InputTextComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text/input-text.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextModule$1 = /** @class */ (function () {
    function InputTextModule$$1() {
    }
    InputTextModule$$1.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputTextComponent],
                    imports: [CommonModule, ReactiveFormsModule, InputTextModule],
                    exports: [InputTextComponent]
                },] }
    ];
    return InputTextModule$$1;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select/input-select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSelectComponent = /** @class */ (function () {
    function InputSelectComponent() {
        this.required = false;
        this.readonly = false;
        this.messages = {
            required: 'Ce champ est obligatoire'
        };
        this.defaultDisplay = 'N/A';
        this.dropdownIcon = 'pi pi-chevron-down';
    }
    /**
     * @return {?}
     */
    InputSelectComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @return {?}
     */
    InputSelectComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var found = null;
        if (this.formGroup && this.controlName && this.options) {
            /** @type {?} */
            var value_1 = this.formGroup.controls[this.controlName].value;
            found = (this.options && this.options.filter((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value_1; }))[0]) || null;
        }
        return (found && found.label) || this.defaultDisplay;
    };
    InputSelectComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-select',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" [htmlFor]=\"controlName\">\n      {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n    </label>\n\n    <ng-content select=\"[sub-label]\"></ng-content>\n\n    <p-dropdown *ngIf=\"!readonly; else textual\"\n                [id]=\"controlName\"\n                name=\"controlName\"\n                [placeholder]=\"placeholder\"\n                [options]=options\n                [dropdownIcon]=\"dropdownIcon\"\n                [formControlName]=\"controlName\"></p-dropdown>\n    <ng-template #textual>\n      <span class=\"textual\">{{toString()}}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n      <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n        <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        <span> {{messages.required}} </span>\n      </div>\n\n      <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}"]
                }] }
    ];
    InputSelectComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        messages: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        dropdownIcon: [{ type: Input }]
    };
    return InputSelectComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select/input-select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSelectModule = /** @class */ (function () {
    function InputSelectModule() {
    }
    InputSelectModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputSelectComponent],
                    imports: [CommonModule, ReactiveFormsModule, DropdownModule],
                    exports: [InputSelectComponent]
                },] }
    ];
    return InputSelectModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-radio/input-radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputRadioComponent = /** @class */ (function () {
    function InputRadioComponent() {
        this.required = false;
        this.readonly = false;
        this.column = false;
        this.spread = false;
        this.messages = {
            required: 'Ce champ est obligatoire'
        };
        this.defaultDisplay = 'N/A';
        this.classStyle = false;
    }
    /**
     * @return {?}
     */
    InputRadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.name) {
            this.name = this.controlName;
        }
    };
    /**
     * @return {?}
     */
    InputRadioComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return (!!this.formGroup &&
            !!this.formGroup.controls[this.controlName] &&
            this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched));
    };
    /**
     * @return {?}
     */
    InputRadioComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var found = null;
        if (this.formGroup && this.controlName && this.options) {
            /** @type {?} */
            var value_1 = this.formGroup.controls[this.controlName].value;
            found = (this.options && this.options.filter((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value_1; }))[0]) || null;
        }
        return (found && found.label) || this.defaultDisplay;
    };
    InputRadioComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-radio',
                    template: "<div class=\"p-grid nogutter\" *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <fieldset>\n      <legend *ngIf=\"label\" class=\"radio-label\">\n          {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n      </legend>\n      <ng-content select=\"[sub-label]\"></ng-content>\n\n      <div *ngIf=\"!readonly; else textual\"\n          class=\"p-grid nogutter\" [ngClass]=\"{'p-dir-col': column}\">\n        <ng-container *ngFor=\"let option of options\">\n          <div class=\"p-col\" [ngClass]=\"{'no-col': !spread, 'classStyle': classStyle}\">\n            <p-radioButton [name]=\"name\"\n                          [value]=\"option.value\"\n                          [label]=\"option.label\"\n                          [formControlName]=\"controlName\"\n                          [styleClass]=\"option.styleClass\">\n            </p-radioButton>\n          </div>\n        </ng-container>\n      </div>\n    </fieldset>\n    <ng-template #textual>\n      <span class=\"textual\">{{toString()}}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n      <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n        <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        <span> {{messages.required}} </span>\n      </div>\n\n      <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: ["label{width:100%}.no-col{flex-grow:initial;flex-basis:initial}.textual{display:block}fieldset,legend{margin:0;padding:0;border:0}fieldset legend{border-bottom:0}.classStyle{padding-right:2rem}"]
                }] }
    ];
    InputRadioComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        name: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        column: [{ type: Input }],
        spread: [{ type: Input }],
        options: [{ type: Input }],
        messages: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        classStyle: [{ type: Input }]
    };
    return InputRadioComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-radio/input-radio.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputRadioModule = /** @class */ (function () {
    function InputRadioModule() {
    }
    InputRadioModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputRadioComponent],
                    imports: [CommonModule, ReactiveFormsModule, RadioButtonModule],
                    exports: [InputRadioComponent]
                },] }
    ];
    return InputRadioModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-check/input-check.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputCheckComponent = /** @class */ (function () {
    function InputCheckComponent() {
        this.required = false;
        this.readonly = false;
        this.disableCheckbox = false;
        this.binary = false;
        this.messages = {
            required: 'Ce champ est obligatoire'
        };
    }
    /**
     * @return {?}
     */
    InputCheckComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.name) {
            this.name = this.controlName;
        }
        if (this.disableCheckbox) {
            this.formGroup.controls[this.controlName].disable();
        }
    };
    Object.defineProperty(InputCheckComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this.option.icon || 'pi pi-check';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputCheckComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @return {?}
     */
    InputCheckComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.option.label;
    };
    InputCheckComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-check',
                    template: "<div class=\"p-grid nogutter\" *ngIf=[formGroup] [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" class=\"radio-label\" [htmlFor]=\"controlName\">\n      {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n    </label>\n\n    <ng-content select=\"[sub-label]\"></ng-content>\n\n    <p-checkbox *ngIf=\"!readonly; else textual\"\n                [name]=\"name\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n                [formControlName]=\"controlName\"\n                [checkboxIcon]=\"icon\"\n                [binary]=\"binary\"\n                [styleClass]=\"option.styleClass\">\n    </p-checkbox>\n    <ng-template #textual>\n      <span class=\"textual\">{{toString()}}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n      <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n        <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        <span> {{messages.required}} </span>\n      </div>\n\n      <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: ["label{width:100%}.no-col{flex-grow:initial;flex-basis:initial}.textual{display:block}"]
                }] }
    ];
    InputCheckComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        name: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        disableCheckbox: [{ type: Input }],
        label: [{ type: Input }],
        option: [{ type: Input }],
        binary: [{ type: Input }],
        messages: [{ type: Input }]
    };
    return InputCheckComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-check/input-check.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputCheckModule = /** @class */ (function () {
    function InputCheckModule() {
    }
    InputCheckModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputCheckComponent],
                    imports: [CommonModule, ReactiveFormsModule, CheckboxModule],
                    exports: [InputCheckComponent]
                },] }
    ];
    return InputCheckModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-textarea/input-textarea.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextareaComponent = /** @class */ (function () {
    function InputTextareaComponent() {
        this.MAX_LENGTH = 524288;
        this.required = false;
        this.readonly = false;
        this.rows = 5;
        this.cols = 30;
        this.maxLength = this.MAX_LENGTH;
        this.messages = {
            required: 'Ce champ est obligatoire',
            maxLength: 'Le nombre de caractères autorisés est dépassé'
        };
        this.defaultDisplay = 'N/A';
        this.spellCheck = false;
    }
    /**
     * @return {?}
     */
    InputTextareaComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @return {?}
     */
    InputTextareaComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].value || this.defaultDisplay;
    };
    InputTextareaComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-textarea',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" [htmlFor]=\"controlName\">\n      {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n    </label>\n\n    <ng-content select=\"[sub-label]\"></ng-content>\n\n    <textarea *ngIf=\"!readonly; else textual\"\n              [id]=\"controlName\"\n              type=\"text\"\n              pInputTextarea\n              [rows]=\"rows\"\n              [cols]=\"cols\"\n              [maxLength]=\"maxLength\"\n              [formControlName]=\"controlName\"\n              [spellcheck]=\"spellCheck\"></textarea>\n    <ng-template #textual>\n      <span class=\"textual\">{{ toString() }}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n      <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n        <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        <span> {{messages.required}} </span>\n      </div>\n      <div *ngIf=\"formGroup.controls[controlName].errors.maxlength\">\n        <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        <span> {{messages.maxLength}} </span>\n      </div>\n\n      <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}"]
                }] }
    ];
    InputTextareaComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        rows: [{ type: Input }],
        cols: [{ type: Input }],
        maxLength: [{ type: Input }],
        messages: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        spellCheck: [{ type: Input }]
    };
    return InputTextareaComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-textarea/input-textarea.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextareaModule$1 = /** @class */ (function () {
    function InputTextareaModule$$1() {
    }
    InputTextareaModule$$1.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputTextareaComponent],
                    imports: [CommonModule, ReactiveFormsModule, InputTextareaModule],
                    exports: [InputTextareaComponent]
                },] }
    ];
    return InputTextareaModule$$1;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/guid.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function generateGuid() {
    /** @type {?} */
    var s4 = (/**
     * @return {?}
     */
    function () { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); });
    /** @type {?} */
    var guid = s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    return guid;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date-two-way-binding/input-date-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputDateTwoWayBindingComponent = /** @class */ (function () {
    function InputDateTwoWayBindingComponent() {
        this.required = false;
        this.readonly = false;
        this.disabled = false;
        this.showTime = false;
        this.helpText = '';
        this.showCheckbox = false;
        this.checkboxModel = false;
        this.disableDateOnCheck = false;
        this.ngModelChange = new EventEmitter();
        this.checkboxValueChanged = new EventEmitter();
        this.yearRangeMin = new Date().getFullYear() - 100;
        this.yearRangeMax = new Date().getFullYear() + 3;
        this.guid = generateGuid();
        this.error = null;
    }
    Object.defineProperty(InputDateTwoWayBindingComponent.prototype, "model", {
        set: /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (typeof model === 'string') {
                if (!model || this.showTime) {
                    this.modelDate = new Date(model);
                }
                else {
                    model = new Date(model);
                    this.modelDate = new Date(model.getUTCFullYear(), model.getUTCMonth(), model.getUTCDate());
                }
            }
            else {
                if (!model || this.showTime) {
                    this.modelDate = model;
                }
                else {
                    this.modelDate = new Date(model.getUTCFullYear(), model.getUTCMonth(), model.getUTCDate());
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputDateTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputDateTwoWayBindingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.disableDateFromCheck = (this.checkboxModel && this.disableDateOnCheck) ? true : false;
        this.fr = {
            firstDayOfWeek: 1,
            dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
            dayNamesShort: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],
            dayNamesMin: ['Di', 'Lu', 'Ma', 'Me', 'Je', 'Ve', 'Sa'],
            monthNames: [
                'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet',
                'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
            ],
            monthNamesShort: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aoû', 'Set', 'Oct', 'Nov', 'Déc'],
            today: "Aujourd'hui",
            clear: 'Annuler',
            dateFormat: 'dd/mm/yy',
            weekHeader: 'Sem'
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputDateTwoWayBindingComponent.prototype.checkboxChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checkboxValueChanged.emit(event);
        if (event === true && this.disableDateOnCheck) {
            this.modelDate = null;
            this.disableDateFromCheck = true;
            this.ngModelChange.emit(this.modelDate);
        }
        else {
            this.disableDateFromCheck = false;
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    InputDateTwoWayBindingComponent.prototype.onDateChange = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (!date || this.showTime) {
            this.ngModelChange.emit(date);
        }
        else {
            /** @type {?} */
            var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            this.ngModelChange.emit(utcDate);
        }
    };
    InputDateTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-date-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !(readonly || disabled)\" class=\"redish\">*</span> :\n      <button *ngIf=\"helpText\" class=\"help-button\" title=\"{{helpText}}\">\n        <i class=\"fa fa-question-circle fa-lg\"></i>\n      </button>\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\" class=\"ui-inputgroup\">\n        <p-calendar\n          (ngModelChange)=\"onDateChange($event)\"\n          [(ngModel)]=\"modelDate\"\n          [disabled]=\"disabled || disableDateFromCheck\"\n          [inputId]=\"guid\"\n          [locale]=\"fr\"\n          [maxDate]=\"maxDateValue\"\n          [minDate]=\"minDateValue\"\n          [monthNavigator]=\"true\"\n          [ngClass]=\"{'error': error && error.length}\"\n          [readonlyInput]=\"readonly\"\n          [required]=\"required\"\n          [showIcon]=\"true\"\n          [showTime]=\"showTime\"\n          [yearNavigator]=\"true\"\n          appendTo=\"body\"\n          dateFormat=\"dd/mm/yy\"\n          hourFormat=\"24\"\n          name=\"{{guid}}\"\n          yearRange=\"{{yearRangeMin}}:{{yearRangeMax}}\">\n        </p-calendar>\n        <span\n          *ngIf=\"showCheckbox\"\n          class=\"ui-inputgroup-addon checkbox\"\n          id=\"custom-span-checkbox\"\n        >\n          <p-checkbox\n            (onChange)=\"checkboxChanged($event)\"\n            [(ngModel)]=\"checkboxModel\"\n            binary=\"true\">\n          </p-checkbox>\n        </span>\n        <span\n          *ngIf=\"showCheckbox\"\n          class=\"ui-inputgroup-addon label\">\n          {{checkboxLabel}}\n        </span>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">\n          <span *ngIf=\"!showTime\">\n            {{ (modelDate !== null) ? (modelDate | date: 'dd/MM/yyyy') : '-' }}\n          </span>\n          <span *ngIf=\"showTime\">\n            {{ (modelDate !== null) ? (modelDate | date: 'dd/MM/yyyy \u00E0 HH:mm') : '-' }}\n          </span>\n          <span *ngIf=\"showCheckbox && checkboxModel\" class=\"textual-checkboxLabel\">\n            {{checkboxLabel}}\n          </span>\n        </div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: ["p-calendar{margin-top:-.5rem}label{color:#656565;font-size:1.4rem}.help-button{border:none;background-color:#fff;color:#256cb9}.ui-inputgroup-addon.label{padding:.8rem 1rem 0;text-align:left;color:#271519;background:0 0;border:none;line-height:22px}.ui-inputgroup-addon.checkbox{line-height:3rem;background:0 0;border-right:none;border-top:none;border-bottom:none;padding:0 0 0 1rem}.textual-checkboxLabel{padding-left:1rem}#custom-span-checkbox{border-left:none;line-height:2.9rem}.textual{margin-top:7px}"]
                }] }
    ];
    InputDateTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        label: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        minDateValue: [{ type: Input }],
        maxDateValue: [{ type: Input }],
        showTime: [{ type: Input }],
        helpText: [{ type: Input }],
        showCheckbox: [{ type: Input }],
        checkboxModel: [{ type: Input }],
        checkboxLabel: [{ type: Input }],
        disableDateOnCheck: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }],
        checkboxValueChanged: [{ type: Output }]
    };
    return InputDateTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date-two-way-binding/input-date-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputDateTwoWayBindingModule = /** @class */ (function () {
    function InputDateTwoWayBindingModule() {
    }
    InputDateTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputDateTwoWayBindingComponent],
                    imports: [CommonModule, FormsModule, CalendarModule, CheckboxModule],
                    exports: [InputDateTwoWayBindingComponent]
                },] }
    ];
    return InputDateTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text-two-way-binding/input-text-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextTwoWayBindingComponent = /** @class */ (function () {
    function InputTextTwoWayBindingComponent() {
        this.MAX_LENGTH = 524288;
        this.error = null;
        this.type = 'text';
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.maxLength = this.MAX_LENGTH;
        this.disabled = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
    Object.defineProperty(InputTextTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    InputTextTwoWayBindingComponent.prototype.onModelChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.capitalize) {
            event = event.charAt(0).toUpperCase() + event.slice(1);
        }
        this.ngModelChange.emit(event);
    };
    /**
     * @return {?}
     */
    InputTextTwoWayBindingComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.model ? this.model : '-';
    };
    InputTextTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-text-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\" class=\"ui-inputgroup\">\n        <input (ngModelChange)=\"onModelChange($event)\"\n               [(ngModel)]=\"model\"\n               [disabled]=\"disabled\"\n               [maxlength]=maxLength\n               [ngClass]=\"{'error': error && error.length}\"\n               [readonly]=\"readonly\"\n               [required]=\"required\"\n               id=\"{{guid}}\"\n               name=\"{{guid}}\"\n               pInputText\n               placeholder=\"{{placeholder}}\"\n               type=\"{{type}}\">\n        <button *ngIf=\"icon\" [class]=\"icon.class\" [icon]=\"icon.type\" pButton type=\"button\"></button>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">{{ toString() }}</div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: ["label{color:#656565;font-size:1.4rem}.textual{margin-top:7px}"]
                }] }
    ];
    InputTextTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        type: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        capitalize: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        maxLength: [{ type: Input }],
        errors: [{ type: Input }],
        icon: [{ type: Input }],
        disabled: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputTextTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text-two-way-binding/input-text-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextTwoWayBindingModule = /** @class */ (function () {
    function InputTextTwoWayBindingModule() {
    }
    InputTextTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputTextTwoWayBindingComponent],
                    imports: [
                        CommonModule,
                        InputTextModule,
                        FormsModule,
                        ButtonModule
                    ],
                    exports: [InputTextTwoWayBindingComponent]
                },] }
    ];
    return InputTextTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-text-two-way-binding/input-multi-text-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputMultiTextTwoWayBindingComponent = /** @class */ (function () {
    function InputMultiTextTwoWayBindingComponent() {
        this.MAX_LENGTH = 524288;
        this.error = null;
        this.type = 'text';
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.maxLength = this.MAX_LENGTH;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.value = [];
    }
    Object.defineProperty(InputMultiTextTwoWayBindingComponent.prototype, "model", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputMultiTextTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.onModelChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.capitalize) {
            this.value = this.value.map((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return _this._capitalize(element); }));
        }
        if (this.value[0] === '' && this.value.length === 1) {
            this.value = null;
        }
        this.ngModelChange.emit(this.value);
    };
    /**
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.addItem = /**
     * @return {?}
     */
    function () {
        this.value.push('');
    };
    /**
     * @param {?} index
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.deleteItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.value.splice(index, 1);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.toString = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item ? item : '-';
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return index;
    };
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype._capitalize = /**
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return (text.charAt(0).toUpperCase() + text.slice(1));
    };
    InputMultiTextTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-multi-text-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}-0\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <div [ngClass]=\"{\n            'p-col-11': value.length > 1,\n            'p-col-12': value.length <= 1\n          }\">\n            <input pInputText\n                   type=\"{{type}}\"\n                   id=\"{{guid}}-0\"\n                   name=\"{{guid}}-0\"\n                   [placeholder]=\"placeholder\"\n                   [maxlength]=\"maxLength\"\n                   [(ngModel)]=\"value[0]\"\n                   (ngModelChange)=\"onModelChange()\"\n                   [required]=\"required\"\n                   [ngClass]=\"{'error': error && error.length}\">\n          </div>\n\n          <span (click)=\"deleteItem(0)\"\n                *ngIf=\"value.length > 1\"\n                class=\"delete-button delete-{{guid}}-0\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <div *ngFor=\"let modelItem of value | slice:1; index as i; trackBy: trackByFn\"\n             class=\"p-grid p-align-center\">\n          <div [ngClass]=\"{\n            'p-col-11': value.length > 1,\n            'p-col-12': value.length <= 1\n          }\">\n            <input\n              pInputText\n              type=\"{{type}}\"\n              id=\"{{guid}}-{{i+1}}\"\n              name=\"{{guid}}-{{i+1}}\"\n              [maxlength]=\"maxLength\"\n              [(ngModel)]=\"value[i+1]\"\n              (ngModelChange)=\"onModelChange()\"\n              [ngClass]=\"{'error': error && error.length}\">\n          </div>\n\n          <span\n            (click)=\"deleteItem(i+1)\"\n            class=\"delete-button delete-{{guid}}-{{i+1}}\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <button (click)=\"addItem()\"\n                *ngIf=\"value[value.length - 1]\"\n                class=\"ui-button-borderless add-item\"\n                pButton>\n          {{addItemLabel}}\n        </button>\n      </div>\n\n      <ng-template #textual>\n        <ul class=\"item-readonly textual\">\n          <li *ngFor=\"let valueItem of value\">{{toString(valueItem)}}</li>\n          <li *ngIf=\"value.length === 0\">-</li>\n        </ul>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".item-readonly{list-style-type:none;padding:0;margin:0}label{color:#656565;font-size:1.4rem}.delete-button{margin-bottom:7px;margin-left:5px;cursor:pointer;color:#d13721;font-size:1.2rem}.input{margin-top:-1.3rem}.textual{margin-top:7px}"]
                }] }
    ];
    InputMultiTextTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input, args: ['model',] }],
        type: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        capitalize: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        maxLength: [{ type: Input }],
        addItemLabel: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputMultiTextTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-text-two-way-binding/input-multi-text-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputMultiTextTwoWayBindingModule = /** @class */ (function () {
    function InputMultiTextTwoWayBindingModule() {
    }
    InputMultiTextTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputMultiTextTwoWayBindingComponent],
                    imports: [
                        CommonModule,
                        InputTextModule,
                        FormsModule,
                        ButtonModule
                    ],
                    exports: [InputMultiTextTwoWayBindingComponent]
                },] }
    ];
    return InputMultiTextTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select-two-way-binding/input-select-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSelectTwoWayBindingComponent = /** @class */ (function () {
    function InputSelectTwoWayBindingComponent() {
        this.error = null;
        this.required = false;
        this.showDeleteItemsButton = false;
        this.readonly = false;
        this.disabled = false;
        this.options = [];
        this.filter = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.colSize = '12';
    }
    Object.defineProperty(InputSelectTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputSelectTwoWayBindingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.colSize = this.showDeleteItemsButton ? '11' : '12';
    };
    /**
     * @return {?}
     */
    InputSelectTwoWayBindingComponent.prototype.onModelChange = /**
     * @return {?}
     */
    function () {
        this.ngModelChange.emit(this.model);
    };
    /**
     * @return {?}
     */
    InputSelectTwoWayBindingComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.options) {
            return '-';
        }
        /** @type {?} */
        var selectedOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return isEqual(_this.model, option.value); }));
        return selectedOption ? selectedOption.label : '-';
    };
    /**
     * @return {?}
     */
    InputSelectTwoWayBindingComponent.prototype.deleteItem = /**
     * @return {?}
     */
    function () {
        this.model = null;
        this.ngModelChange.emit(this.model);
    };
    InputSelectTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-select-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <p-dropdown\n            id=\"{{guid}}\"\n            name=\"{{guid}}\"\n            [placeholder]=\"placeholder\"\n            [(ngModel)]=\"model\"\n            (ngModelChange)=\"onModelChange()\"\n            [options]=\"options\"\n            [required]=\"required\"\n            [disabled]=\"disabled\"\n            class=\"p-col-{{colSize}}\"\n            [ngClass]=\"{\n              'error': error && error.length,\n              'fluid': !showDeleteItemsButton\n            }\"\n            [filter]=\"filter\">\n          </p-dropdown>\n\n          <span\n            (click)=\"deleteItem()\"\n            *ngIf=\"showDeleteItemsButton\"\n            class=\"delete-button\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">{{ toString() }}</div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: ["label{color:#656565;font-size:1.4rem}.delete-button{margin-bottom:7px;margin-left:5px;cursor:pointer;color:#d13721;font-size:1.2rem}p-dropdown{margin-top:-.5rem}p-dropdown.fluid{width:100%}.textual{padding-top:7px}"]
                }] }
    ];
    InputSelectTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        required: [{ type: Input }],
        showDeleteItemsButton: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        filter: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputSelectTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select-two-way-binding/input-select-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSelectTwoWayBindingModule = /** @class */ (function () {
    function InputSelectTwoWayBindingModule() {
    }
    InputSelectTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputSelectTwoWayBindingComponent],
                    imports: [CommonModule, FormsModule, DropdownModule, ButtonModule],
                    exports: [InputSelectTwoWayBindingComponent]
                },] }
    ];
    return InputSelectTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-select-two-way-binding/input-multi-select-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputMultiSelectTwoWayBindingComponent = /** @class */ (function () {
    function InputMultiSelectTwoWayBindingComponent() {
        this.error = null;
        this.required = false;
        this.readonly = false;
        this.options = [];
        this.filter = false;
        this.limit = Infinity;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.value = [];
    }
    Object.defineProperty(InputMultiSelectTwoWayBindingComponent.prototype, "model", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputMultiSelectTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.onModelChange = /**
     * @return {?}
     */
    function () {
        this.ngModelChange.emit(this.value);
    };
    /**
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.addItem = /**
     * @return {?}
     */
    function () {
        this.value.push(null);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.deleteItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.value.splice(index, 1);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.toString = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var selectedOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return isEqual(value, option.value); }));
        return (selectedOption && selectedOption.label) ? selectedOption.label : '-';
    };
    InputMultiSelectTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-multi-select-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}-0\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div [ngClass]=\"\" class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <p-dropdown (ngModelChange)=\"onModelChange()\"\n                      [(ngModel)]=\"value[0]\"\n                      [filter]=\"filter\"\n                      [ngClass]=\"{\n                        'error': error && error.length,\n                        'fluid': value.length == 0\n                      }\"\n                      [options]=\"options\"\n                      [placeholder]=\"placeholder\"\n                      [required]=\"required\"\n                      class=\"p-col-11\"\n                      filter=\"true\"\n                      id=\"{{guid}}-0\"\n                      name=\"{{guid}}-0\">\n          </p-dropdown>\n\n          <span\n            (click)=\"deleteItem(0)\"\n            *ngIf=\"value.length\"\n            class=\"delete-button\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <div *ngFor=\"let valueItem of value | slice:1; index as i\" class=\"p-grid p-align-center additional-input\">\n          <p-dropdown (ngModelChange)=\"onModelChange()\"\n                      [(ngModel)]=\"value[i+1]\"\n                      [filter]=\"filter\"\n                      [ngClass]=\"{'error': error && error.length}\"\n                      [options]=\"options\"\n                      [placeholder]=\"placeholder\"\n                      [required]=\"required\"\n                      class=\"p-col-11\"\n                      filter=\"true\"\n                      id=\"{{guid}}-{{i+1}}\"\n                      name=\"{{guid}}-{{i+1}}\">\n          </p-dropdown>\n\n          <span\n            (click)=\"deleteItem(i+1)\"\n            class=\"delete-button\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <button (click)=\"addItem()\"\n                *ngIf=\"value[value.length - 1] && value.length < limit\"\n                class=\"ui-button-borderless add-item\"\n                pButton>\n          {{addItemLabel}}\n        </button>\n      </div>\n\n      <ng-template #textual>\n        <ul class=\"item-readonly textual\">\n          <li>{{ toString(value[0]) }}</li>\n          <li *ngFor=\"let valueItem of value | slice:1;\">{{ toString(valueItem) }}</li>\n        </ul>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".item-readonly{list-style-type:none;padding:0;margin:0}.additional-input{margin-top:1rem}label{color:#656565;font-size:1.4rem}.delete-button{cursor:pointer;color:#d13721;font-size:1.2rem;margin-bottom:7px;margin-left:5px}p-dropdown{margin-top:-.5rem}p-dropdown.fluid{width:100%}.textual{margin-top:7px}"]
                }] }
    ];
    InputMultiSelectTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input, args: ['model',] }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        url: [{ type: Input }],
        filter: [{ type: Input }],
        limit: [{ type: Input }],
        errors: [{ type: Input }],
        addItemLabel: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputMultiSelectTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-select-two-way-binding/input-multi-select-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputMultiSelectTwoWayBindingModule = /** @class */ (function () {
    function InputMultiSelectTwoWayBindingModule() {
    }
    InputMultiSelectTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputMultiSelectTwoWayBindingComponent],
                    imports: [CommonModule, FormsModule, DropdownModule, ButtonModule],
                    exports: [InputMultiSelectTwoWayBindingComponent]
                },] }
    ];
    return InputMultiSelectTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-radio-two-way-binding/input-radio-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputRadioTwoWayBindingComponent = /** @class */ (function () {
    function InputRadioTwoWayBindingComponent() {
        this.required = false;
        this.disabled = false;
        this.column = false;
        this.spread = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.error = null;
    }
    Object.defineProperty(InputRadioTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    InputRadioTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-radio-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" class=\"radio-label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !disabled\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div [ngClass]=\"{'p-dir-col': column}\" class=\"p-grid nogutter\">\n        <ng-container *ngFor=\"let option of options\">\n          <div [ngClass]=\"{'no-col': !spread}\" class=\"p-col\">\n            <p-radioButton (ngModelChange)=\"ngModelChange.emit($event)\"\n                           [(ngModel)]=\"model\"\n                           [disabled]=\"disabled\"\n                           [label]=\"option.label\"\n                           [ngClass]=\"{'error': error && error.length}\"\n                           [styleClass]=\"option.styleClass\"\n                           [value]=\"option.value\"\n                           name=\"{{guid}}\">\n            </p-radioButton>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: ["label{width:100%}.no-col{flex-grow:initial;flex-basis:initial}.textual{display:block}"]
                }] }
    ];
    InputRadioTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        name: [{ type: Input }],
        required: [{ type: Input }],
        disabled: [{ type: Input }],
        label: [{ type: Input }],
        column: [{ type: Input }],
        spread: [{ type: Input }],
        options: [{ type: Input }],
        ngModelChange: [{ type: Output }],
        errors: [{ type: Input }]
    };
    return InputRadioTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-radio-two-way-binding/input-radio-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputRadioTwoWayBindingModule = /** @class */ (function () {
    function InputRadioTwoWayBindingModule() {
    }
    InputRadioTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputRadioTwoWayBindingComponent],
                    imports: [CommonModule, FormsModule, RadioButtonModule],
                    exports: [InputRadioTwoWayBindingComponent]
                },] }
    ];
    return InputRadioTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-check-two-way-binding/input-check-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputCheckTwoWayBindingComponent = /** @class */ (function () {
    function InputCheckTwoWayBindingComponent() {
        this.required = false;
        this.readonly = false;
        this.errors = [];
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
    Object.defineProperty(InputCheckTwoWayBindingComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this.option.icon || 'pi pi-check';
        },
        enumerable: true,
        configurable: true
    });
    InputCheckTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-check-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" class=\"radio-label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <p-checkbox (ngModelChange)=\"ngModelChange.emit($event)\"\n                  [(ngModel)]=\"model\"\n                  [checkboxIcon]=\"icon\"\n                  [label]=\"option.label\"\n                  [ngClass]=\"{'error': errors.length}\"\n                  [readonly]=\"readonly\"\n                  [styleClass]=\"option.styleClass\"\n                  id=\"{{guid}}\"\n                  name=\"{{guid}}\">\n      </p-checkbox>\n    </div>\n\n    <div *ngIf=\"errors.length\" class=\"error redish\">\n      <div *ngFor=\"let error of errors\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{error}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: ["label{width:100%;color:#656565;font-size:1.4rem}.no-col{flex-grow:initial;flex-basis:initial}.textual{display:block}"]
                }] }
    ];
    InputCheckTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        name: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        option: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputCheckTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-check-two-way-binding/input-check-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputCheckTwoWayBindingModule = /** @class */ (function () {
    function InputCheckTwoWayBindingModule() {
    }
    InputCheckTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputCheckTwoWayBindingComponent],
                    imports: [CommonModule, FormsModule, CheckboxModule],
                    exports: [InputCheckTwoWayBindingComponent]
                },] }
    ];
    return InputCheckTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-textarea-two-way-binding/input-textarea-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextareaTwoWayBindingComponent = /** @class */ (function () {
    function InputTextareaTwoWayBindingComponent() {
        this.required = false;
        this.readonly = false;
        this.rows = 5;
        this.cols = 30;
        this.errors = [];
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
    InputTextareaTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-textarea-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <textarea (ngModelChange)=\"ngModelChange.emit($event)\"\n              [(ngModel)]=\"model\"\n              [cols]=\"cols\"\n              [ngClass]=\"{'error': errors.length}\"\n              [readonly]=\"readonly\"\n              [rows]=\"rows\"\n              id=\"{{guid}}\"\n              name=\"{{guid}}\"\n              pInputTextarea\n              type=\"text\">\n    </textarea>\n\n    <div *ngIf=\"errors.length\" class=\"error redish\">\n      <div *ngFor=\"let error of errors\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{error}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".textual{display:block}label{color:#656565;font-size:1.4rem}"]
                }] }
    ];
    InputTextareaTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        rows: [{ type: Input }],
        cols: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputTextareaTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-textarea-two-way-binding/input-textarea-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextareaTwoWayBindingModule = /** @class */ (function () {
    function InputTextareaTwoWayBindingModule() {
    }
    InputTextareaTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputTextareaTwoWayBindingComponent],
                    imports: [CommonModule, FormsModule, InputTextareaModule],
                    exports: [InputTextareaTwoWayBindingComponent]
                },] }
    ];
    return InputTextareaTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vertical-menu/vertical-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerticalMenuComponent = /** @class */ (function () {
    function VerticalMenuComponent() {
        this.topOffset = 0;
        this.isWithMarkers = false;
        this.isSingleLevel = true;
        this.targets = [];
    }
    /**
     * @return {?}
     */
    VerticalMenuComponent.prototype.handleScroll = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (!this.targets.length) {
            return;
        }
        /** @type {?} */
        var pos = (document.documentElement.scrollTop || document.body.scrollTop);
        /** @type {?} */
        var toActivate = this.targets[0];
        try {
            for (var _b = __values(this.targets), _c = _b.next(); !_c.done; _c = _b.next()) {
                var elem = _c.value;
                /** @type {?} */
                var threshold = this._getYOffset(elem.target) - 1;
                if (threshold <= pos) {
                    toActivate = elem;
                }
                elem.expanded = false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (toActivate) {
            toActivate.expanded = true;
        }
    };
    /**
     * @return {?}
     */
    VerticalMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.formattedItems = this._parseItems(this.items);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    VerticalMenuComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.items && changes.items.previousValue != changes.items.currentValue) {
            this.formattedItems = this._parseItems(changes.items.currentValue);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    VerticalMenuComponent.prototype.onAnchorLink = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Scroll to the target adding the offset if defined
        /** @type {?} */
        var y = this._getYOffset(event.item.target);
        window.scrollTo({ top: y, behavior: 'smooth' });
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    VerticalMenuComponent.prototype._getYOffset = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        var targetElem = document.querySelector(target);
        if (!targetElem) {
            // In case the target element is unreachable we return a value superior to the max-scroll so it can't be auto-selected
            return document.documentElement.scrollHeight + 1;
        }
        /** @type {?} */
        var y = targetElem.getBoundingClientRect().top + window.pageYOffset - this.topOffset;
        return y;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    VerticalMenuComponent.prototype._parseItems = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        var e_2, _a;
        if (!items) {
            return;
        }
        /** @type {?} */
        var formatted = [];
        var _loop_1 = function (item) {
            /** @type {?} */
            var tmpItem = __assign({}, item);
            // Set onclick event if not defined and an id is passed as target
            if (item.target && item.target.indexOf('#') !== -1 && !item.command) {
                tmpItem.command = this_1.onAnchorLink.bind(this_1);
                this_1.targets.push(tmpItem);
            }
            // Status marker specific controls
            if (this_1.isWithMarkers) {
                if (!tmpItem.icon) {
                    tmpItem.icon = 'fa fa-check-circle';
                }
                if (item.control) {
                    delete tmpItem.control;
                    if (!tmpItem.styleClass) {
                        tmpItem.styleClass = '';
                    }
                    this_1.setMarkerStatus(tmpItem, item.control);
                    item.control.statusChanges.subscribe((/**
                     * @param {?} status
                     * @return {?}
                     */
                    function (status) {
                        _this.setMarkerStatus(tmpItem, item.control);
                    }));
                }
            }
            // Recurse
            if (item.items && item.items.length) {
                this_1.isSingleLevel = false;
                tmpItem.items = this_1._parseItems((/** @type {?} */ (item.items)));
            }
            formatted.push(tmpItem);
        };
        var this_1 = this;
        try {
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                _loop_1(item);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return formatted;
    };
    /**
     * @param {?} item
     * @param {?} control
     * @return {?}
     */
    VerticalMenuComponent.prototype.setMarkerStatus = /**
     * @param {?} item
     * @param {?} control
     * @return {?}
     */
    function (item, control) {
        /** @type {?} */
        var isCompleteValidClass = 'is-complete-valid';
        /** @type {?} */
        var isCompleteInvalidClass = 'is-complete-invalid';
        /** @type {?} */
        var completeWithRejectionErrorKey = 'completeInvalid';
        if (control.valid) {
            this.addClass(item, isCompleteValidClass);
            this.removeClass(item, isCompleteInvalidClass);
        }
        else {
            if (control.errors && completeWithRejectionErrorKey in control.errors) {
                this.addClass(item, isCompleteInvalidClass);
            }
            else {
                this.removeClass(item, isCompleteInvalidClass);
            }
            this.removeClass(item, isCompleteValidClass);
        }
    };
    /**
     * @private
     * @param {?} item
     * @param {?} className
     * @return {?}
     */
    VerticalMenuComponent.prototype.addClass = /**
     * @private
     * @param {?} item
     * @param {?} className
     * @return {?}
     */
    function (item, className) {
        if (!item.styleClass) {
            item.styleClass = className;
        }
        if (-1 === item.styleClass.indexOf(className)) {
            item.styleClass += " " + className;
        }
    };
    /**
     * @private
     * @param {?} item
     * @param {?} className
     * @return {?}
     */
    VerticalMenuComponent.prototype.removeClass = /**
     * @private
     * @param {?} item
     * @param {?} className
     * @return {?}
     */
    function (item, className) {
        item.styleClass = item.styleClass.replace(className, '').trim();
    };
    VerticalMenuComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-vertical-menu',
                    template: "<p-panelMenu\n  [model]=\"formattedItems\"\n  [multiple]=\"multiple\"\n  [style]=\"style\"\n  [styleClass]=\"styleClass\"\n  class=\"anef-ui-vmenu\"\n  [class.no-submenu]=\"isSingleLevel\"\n  [class.with-markers]=\"isWithMarkers\"\n  routerLinkActiveOptions=\"{exact: true}\"\n  ></p-panelMenu>\n",
                    styles: [""]
                }] }
    ];
    VerticalMenuComponent.propDecorators = {
        items: [{ type: Input }],
        style: [{ type: Input }],
        styleClass: [{ type: Input }],
        multiple: [{ type: Input }],
        topOffset: [{ type: Input }],
        isWithMarkers: [{ type: Input }],
        handleScroll: [{ type: HostListener, args: ['window:scroll',] }]
    };
    return VerticalMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vertical-menu.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerticalMenuModule = /** @class */ (function () {
    function VerticalMenuModule() {
    }
    VerticalMenuModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [VerticalMenuComponent],
                    imports: [CommonModule, PanelMenuModule],
                    exports: [VerticalMenuComponent]
                },] }
    ];
    return VerticalMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/side-bar/side-bar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var SideBarType = {
    DOCUMENTS: "DOCUMENTS",
    APPOINTMENT: "APPOINTMENT",
    MESSAGESINTERN: "MESSAGESINTERN",
    MESSAGES: "MESSAGES",
    HISTORIQUE: "HISTORIQUE",
    LIBRARY: "LIBRARY",
};
var SideBarComponent = /** @class */ (function () {
    function SideBarComponent() {
        this.activeIndexChange = new EventEmitter();
        this.SideBarType = SideBarType;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    SideBarComponent.prototype.handleChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.activeIndex = event.index;
        this.activeIndexChange.emit(this.activeIndex);
    };
    /**
     * @param {?} section
     * @return {?}
     */
    SideBarComponent.prototype.getIconClass = /**
     * @param {?} section
     * @return {?}
     */
    function (section) {
        switch (section) {
            case SideBarType.DOCUMENTS: {
                return 'fa fa-fw fa-paperclip';
            }
            case SideBarType.APPOINTMENT: {
                return 'fa fa-fw fa-calendar';
            }
            case SideBarType.MESSAGESINTERN: {
                return 'fa fa-fw fa-comments-o';
            }
            case SideBarType.MESSAGES: {
                return 'fa fa-fw fa-envelope';
            }
            case SideBarType.HISTORIQUE: {
                return 'fa fa-fw fa-history';
            }
            case SideBarType.LIBRARY: {
                return 'fa fa-fw fa-book';
            }
        }
    };
    SideBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'anef-side-bar',
                    template: "<p-tabView  orientation=\"left\" class=\"anef-sidebar\" [activeIndex]=\"activeIndex\" (onChange)=\"handleChange($event)\">\n  <p-tabPanel leftIcon=\"{{ getIconClass(section.module) }}\" *ngFor=\"let section of sections; let first = first;\" [selected]=\"first\">\n    <ng-content *ngIf=\"section.module === SideBarType.DOCUMENTS\" select=\"[documents]\"></ng-content>\n    <ng-content *ngIf=\"section.module === SideBarType.APPOINTMENT\" select=\"[appointment]\"></ng-content>\n    <ng-content *ngIf=\"section.module === SideBarType.MESSAGESINTERN\" select=\"[intern-messages]\"></ng-content>\n    <ng-content *ngIf=\"section.module === SideBarType.MESSAGES\" select=\"[messages]\"></ng-content>\n    <ng-content *ngIf=\"section.module === SideBarType.HISTORIQUE\" select=\"[historique]\"></ng-content>\n    <ng-content *ngIf=\"section.module === SideBarType.LIBRARY\" select=\"[library]\"></ng-content>\n  </p-tabPanel>\n</p-tabView>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SideBarComponent.ctorParameters = function () { return []; };
    SideBarComponent.propDecorators = {
        sections: [{ type: Input }],
        activeIndex: [{ type: Input }],
        activeIndexChange: [{ type: Output }]
    };
    return SideBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/side-bar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SideBarModule = /** @class */ (function () {
    function SideBarModule() {
    }
    SideBarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SideBarComponent,
                    ],
                    imports: [
                        CommonModule,
                        TabViewModule
                    ],
                    exports: [SideBarComponent]
                },] }
    ];
    return SideBarModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-switch/input-switch.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSwitchComponent = /** @class */ (function () {
    function InputSwitchComponent() {
        this.customStyleClass = 'anef-switch';
        this.change = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InputSwitchComponent.prototype.isChecked = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].value;
    };
    /**
     * @return {?}
     */
    InputSwitchComponent.prototype.isDisabled = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].disabled;
    };
    /**
     * @return {?}
     */
    InputSwitchComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputSwitchComponent.prototype.onchange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.change) {
            this.change.emit(event);
        }
    };
    InputSwitchComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-switch',
                    template: "<div *ngIf=[formGroup] [formGroup]=\"formGroup\">\n  <label *ngIf=\"label\" class=\"switch-position\"> {{label}} :</label>\n  <span *ngIf=\"choice1\" class=\"switch-position\"\n    [ngClass]='{\"ui-label-selected\": !isChecked(), \"ui-label-disabled\": isDisabled()}'> {{choice1}}</span>\n  <p-inputSwitch [formControlName]=\"controlName\" (onChange)=\"onchange($event)\" [styleClass]=\"customStyleClass\">\n  </p-inputSwitch>\n  <span *ngIf=\"choice2\" class=\"switch-position\"\n    [ngClass]='{\"ui-label-selected\": isChecked(), \"ui-label-disabled\": isDisabled()}'> {{choice2}}</span>\n\n</div>",
                    styles: [":host ::ng-deep .ui-inputswitch .ui-inputswitch-slider:before{background-color:#256cb9}:host ::ng-deep .anef-switch.ui-inputswitch:hover .ui-inputswitch-slider{background-color:#94a9c2}:host ::ng-deep .anef-switch.ui-inputswitch .ui-inputswitch-slider{background-color:#aac5e3}:host ::ng-deep .anef-switch.ui-inputswitch.ui-inputswitch-checked.ui-inputswitch-focus .ui-inputswitch-slider{background:#aac5e3}:host ::ng-deep .anef-switch.ui-inputswitch.ui-inputswitch-checked:hover .ui-inputswitch-slider{background:#94a9c2}:host ::ng-deep .ui-state-disabled,:host ::ng-deep .ui-widget:disabled{opacity:.5!important;background-color:transparent}span.ui-label-selected{font-weight:700}span.ui-label-disabled{color:#c7c7c7}.switch-position{padding-left:.4em;padding-right:.4em;position:relative;top:-6px}"]
                }] }
    ];
    InputSwitchComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        choice1: [{ type: Input }],
        choice2: [{ type: Input }],
        customStyleClass: [{ type: Input }],
        label: [{ type: Input }],
        change: [{ type: Output }]
    };
    return InputSwitchComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-switch/input-switch.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSwitchModule$1 = /** @class */ (function () {
    function InputSwitchModule$$1() {
    }
    InputSwitchModule$$1.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputSwitchComponent],
                    imports: [CommonModule, ReactiveFormsModule, InputSwitchModule],
                    exports: [InputSwitchComponent]
                },] }
    ];
    return InputSwitchModule$$1;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-switch-two-way-binding/input-switch-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSwitchTwoWayBindingComponent = /** @class */ (function () {
    function InputSwitchTwoWayBindingComponent() {
        this.customStyleClass = 'anef-switch';
        this.change = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InputSwitchTwoWayBindingComponent.prototype.isChecked = /**
     * @return {?}
     */
    function () {
        return this.model;
    };
    /**
     * @return {?}
     */
    InputSwitchTwoWayBindingComponent.prototype.isDisabled = /**
     * @return {?}
     */
    function () {
        return this.disabled;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputSwitchTwoWayBindingComponent.prototype.onchange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.change) {
            this.change.emit(event);
        }
    };
    InputSwitchTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-switch-two-way-binding',
                    template: "<div>\n  <label *ngIf=\"label\" class=\"switch-position\"> {{label}} :</label>\n  <span *ngIf=\"choice1\" class=\"switch-position\"\n    [ngClass]='{\"ui-label-selected\": !isChecked(), \"ui-label-disabled\": isDisabled()}'> {{choice1}}</span>\n  <p-inputSwitch [(ngModel)]=\"model\" [disabled]=\"disabled\" (onChange)=\"onchange($event)\"\n    [styleClass]=\"customStyleClass\"></p-inputSwitch>\n  <span *ngIf=\"choice2\" class=\"switch-position\"\n    [ngClass]='{\"ui-label-selected\": isChecked(), \"ui-label-disabled\": isDisabled()}'> {{choice2}}</span>\n\n</div>\n",
                    styles: [":host ::ng-deep .ui-inputswitch .ui-inputswitch-slider:before{background-color:#256cb9}:host ::ng-deep .anef-switch.ui-inputswitch:hover .ui-inputswitch-slider{background-color:#94a9c2}:host ::ng-deep .anef-switch.ui-inputswitch .ui-inputswitch-slider{background-color:#aac5e3}:host ::ng-deep .anef-switch.ui-inputswitch.ui-inputswitch-checked.ui-inputswitch-focus .ui-inputswitch-slider{background:#aac5e3}:host ::ng-deep .anef-switch.ui-inputswitch.ui-inputswitch-checked:hover .ui-inputswitch-slider{background:#94a9c2}:host ::ng-deep .ui-state-disabled,:host ::ng-deep .ui-widget:disabled{opacity:.5!important;background-color:transparent}span.ui-label-selected{font-weight:700}span.ui-label-disabled{color:#c7c7c7}.switch-position{padding-left:.4em;padding-right:.4em;position:relative;top:-6px}"]
                }] }
    ];
    InputSwitchTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        disabled: [{ type: Input }],
        choice1: [{ type: Input }],
        choice2: [{ type: Input }],
        customStyleClass: [{ type: Input }],
        label: [{ type: Input }],
        change: [{ type: Output }]
    };
    return InputSwitchTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-switch-two-way-binding/input-switch-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSwitchTwoWayBindingModule = /** @class */ (function () {
    function InputSwitchTwoWayBindingModule() {
    }
    InputSwitchTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputSwitchTwoWayBindingComponent],
                    imports: [CommonModule, ReactiveFormsModule, InputSwitchModule, FormsModule],
                    exports: [InputSwitchTwoWayBindingComponent]
                },] }
    ];
    return InputSwitchTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/loader/loader.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoaderComponent = /** @class */ (function () {
    function LoaderComponent() {
    }
    LoaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'anef-loader',
                    template: "<div class=\"loading-indicator\" *ngIf=\"displayLoader\">\n    <div class=\"spinnerBox\">\n        <div class=\"spinner type2\"></div>\n    </div>\n</div>",
                    styles: [".loading-indicator{position:fixed;z-index:99999;height:13em;width:13em;overflow:show;margin:auto;top:0;left:0;bottom:0;right:0}.loading-indicator:before{content:'';display:block;position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.53)}.spinnerBox{position:relative;min-width:20rem;min-height:20rem;display:inline-block}"]
                }] }
    ];
    LoaderComponent.propDecorators = {
        displayLoader: [{ type: Input }]
    };
    return LoaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/loader.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoaderModule = /** @class */ (function () {
    function LoaderModule() {
    }
    LoaderModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [LoaderComponent],
                    imports: [
                        CommonModule,
                        SharedModule,
                        ProgressSpinnerModule,
                    ],
                    exports: [LoaderComponent]
                },] }
    ];
    return LoaderModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select-button-two-way-binding/input-select-button-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSelectButtonTwoWayBindingComponent = /** @class */ (function () {
    function InputSelectButtonTwoWayBindingComponent() {
        this.error = null;
        this.multiple = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
    Object.defineProperty(InputSelectButtonTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputSelectButtonTwoWayBindingComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.options) {
            return '-';
        }
        /** @type {?} */
        var selectedOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return _this.model === option.value; }));
        return selectedOption ? selectedOption.label : '-';
    };
    InputSelectButtonTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-select-button-two-way-binding',
                    template: "<label *ngIf=\"label\" for=\"{{guid}}\">\n  {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n</label>\n\n<div class=\"input\">\n  <div *ngIf=\"!readonly; else textual\" class=\"p-grid\">\n    <p-selectButton\n      (ngModelChange)=\"ngModelChange.emit($event)\"\n      [(ngModel)]=\"model\"\n      [multiple]=\"multiple\"\n      [ngClass]=\"{'error': error && error.length}\"\n      [options]=\"options\"\n      class=\"custom-input-select-button p-col-12\"\n      id=\"{{guid}}\"\n      name=\"{{guid}}\">\n    </p-selectButton>\n  </div>\n\n  <ng-template #textual>\n    <div>{{ toString() }}</div>\n  </ng-template>\n</div>\n\n<div *ngIf=\"error && error.length\" class=\"error redish\">\n  <div *ngFor=\"let errorLine of error\">\n    <p>\n      <i class=\"pi pi-info-circle\"></i>\n      <span>{{errorLine}}</span>\n    </p>\n  </div>\n</div>\n",
                    styles: ["label{color:#656565;font-size:1.4rem}.custom-input-select-button{margin-top:-.8rem}"]
                }] }
    ];
    InputSelectButtonTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        readonly: [{ type: Input }],
        required: [{ type: Input }],
        label: [{ type: Input }],
        multiple: [{ type: Input }],
        options: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputSelectButtonTwoWayBindingComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select-button-two-way-binding/input-select-button-two-way-binding.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputSelectButtonTwoWayBindingModule = /** @class */ (function () {
    function InputSelectButtonTwoWayBindingModule() {
    }
    InputSelectButtonTwoWayBindingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputSelectButtonTwoWayBindingComponent],
                    imports: [CommonModule, ReactiveFormsModule, SelectButtonModule, FormsModule],
                    exports: [InputSelectButtonTwoWayBindingComponent]
                },] }
    ];
    return InputSelectButtonTwoWayBindingModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-select/input-multi-select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputMultiSelectComponent = /** @class */ (function () {
    function InputMultiSelectComponent() {
        this.filter = false;
        this.maxSelectedItemsLabel = '{0} éléments sélectionnés';
        this.defaultLabel = 'Choisir';
    }
    InputMultiSelectComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'input-multi-select',
                    template: "<div class=\"p-grid nogutter\" *ngIf=[formGroup] [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" class=\"multi-select-label\" [htmlFor]=\"controlName\">\n      {{label}} :\n    </label>\n\n    <p-multiSelect\n      [filter]=\"filter\"\n      [defaultLabel]=\"defaultLabel\"\n      [selectedItemsLabel]=\"maxSelectedItemsLabel\"\n      [options]=\"option\"\n      [formControlName]=\"controlName\"\n      class=\"multiselect-custom\">\n      <ng-template let-item pTemplate=\"item\">\n        <div class=\"item-value\">\n          <i *ngIf=\"item.value.icon\" [ngClass]=item.value.icon></i>\n          <div> {{item.value.name}}</div>\n        </div>\n      </ng-template>\n    </p-multiSelect>\n  </div>\n</div>\n",
                    styles: ["label{color:#656565;font-size:1.4rem}:host ::ng-deep .p-multiselect{min-width:15rem}:host ::ng-deep .multiselect-custom-virtual-scroll .p-multiselect{min-width:20rem}:host ::ng-deep .multiselect-custom .p-multiselect-label{padding-top:.25rem;padding-bottom:.25rem}:host ::ng-deep .multiselect-custom .item-value{padding:.25rem .5rem;border-radius:3px;display:inline-flex;margin-right:.5rem;background-color:var(--primary-color);color:var(--primary-color-text)}:host ::ng-deep .multiselect-custom .item-value i{padding-right:8px;padding-top:2px}"]
                }] }
    ];
    InputMultiSelectComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        label: [{ type: Input }],
        option: [{ type: Input }],
        filter: [{ type: Input }],
        maxSelectedItemsLabel: [{ type: Input }],
        defaultLabel: [{ type: Input }]
    };
    return InputMultiSelectComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-select/input-multi-select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputMultiSelectModule = /** @class */ (function () {
    function InputMultiSelectModule() {
    }
    InputMultiSelectModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [InputMultiSelectComponent],
                    imports: [CommonModule, ReactiveFormsModule, CheckboxModule, MultiSelectModule],
                    exports: [InputMultiSelectComponent]
                },] }
    ];
    return InputMultiSelectModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/repeat-form/repeat-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RepeatFormComponent = /** @class */ (function () {
    function RepeatFormComponent(parentForm, formBuilder) {
        this.parentForm = parentForm;
        this.formBuilder = formBuilder;
        this.readOnly = false;
        this.required = true;
        this.minNumber = 1;
        this.inputNumberLabel = '';
        this.removeLabel = '';
        this.confirmLabel = '';
        this.errorMessages = {
            required: 'Ce champ est obligatoire',
            pattern: 'Le format n\'est pas correct',
            min: 'Le nombre de répétition n\'est pas assez grand',
            max: 'Le nombre de répétition est trop grand'
        };
        this.header = '';
        this.isFormTouched = false;
        this.entreprisesSizeVide = false;
        this.addedForm = new EventEmitter();
        this.addedFormZero = new EventEmitter();
        this.numberRegexPattern = /^\d+$/;
        this.isMinZeroReadOnly = false;
    }
    /**
     * @return {?}
     */
    RepeatFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initForm();
        this.patchForm();
        this.patchFormSizeVide();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    RepeatFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.isFormTouched) {
            this.formSize.controls['SIZE'].markAsTouched();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RepeatFormComponent.prototype.initForm = /**
     * @private
     * @return {?}
     */
    function () {
        this.form = (/** @type {?} */ (this.parentForm.form.get(this.controlName)));
        /** @type {?} */
        var validators = this.buildSizeValidators();
        this.formSize = this.formBuilder.group({
            SIZE: ['', validators]
        });
        if (this.readOnly) {
            this.formSize.disable();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RepeatFormComponent.prototype.patchForm = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var initialFormSize = this.form.length === 0 ? '' : this.form.length;
        this.formSize.get('SIZE').setValue(initialFormSize);
        if (initialFormSize) {
            this.confirmSize();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RepeatFormComponent.prototype.patchFormSizeVide = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.minNumber == 0 && this.entreprisesSizeVide) {
            /** @type {?} */
            var initialFormSize = this.form.length;
            this.formSize.get('SIZE').setValue('0');
            this.isMinZeroReadOnly = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    RepeatFormComponent.prototype.buildSizeValidators = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validators = [Validators.pattern(this.numberRegexPattern)];
        if (this.required) {
            validators.push(Validators.required);
        }
        if (this.minNumber) {
            validators.push(Validators.min(this.minNumber));
        }
        if (this.maxNumber && this.maxNumber > 0) {
            validators.push(Validators.max(this.maxNumber));
        }
        return validators;
    };
    /**
     * @return {?}
     */
    RepeatFormComponent.prototype.confirmSize = /**
     * @return {?}
     */
    function () {
        this.formSize.get('SIZE').markAsTouched();
        if (this.formSize.valid) {
            while (!this.isMaxSizeReached() && !this.isMinSizeZero()) {
                this.addElement();
            }
            if (this.isMinSizeZero()) {
                this.isMinZeroReadOnly = true;
                this.addedFormZero.emit(true);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    RepeatFormComponent.prototype.addElement = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newForm = this.formBuilder.group({});
        this.form.push(newForm);
        this.addedForm.emit(newForm);
    };
    /**
     * @return {?}
     */
    RepeatFormComponent.prototype.clearAllElements = /**
     * @return {?}
     */
    function () {
        this.resetFormIsMinSizeZero();
        while (this.form.length > 0) {
            this.form.removeAt(0);
        }
    };
    /**
     * @private
     * @return {?}
     */
    RepeatFormComponent.prototype.resetFormIsMinSizeZero = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isMinSizeZero()) {
            this.isMinZeroReadOnly = false;
            this.formSize.get('SIZE').reset();
        }
    };
    /**
     * @return {?}
     */
    RepeatFormComponent.prototype.isMaxSizeReached = /**
     * @return {?}
     */
    function () {
        if (this.isMinZeroReadOnly) {
            return true;
        }
        return this.formSize.valid && this.size >= this.formSize.get('SIZE').value && this.formSize.get('SIZE').value > 0;
    };
    Object.defineProperty(RepeatFormComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RepeatFormComponent.prototype.isMinSizeZero = /**
     * @return {?}
     */
    function () {
        return this.minNumber == 0 && parseInt(this.formSize.get('SIZE').value, 10) === 0;
    };
    RepeatFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'anef-repeat-form',
                    template: "<div>\n  <div class=\"p-grid form-element\" [ngClass]=\"{'on-error': !formSize.valid}\">\n    <div class=\"p-col-12 responsiv-md\">\n      <div class=\"p-col-fixed\">\n        <anef-input-text\n          class=\"amount\"\n          [required]=\"required\"\n          [readonly]=\"readOnly || isMaxSizeReached()\"\n          [formGroup]=\"formSize\"\n          [label]=\"inputNumberLabel\"\n          controlName=\"SIZE\"\n          [maxLength]= \"5\"\n          [messages]=\"{\n            required: 'Ce champ est obligatoire',\n            pattern: 'Le format n\\'est pas correct',\n            min: 'Le nombre de r\u00E9p\u00E9tition n\\'est pas assez grand',\n            max: 'Le nombre de r\u00E9p\u00E9tition est trop grand'\n          }\">\n        </anef-input-text>\n      </div>\n      <div>\n        <legend class=\"label\" *ngIf=\"size >= 1 && !readOnly || isMinSizeZero() && isMinZeroReadOnly && !readOnly\">\n          <span class=\"remove\" (click)=\"clearAllElements()\">\n            <i class=\"fa fa-close\" aria-hidden=\"true\"></i>\n            {{ removeLabel }}\n          </span>\n        </legend>\n      </div>\n\n    </div>\n\n    <div class=\"p-col-12\" *ngIf=\"!isMaxSizeReached() && !readOnly\">\n      <button pButton\n        label=\"{{ confirmLabel }}\"\n        (click)=\"confirmSize()\"\n        class=\"ui-button-secondary custom-responsiv\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"list-element p-grid wraper\" [ngClass]=\"{first: i==0, editable: !readOnly}\"\n    *ngFor=\"let subform of this.form['controls']; let i=index;\">\n    <fieldset class=\"full-width\">\n      <legend class=\"label\">\n        <ng-container *ngIf=\"header\">\n          {{ header }} {{i+1}}\n        </ng-container>\n      </legend>\n\n      <ng-container [ngTemplateOutlet]='template' [ngTemplateOutletContext]='{ $implicit: subform, idx: i  }'></ng-container>\n    </fieldset>\n  </div>\n</div>\n",
                    styles: [".list-element{display:flex;flex-flow:row;flex-wrap:wrap;margin-top:0}.list-element .full-width{width:100%}.list-element .label{color:#417f90;font-size:1.2em;font-weight:700;padding:.5em}.list-element.editable .label{padding-top:.7em}.important{font-weight:700}.ui-button-secondary{background-color:#fff!important;color:#256cb9!important;border-color:#256cb9!important;text-align:center;margin:auto}fieldset legend{margin:0;padding:0;border:0}.remove{cursor:pointer;color:#d13721;font-size:1em;display:block;float:right;margin-top:-2.3em;position:relative;z-index:2}.remove .fa-close{font-weight:700;font-size:1em;margin-right:.4;margin-left:2em}::ng-deep .amount input,::ng-deep .amount span.textual{width:10em!important;display:block}::ng-deep .amount label{font-weight:200;width:100%}::ng-deep .amount .redish.errors.ng-star-inserted{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    RepeatFormComponent.ctorParameters = function () { return [
        { type: FormGroupDirective },
        { type: FormBuilder }
    ]; };
    RepeatFormComponent.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        readOnly: [{ type: Input }],
        required: [{ type: Input }],
        maxNumber: [{ type: Input }],
        minNumber: [{ type: Input }],
        inputNumberLabel: [{ type: Input }],
        removeLabel: [{ type: Input }],
        confirmLabel: [{ type: Input }],
        errorMessages: [{ type: Input }],
        controlName: [{ type: Input }],
        header: [{ type: Input }],
        isFormTouched: [{ type: Input }],
        entreprisesSizeVide: [{ type: Input }],
        addedForm: [{ type: Output }],
        addedFormZero: [{ type: Output }]
    };
    return RepeatFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/repeat-form/repeat-form.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RepeatFormModule = /** @class */ (function () {
    function RepeatFormModule() {
    }
    RepeatFormModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [RepeatFormComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        InputTextModule$1,
                        ButtonModule
                    ],
                    exports: [RepeatFormComponent]
                },] }
    ];
    return RepeatFormModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/full-calendar/full-calendar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FullCalendarComponent = /** @class */ (function () {
    function FullCalendarComponent() {
        this.eventClick = new EventEmitter();
        this.dateClick = new EventEmitter();
        this.eventDrop = new EventEmitter();
        this.eventResize = new EventEmitter();
        this.dateRender = new EventEmitter();
        this.slotDuration = '00:15:00';
        this.minTime = '06:00:00';
        this.maxTime = '20:00:00';
        this.scrollTime = '08:00:00';
        this.editable = true;
        this.snapMinutes = 15;
        this.businessHours = true;
        this.firstHour = true;
        this.timeFormat = 'H:mm';
    }
    /**
     * @return {?}
     */
    FullCalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = {
            plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],
            defaultView: this.viewCalendar(),
            defaultDate: moment().format('YYYY-MM-DD'),
            locales: allLocales,
            locale: 'fr',
            slotDuration: this.slotDuration,
            allDaySlot: false,
            minTime: this.minTime,
            maxTime: this.maxTime,
            scrollTime: this.maxTime,
            snapMinutes: this.snapMinutes,
            businessHours: this.businessHours,
            firstHour: this.firstHour,
            timeFormat: this.timeFormat,
            header: {
                right: 'today, prev,next',
                center: 'title',
                left: 'dayGridMonth,timeGridWeek,timeGridDay',
            },
            editable: this.editable,
            dateClick: this.datatClickA.bind(this),
            eventClick: this.eventClickB.bind(this),
            eventResize: this.eventResizeA.bind(this),
            eventDrop: this.eventDropA.bind(this),
            datesRender: this.dateRenderA.bind(this),
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FullCalendarComponent.prototype.eventDropA = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.eventDrop.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FullCalendarComponent.prototype.eventResizeA = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.eventResize.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FullCalendarComponent.prototype.datatClickA = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dateClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FullCalendarComponent.prototype.eventClickB = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.eventClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FullCalendarComponent.prototype.dateRenderA = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dateRender.emit(event);
    };
    /**
     * @return {?}
     */
    FullCalendarComponent.prototype.viewCalendar = /**
     * @return {?}
     */
    function () {
        if (this.dayCalander) {
            return 'timeGridDay';
        }
        if (this.weekCalander) {
            return 'timeGridWeek';
        }
        return 'dayGridMonth';
    };
    Object.defineProperty(FullCalendarComponent.prototype, "calendarApi", {
        get: /**
         * @return {?}
         */
        function () {
            this._calendarApi = this.calendar.getApi();
            return this._calendarApi;
        },
        enumerable: true,
        configurable: true
    });
    FullCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-full-calendar',
                    template: "<p-fullCalendar [events]=\"events\" #calendar\n[options]=\"options\"\n(eventClick)=\" eventClickB($event)\"\n(dateClick)=\"datatClickA($event)\"\n(eventResize)=\"eventResizeA($event)\"\n>\n</p-fullCalendar>\n",
                    styles: ["::ng-deep .fc .fc-toolbar .fc-button-group .fc-button{background-color:#f5f5f5;color:#007ad9}::ng-deep .fc .fc-toolbar .fc-button:focus-within{background-color:#007ad9!important;color:#f5f5f5!important}"]
                }] }
    ];
    /** @nocollapse */
    FullCalendarComponent.ctorParameters = function () { return []; };
    FullCalendarComponent.propDecorators = {
        events: [{ type: Input }],
        eventClick: [{ type: Output }],
        dateClick: [{ type: Output }],
        eventDrop: [{ type: Output }],
        eventResize: [{ type: Output }],
        dateRender: [{ type: Output }],
        dayCalander: [{ type: Input }],
        weekCalander: [{ type: Input }],
        slotDuration: [{ type: Input }],
        minTime: [{ type: Input }],
        maxTime: [{ type: Input }],
        scrollTime: [{ type: Input }],
        editable: [{ type: Input }],
        snapMinutes: [{ type: Input }],
        businessHours: [{ type: Input }],
        firstHour: [{ type: Input }],
        timeFormat: [{ type: Input }],
        calendar: [{ type: ViewChild, args: ['calendar',] }]
    };
    return FullCalendarComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/full-calendar/full-calendar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FullAnfCalendarModule = /** @class */ (function () {
    function FullAnfCalendarModule() {
    }
    FullAnfCalendarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FullCalendarComponent],
                    imports: [
                        CommonModule,
                        FullCalendarModule,
                        CalendarModule,
                        TabViewModule,
                        FormsModule
                    ],
                    exports: [FullCalendarComponent]
                },] }
    ];
    return FullAnfCalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/edit-text-by-pencil/edit-text-by-pencil.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTextByPencilComponent = /** @class */ (function () {
    function EditTextByPencilComponent() {
        this.isInputDisplayed = false;
    }
    /**
     * @return {?}
     */
    EditTextByPencilComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    EditTextByPencilComponent.prototype.onPencilClick = /**
     * @return {?}
     */
    function () {
        this.isInputDisplayed = !this.isInputDisplayed;
    };
    EditTextByPencilComponent.decorators = [
        { type: Component, args: [{
                    selector: 'edit-text-by-pencil',
                    template: "<div>\n  <div class=\"wrapper\">\n    <span *ngIf=\"labelForm\" class=\"content-text\">\n      {{ labelForm.value }}\n    </span>\n    <i\u00A0(click)=\"onPencilClick()\" class=\"fa fa-pencil\"></i>\n    <div>\n      <input pInputText *ngIf=\"isInputDisplayed\" type=\"text\" [formControl]=\"labelForm\" />\n    </div>\n    <div class=\"button-group\" *ngIf=\"isInputDisplayed\">\n      <span class=\"validate\">\n        <i class=\"fa fa-check-circle\"></i>\n        <span>VALIDER</span>\n      </span>\n      <span class=\"delete\">\n        <i class=\"fa fa-close\"></i>\n        <span>SUPPRIMER</span>\n      </span>\n    </div>\n  </div>\n\n</div>\n",
                    styles: [".fa.fa-pencil{color:#256cb9;float:right;cursor:pointer}.delete{color:#d13721;padding-left:.9rem}.validate{color:#107d11}.button-group span{opacity:1;cursor:pointer;text-align:left;font-weight:700;font-size:1.4rem;letter-spacing:0;text-transform:uppercase;font-family:robotoregular,\"Helvetica Neue\",sans-serif;margin-left:.3rem}"]
                }] }
    ];
    EditTextByPencilComponent.propDecorators = {
        labelForm: [{ type: Input }]
    };
    return EditTextByPencilComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/edit-text-by-pencil/edit-text-by-pencil.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTextByPencilModule = /** @class */ (function () {
    function EditTextByPencilModule() {
    }
    EditTextByPencilModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        EditTextByPencilComponent,
                    ],
                    imports: [
                        CommonModule,
                        BrowserModule,
                        FormsModule,
                        ReactiveFormsModule,
                        ButtonModule,
                        InputTextModule
                    ],
                    exports: [EditTextByPencilComponent]
                },] }
    ];
    return EditTextByPencilModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: anef-ui.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SharedModule, BreadcrumbModule$1 as BreadcrumbModule, BreadcrumbComponent, TileModule, TileComponent, NavigationBarModule, NavigationBarComponent, ErrorModalComponent, ErrorModalModule, SuccessModalModule, SuccessModalComponent, ConfirmModalModule, ConfirmModalComponent, InformationModalComponent, InformationModalModule, GenericModalComponent, GenericModalModule, ModalRadioModule, InputDateModule, InputDateComponent, InputDateApproxModule, InputDateApproxComponent, InputTextModule$1 as InputTextModule, InputTextComponent, InputSelectModule, InputSelectComponent, InputRadioModule, InputRadioComponent, InputCheckModule, InputCheckComponent, InputTextareaModule$1 as InputTextareaModule, InputTextareaComponent, InputDateTwoWayBindingModule, InputDateTwoWayBindingComponent, InputTextTwoWayBindingModule, InputTextTwoWayBindingComponent, InputMultiTextTwoWayBindingModule, InputMultiTextTwoWayBindingComponent, InputSelectTwoWayBindingModule, InputSelectTwoWayBindingComponent, InputMultiSelectTwoWayBindingModule, InputMultiSelectTwoWayBindingComponent, InputRadioTwoWayBindingModule, InputRadioTwoWayBindingComponent, InputCheckTwoWayBindingModule, InputCheckTwoWayBindingComponent, InputTextareaTwoWayBindingModule, InputTextareaTwoWayBindingComponent, VerticalMenuModule, VerticalMenuComponent, SideBarModule, SideBarType, SideBarComponent, InputSwitchModule$1 as InputSwitchModule, InputSwitchComponent, InputSwitchTwoWayBindingModule, InputSwitchTwoWayBindingComponent, LoaderModule, InputSelectButtonTwoWayBindingModule, InputSelectButtonTwoWayBindingComponent, InputMultiSelectModule, InputMultiSelectComponent, RepeatFormModule, RepeatFormComponent, FullAnfCalendarModule, FullCalendarComponent, EditTextByPencilModule, EditTextByPencilComponent, LoaderComponent as ɵd, ModalRadioComponent as ɵc, TrimPipe as ɵa, Truncate as ɵb };

//# sourceMappingURL=anef-ui.js.map