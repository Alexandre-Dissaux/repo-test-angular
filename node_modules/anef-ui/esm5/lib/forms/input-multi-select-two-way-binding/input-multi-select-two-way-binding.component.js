/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-select-two-way-binding/input-multi-select-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { isEqual } from 'lodash';
import { generateGuid } from '../../shared/guid';
var InputMultiSelectTwoWayBindingComponent = /** @class */ (function () {
    function InputMultiSelectTwoWayBindingComponent() {
        this.error = null;
        this.required = false;
        this.readonly = false;
        this.options = [];
        this.filter = false;
        this.limit = Infinity;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.value = [];
    }
    Object.defineProperty(InputMultiSelectTwoWayBindingComponent.prototype, "model", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputMultiSelectTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.onModelChange = /**
     * @return {?}
     */
    function () {
        this.ngModelChange.emit(this.value);
    };
    /**
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.addItem = /**
     * @return {?}
     */
    function () {
        this.value.push(null);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.deleteItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.value.splice(index, 1);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputMultiSelectTwoWayBindingComponent.prototype.toString = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var selectedOption = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return isEqual(value, option.value); }));
        return (selectedOption && selectedOption.label) ? selectedOption.label : '-';
    };
    InputMultiSelectTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-multi-select-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}-0\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div [ngClass]=\"\" class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <p-dropdown (ngModelChange)=\"onModelChange()\"\n                      [(ngModel)]=\"value[0]\"\n                      [filter]=\"filter\"\n                      [ngClass]=\"{\n                        'error': error && error.length,\n                        'fluid': value.length == 0\n                      }\"\n                      [options]=\"options\"\n                      [placeholder]=\"placeholder\"\n                      [required]=\"required\"\n                      class=\"p-col-11\"\n                      filter=\"true\"\n                      id=\"{{guid}}-0\"\n                      name=\"{{guid}}-0\">\n          </p-dropdown>\n\n          <span\n            (click)=\"deleteItem(0)\"\n            *ngIf=\"value.length\"\n            class=\"delete-button\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <div *ngFor=\"let valueItem of value | slice:1; index as i\" class=\"p-grid p-align-center additional-input\">\n          <p-dropdown (ngModelChange)=\"onModelChange()\"\n                      [(ngModel)]=\"value[i+1]\"\n                      [filter]=\"filter\"\n                      [ngClass]=\"{'error': error && error.length}\"\n                      [options]=\"options\"\n                      [placeholder]=\"placeholder\"\n                      [required]=\"required\"\n                      class=\"p-col-11\"\n                      filter=\"true\"\n                      id=\"{{guid}}-{{i+1}}\"\n                      name=\"{{guid}}-{{i+1}}\">\n          </p-dropdown>\n\n          <span\n            (click)=\"deleteItem(i+1)\"\n            class=\"delete-button\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <button (click)=\"addItem()\"\n                *ngIf=\"value[value.length - 1] && value.length < limit\"\n                class=\"ui-button-borderless add-item\"\n                pButton>\n          {{addItemLabel}}\n        </button>\n      </div>\n\n      <ng-template #textual>\n        <ul class=\"item-readonly textual\">\n          <li>{{ toString(value[0]) }}</li>\n          <li *ngFor=\"let valueItem of value | slice:1;\">{{ toString(valueItem) }}</li>\n        </ul>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".item-readonly{list-style-type:none;padding:0;margin:0}.additional-input{margin-top:1rem}label{color:#656565;font-size:1.4rem}.delete-button{cursor:pointer;color:#d13721;font-size:1.2rem;margin-bottom:7px;margin-left:5px}p-dropdown{margin-top:-.5rem}p-dropdown.fluid{width:100%}.textual{margin-top:7px}"]
                }] }
    ];
    InputMultiSelectTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input, args: ['model',] }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        url: [{ type: Input }],
        filter: [{ type: Input }],
        limit: [{ type: Input }],
        errors: [{ type: Input }],
        addItemLabel: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputMultiSelectTwoWayBindingComponent;
}());
export { InputMultiSelectTwoWayBindingComponent };
if (false) {
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.error;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.placeholder;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.options;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.url;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.filter;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.limit;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.addItemLabel;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.guid;
    /** @type {?} */
    InputMultiSelectTwoWayBindingComponent.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbXVsdGktc2VsZWN0LXR3by13YXktYmluZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmVmLXVpLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2lucHV0LW11bHRpLXNlbGVjdC10d28td2F5LWJpbmRpbmcvaW5wdXQtbXVsdGktc2VsZWN0LXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3ZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFakMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWpEO0lBQUE7UUFPRSxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBS0osYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBR2pCLFlBQU8sR0FBaUIsRUFBRSxDQUFDO1FBRTNCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDZixVQUFLLEdBQUcsUUFBUSxDQUFDO1FBV2hCLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU3QyxTQUFJLEdBQUcsWUFBWSxFQUFFLENBQUM7UUFDdEIsVUFBSyxHQUFVLEVBQUUsQ0FBQztJQWtCcEIsQ0FBQztJQTFDQyxzQkFBb0IseURBQUs7Ozs7O1FBQXpCLFVBQTBCLEtBQVU7WUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBU0Qsc0JBQWEsMERBQU07Ozs7O1FBQW5CLFVBQW9CLE1BQThCO1lBQ2hELElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7YUFDbkI7aUJBQU0sSUFBSSxPQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7YUFDckI7UUFDSCxDQUFDOzs7T0FBQTs7OztJQU9ELDhEQUFhOzs7SUFBYjtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsd0RBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCwyREFBVTs7OztJQUFWLFVBQVcsS0FBYTtRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCx5REFBUTs7OztJQUFSLFVBQVMsS0FBVTs7WUFDWCxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBNUIsQ0FBNEIsRUFBQztRQUNoRixPQUFPLENBQUMsY0FBYyxJQUFJLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQy9FLENBQUM7O2dCQWxERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSx5Q0FBeUM7b0JBQ25ELG0yRkFBa0U7O2lCQUVuRTs7O3dCQUlFLEtBQUssU0FBQyxPQUFPOzJCQUdiLEtBQUs7MkJBQ0wsS0FBSzt3QkFDTCxLQUFLOzhCQUNMLEtBQUs7MEJBQ0wsS0FBSztzQkFDTCxLQUFLO3lCQUNMLEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLOytCQVNMLEtBQUs7Z0NBQ0wsTUFBTTs7SUFxQlQsNkNBQUM7Q0FBQSxBQW5ERCxJQW1EQztTQTdDWSxzQ0FBc0M7OztJQUNqRCx1REFBYTs7SUFLYiwwREFBMEI7O0lBQzFCLDBEQUEwQjs7SUFDMUIsdURBQXVCOztJQUN2Qiw2REFBNkI7O0lBQzdCLHlEQUFvQzs7SUFDcEMscURBQXFCOztJQUNyQix3REFBd0I7O0lBQ3hCLHVEQUEwQjs7SUFVMUIsOERBQThCOztJQUM5QiwrREFBNkM7O0lBRTdDLHNEQUFzQjs7SUFDdEIsdURBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU2VsZWN0SXRlbSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZUd1aWQgfSBmcm9tICcuLi8uLi9zaGFyZWQvZ3VpZCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2FuZWYtaW5wdXQtbXVsdGktc2VsZWN0LXR3by13YXktYmluZGluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1tdWx0aS1zZWxlY3QtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtbXVsdGktc2VsZWN0LXR3by13YXktYmluZGluZy5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dE11bHRpU2VsZWN0VHdvV2F5QmluZGluZ0NvbXBvbmVudCB7XG4gIGVycm9yID0gbnVsbDtcblxuICBASW5wdXQoJ21vZGVsJykgc2V0IG1vZGVsKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUgfHzCoFtdO1xuICB9XG4gIEBJbnB1dCgpIHJlcXVpcmVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG9wdGlvbnM6IFNlbGVjdEl0ZW1bXSA9IFtdO1xuICBASW5wdXQoKSB1cmw6IHN0cmluZztcbiAgQElucHV0KCkgZmlsdGVyID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxpbWl0ID0gSW5maW5pdHk7XG4gIEBJbnB1dCgpIHNldCBlcnJvcnMoZXJyb3JzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+KSB7XG4gICAgaWYgKCFlcnJvcnMpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKGVycm9ycykgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVycm9yID0gW2Vycm9yc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcnM7XG4gICAgfVxuICB9XG4gIEBJbnB1dCgpIGFkZEl0ZW1MYWJlbDogc3RyaW5nO1xuICBAT3V0cHV0KCkgbmdNb2RlbENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBndWlkID0gZ2VuZXJhdGVHdWlkKCk7XG4gIHZhbHVlOiBhbnlbXSA9IFtdO1xuXG4gIG9uTW9kZWxDaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICBhZGRJdGVtKCk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUucHVzaChudWxsKTtcbiAgfVxuXG4gIGRlbGV0ZUl0ZW0oaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMudmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHRvU3RyaW5nKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gdGhpcy5vcHRpb25zLmZpbmQob3B0aW9uID0+IGlzRXF1YWwodmFsdWUsIG9wdGlvbi52YWx1ZSkpO1xuICAgIHJldHVybiAoc2VsZWN0ZWRPcHRpb24gJiYgc2VsZWN0ZWRPcHRpb24ubGFiZWwpID8gc2VsZWN0ZWRPcHRpb24ubGFiZWwgOiAnLSc7XG4gIH1cbn1cbiJdfQ==