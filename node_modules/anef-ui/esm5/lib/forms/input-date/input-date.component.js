/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-date/input-date.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { merge, Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import moment from 'moment';
var InputDateComponent = /** @class */ (function () {
    function InputDateComponent() {
        this.notifier = new Subject();
        this.unknownMonthItem = { label: 'Inconnu', value: 'i' };
        this.required = false;
        this.readonly = false;
        this.defaultDisplay = 'N/A';
        this.dayLabel = 'Jour';
        this.dayPlaceholder = 'JJ';
        this.monthLabel = 'Mois';
        this.monthPlaceholder = 'MM';
        this.yearLabel = 'Année';
        this.yearPlaceholder = 'AAAA';
        this.monthOptions = [
            { label: 'Janvier', value: 1 },
            { label: 'Février', value: 2 },
            { label: 'Mars', value: 3 },
            { label: 'Avril', value: 4 },
            { label: 'Mai', value: 5 },
            { label: 'Juin', value: 6 },
            { label: 'Juillet', value: 7 },
            { label: 'Août', value: 8 },
            { label: 'Septembre', value: 9 },
            { label: 'Octobre', value: 10 },
            { label: 'Novembre', value: 11 },
            { label: 'Décembre', value: 12 }
        ];
        this.messages = {
            day: {
                required: 'Le jour est requis',
                pattern: 'Le jour doit être un nombre',
                length: 'Le jour doit contenir 2 chiffres au maximum',
                minMax: 'Le jour doit être compris entre 1 et 31'
            },
            month: {
                required: 'Le mois est requis'
            },
            year: {
                required: 'L\'année est requise',
                pattern: 'L\'année doit être un nombre',
                length: 'L\'année doit contenir 4 chiffres'
            },
            invalid: 'La date est invalide'
        };
    }
    /**
     * @return {?}
     */
    InputDateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dayChanges = this.formGroup.get(this.dayName).valueChanges;
        /** @type {?} */
        var monthChanges = this.formGroup.get(this.monthName).valueChanges;
        /** @type {?} */
        var yearChanges = this.formGroup.get(this.yearName).valueChanges;
        this.dateChanges = merge(dayChanges, monthChanges, yearChanges);
        this.dateValidityChange();
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.notifier.next();
        this.notifier.unsubscribe();
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.formContainsErrors = /**
     * @return {?}
     */
    function () {
        return (this.controlContainsErrors(this.dayName) ||
            this.controlContainsErrors(this.monthName) ||
            this.controlContainsErrors(this.yearName));
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.controlContainsErrors = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.formGroup && (this.formGroup.controls[controlName].errors !== null && this.formGroup.controls[controlName].dirty);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasPatternError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.pattern;
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasMinMaxError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.min || this.formGroup.controls[controlName].errors.max);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasLengthError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) &&
            (this.formGroup.controls[controlName].errors.minlength || this.formGroup.controls[controlName].errors.maxlength);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasRequiredError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.required;
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    InputDateComponent.prototype.hasInvalidDateError = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return this.controlContainsErrors(controlName) && this.formGroup.controls[controlName].errors.invalidDate;
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.dateValidityChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dateChanges.pipe(debounceTime(200), takeUntil(this.notifier)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.resetErrors();
            /** @type {?} */
            var day = Number(_this.formGroup.get(_this.dayName).value);
            /** @type {?} */
            var month = _this.formGroup.get(_this.monthName).value - 1;
            /** @type {?} */
            var year = Number(_this.formGroup.get(_this.yearName).value);
            _this.checkDateValidity(day, month, year);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    InputDateComponent.prototype.getFields = /**
     * @private
     * @return {?}
     */
    function () {
        return { day: this.formGroup.get(this.dayName).value, month: this.getMonthValue(true), year: this.formGroup.get(this.yearName).value };
    };
    /*** Returns FormGroup month field value */
    /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    InputDateComponent.prototype.getMonthValue = /**
     * Returns FormGroup month field value
     * @private
     * @param {?=} correctForMoment
     * @return {?}
     */
    function (correctForMoment) {
        /** @type {?} */
        var value = this.formGroup.get(this.monthName).value;
        if (value === this.unknownMonthItem.value) {
            value = 1;
        }
        if (correctForMoment) {
            return value - 1;
        }
        return value;
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.areFieldsFilled = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fields = this.getFields();
        return fields.day != null && fields.month != -1 && fields.year != null;
    };
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    InputDateComponent.prototype.checkDateValidity = /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (day, month, year) {
        /** @type {?} */
        var fields = this.getFields();
        if (this.areFieldsFilled() && !moment([year, month, day]).isValid()) {
            this.formGroup.get(this.yearName).setErrors({ invalidDate: true }, { emitEvent: true });
            this.formGroup.get(this.monthName).setErrors({ invalidDate: true }, { emitEvent: true });
            this.formGroup.get(this.dayName).setErrors({ invalidDate: true }, { emitEvent: true });
            this.formGroup.setErrors({ invalidDate: true }, { emitEvent: true });
            if ((this.required || this.yearRequired) && this.areFieldsFilled()) {
                return { invalidDate: true };
            }
        }
        if (moment([fields.year, fields.month, fields.day]).isValid()) {
            this.formGroup.setErrors(null);
            this.formGroup.get(this.yearName).setErrors(null);
            this.formGroup.get(this.monthName).setErrors(null);
            this.formGroup.get(this.dayName).setErrors(null);
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    InputDateComponent.prototype.resetErrors = /**
     * @private
     * @return {?}
     */
    function () {
        this.formGroup.get(this.dayName).setErrors(null);
        this.formGroup.get(this.monthName).setErrors(null);
        this.formGroup.get(this.yearName).setErrors(null);
    };
    /**
     * @return {?}
     */
    InputDateComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = '';
        /** @type {?} */
        var day = Number(this.formGroup.get(this.dayName).value);
        result += day ? ('0' + day).slice(-2) + '/' : '';
        /** @type {?} */
        var month = Number(this.formGroup.get(this.monthName).value);
        result += month ? ('0' + month).slice(-2) + '/' : '';
        /** @type {?} */
        var year = Number(this.formGroup.get(this.yearName).value);
        result += year;
        return result === '0' ? this.defaultDisplay : result;
    };
    InputDateComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-date',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <fieldset>\n      <legend *ngIf=\"label\">\n        {{ label }} <span class=\"redish\" *ngIf=\"required\">*</span> :\n      </legend>\n\n      <ng-content select=\"[sub-label]\"></ng-content>\n\n      <div *ngIf=\"!readonly; else textual\" class=\"p-grid\">\n        <div class=\"p-col-12 p-md-2\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"dayHelpBlock\">{{ dayLabel }} :\n              </label>\n              <input pInputText [id]=\"dayName\" [name]=\"dayName\" type=\"text\" class=\"day\"\n                     placeholder=\"{{ dayPlaceholder}}\" aria-describedby=\"dayHelpBlock\"\n                     [formControlName]=\"dayName\" pattern=\"[0-9]{0,2}\" maxlength=\"2\">\n            </div>\n          </div>\n        </div>\n        <div class=\"p-col-12 p-md-6\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"monthHelpBlock\">{{ monthLabel }} :\n              </label>\n              <p-dropdown class=\"month-dropdown\" [id]=\"monthName\" [name]=\"monthName\" aria-describedby=\"monthHelpBlock\"\n                          [placeholder]=monthPlaceholder [options]=monthOptions\n                          [formControlName]=\"monthName\">\n              </p-dropdown>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"p-col-12 p-md-4\">\n          <div class=\"p-grid nogutter\">\n            <div class=\"p-col-12\">\n              <label id=\"yearHelpBlock\">{{ yearLabel}}\n                <span class=\"redish\" *ngIf=\"yearRequired\"> *</span> :\n              </label>\n              <input pInputText [id]=\"yearName\" [name]=\"yearName\" type=\"text\" placeholder=\"{{ yearPlaceholder }}\"\n                     pattern=\"[0-9]{0,4}\" minlength=\"4\" maxlength=\"4\"\n                     aria-describedby=\"yearHelpBlock\" [formControlName]=\"yearName\">\n            </div>\n          </div>\n        </div>\n      </div>\n      <ng-template #textual>\n        <span class=\"textual\">{{toString()}}</span>\n      </ng-template>\n\n      <ng-content select=\"[complement]\"></ng-content>\n\n      <div class=\"redish errors\" *ngIf=\"formContainsErrors()\">\n        <div *ngIf=\"controlContainsErrors(dayName)\">\n          <div *ngIf=\"hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasMinMaxError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.minMax}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(dayName) && !hasPatternError(dayName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.day.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(monthName)\">\n          <div *ngIf=\"hasRequiredError(monthName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.month.required}}\n            </span>\n          </div>\n        </div>\n        <div *ngIf=\"controlContainsErrors(yearName)\">\n          <div *ngIf=\"hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.pattern}}\n            </span>\n          </div>\n          <div *ngIf=\"hasLengthError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.length}}\n            </span>\n          </div>\n          <div *ngIf=\"hasRequiredError(yearName) && !hasPatternError(yearName)\">\n            <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n            <span>\n              {{messages.year.required}}\n            </span>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasInvalidDateError(dayName) || hasInvalidDateError(monthName) || hasInvalidDateError(yearName)\"><i\n          class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span>\n              {{messages.invalid}}\n          </span>\n        </div>\n\n        <ng-content select=\"[messages]\"></ng-content>\n      </div>\n    </fieldset>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}.day{padding-left:1rem;padding-right:1rem;min-width:4rem}#dayHelpBlock{white-space:nowrap}fieldset{border-color:transparent;border-width:0;padding:0}legend{-webkit-padding-start:0;padding-inline-start:0;padding-bottom:1rem}.p-grid label{margin:0;color:#656565}body .ui-dropdown-panel .ui-dropdown-items .ui-dropdown-item span:first{color:#656565}::-webkit-input-placeholder{color:#111}:-moz-placeholder{color:#111}::-moz-placeholder{color:#111}:-ms-input-placeholder{color:#111}"]
                }] }
    ];
    /** @nocollapse */
    InputDateComponent.ctorParameters = function () { return []; };
    InputDateComponent.propDecorators = {
        formGroup: [{ type: Input }],
        label: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        dayName: [{ type: Input }],
        dayLabel: [{ type: Input }],
        dayPlaceholder: [{ type: Input }],
        monthName: [{ type: Input }],
        monthLabel: [{ type: Input }],
        monthPlaceholder: [{ type: Input }],
        yearName: [{ type: Input }],
        yearRequired: [{ type: Input }],
        yearLabel: [{ type: Input }],
        yearPlaceholder: [{ type: Input }],
        model: [{ type: Input }],
        monthOptions: [{ type: Input }],
        messages: [{ type: Input }]
    };
    return InputDateComponent;
}());
export { InputDateComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputDateComponent.prototype.notifier;
    /**
     * @type {?}
     * @private
     */
    InputDateComponent.prototype.dateChanges;
    /**
     * @type {?}
     * @private
     */
    InputDateComponent.prototype.unknownMonthItem;
    /** @type {?} */
    InputDateComponent.prototype.formGroup;
    /** @type {?} */
    InputDateComponent.prototype.label;
    /** @type {?} */
    InputDateComponent.prototype.required;
    /** @type {?} */
    InputDateComponent.prototype.readonly;
    /** @type {?} */
    InputDateComponent.prototype.defaultDisplay;
    /** @type {?} */
    InputDateComponent.prototype.dayName;
    /** @type {?} */
    InputDateComponent.prototype.dayLabel;
    /** @type {?} */
    InputDateComponent.prototype.dayPlaceholder;
    /** @type {?} */
    InputDateComponent.prototype.monthName;
    /** @type {?} */
    InputDateComponent.prototype.monthLabel;
    /** @type {?} */
    InputDateComponent.prototype.monthPlaceholder;
    /** @type {?} */
    InputDateComponent.prototype.yearName;
    /** @type {?} */
    InputDateComponent.prototype.yearRequired;
    /** @type {?} */
    InputDateComponent.prototype.yearLabel;
    /** @type {?} */
    InputDateComponent.prototype.yearPlaceholder;
    /** @type {?} */
    InputDateComponent.prototype.model;
    /** @type {?} */
    InputDateComponent.prototype.monthOptions;
    /** @type {?} */
    InputDateComponent.prototype.messages;
}
//# sourceMappingURL=data:application/json;base64,