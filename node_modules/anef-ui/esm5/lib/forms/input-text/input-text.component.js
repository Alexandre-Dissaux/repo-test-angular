/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text/input-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';
var InputTextComponent = /** @class */ (function () {
    function InputTextComponent() {
        this.MAX_LENGTH = 524288;
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.placeholder = '';
        this.maxLength = this.MAX_LENGTH;
        this.defaultDisplay = 'N/A';
        this.change = new EventEmitter();
        this.messages = {
            required: 'Ce champ est obligatoire',
            pattern: 'Le format n\'est pas correct',
            min: 'La valeur saisie est trop petite',
            max: 'La valeur saisie est trop grande',
            maxLength: 'La saisie dépasse le nombre de caractères autorisé'
        };
        this.textAfterReadOnly = '';
    }
    /**
     * @return {?}
     */
    InputTextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formGroup.get(this.controlName).valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.capitalize) {
                /** @type {?} */
                var changed = value.charAt(0).toUpperCase() + value.slice(1);
                _this.formGroup.get(_this.controlName).setValue(changed, { emitEvent: false });
            }
        }));
    };
    /**
     * @return {?}
     */
    InputTextComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @return {?}
     */
    InputTextComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].value || this.formGroup.controls[this.controlName].value === 0
            ? this.formGroup.controls[this.controlName].value : this.defaultDisplay;
    };
    InputTextComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-text',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" [htmlFor]=\"controlName\">\n      {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n    </label>\n\n    <ng-content select=\"[sub-label]\"></ng-content>\n\n    <input *ngIf=\"!readonly; else textual\"\n           [id]=\"controlName\"\n           type=\"text\"\n           pInputText\n           [formControlName]=\"controlName\"\n           [maxlength]=\"maxLength\"\n           [placeholder] = \"placeholder\">\n    <ng-template #textual>\n      <span class=\"textual\">{{ toString() }} &nbsp; {{ textAfterReadOnly }}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n        <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.required}} </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.pattern\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.pattern}} </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.min && messages.min\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.min}} (minimum : {{formGroup.controls[controlName].errors.min.min}}) </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.max && messages.max\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.max}} (maximum : {{formGroup.controls[controlName].errors.max.max}}) </span>\n        </div>\n        <div *ngIf=\"formGroup.controls[controlName].errors.maxlength && messages.maxLength\">\n          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n          <span> {{messages.maxLength}} (maximum : {{formGroup.controls[controlName].errors.maxlength.requiredLength}}) </span>\n        </div>\n        <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}"]
                }] }
    ];
    InputTextComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        capitalize: [{ type: Input }],
        placeholder: [{ type: Input }],
        label: [{ type: Input }],
        maxLength: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        change: [{ type: Output }],
        messages: [{ type: Input }],
        textAfterReadOnly: [{ type: Input }]
    };
    return InputTextComponent;
}());
export { InputTextComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputTextComponent.prototype.MAX_LENGTH;
    /** @type {?} */
    InputTextComponent.prototype.formGroup;
    /** @type {?} */
    InputTextComponent.prototype.controlName;
    /** @type {?} */
    InputTextComponent.prototype.required;
    /** @type {?} */
    InputTextComponent.prototype.readonly;
    /** @type {?} */
    InputTextComponent.prototype.capitalize;
    /** @type {?} */
    InputTextComponent.prototype.placeholder;
    /** @type {?} */
    InputTextComponent.prototype.label;
    /** @type {?} */
    InputTextComponent.prototype.maxLength;
    /** @type {?} */
    InputTextComponent.prototype.defaultDisplay;
    /** @type {?} */
    InputTextComponent.prototype.change;
    /** @type {?} */
    InputTextComponent.prototype.messages;
    /** @type {?} */
    InputTextComponent.prototype.textAfterReadOnly;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmVmLXVpLyIsInNvdXJjZXMiOlsibGliL2Zvcm1zL2lucHV0LXRleHQvaW5wdXQtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7SUFBQTtRQU9tQixlQUFVLEdBQVcsTUFBTSxDQUFDO1FBSXBDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWpCLGNBQVMsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3BDLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxhQUFRLEdBQUc7WUFDbEIsUUFBUSxFQUFFLDBCQUEwQjtZQUNwQyxPQUFPLEVBQUUsOEJBQThCO1lBQ3ZDLEdBQUcsRUFBRSxrQ0FBa0M7WUFDdkMsR0FBRyxFQUFFLGtDQUFrQztZQUN2QyxTQUFTLEVBQUUsb0RBQW9EO1NBQ2hFLENBQUM7UUFDTyxzQkFBaUIsR0FBRyxFQUFFLENBQUM7SUFvQmxDLENBQUM7Ozs7SUFsQkMscUNBQVE7OztJQUFSO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLEtBQUs7WUFDL0QsSUFBSSxLQUFJLENBQUMsVUFBVSxFQUFFOztvQkFDYixPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDOUQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUM5RTtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVNLDhDQUFpQjs7O0lBQXhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUk7WUFDOUQsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzRyxDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSO1FBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQztZQUM3RyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM5RSxDQUFDOztnQkE3Q0YsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixzcEVBQTBDOztpQkFFM0M7Ozs0QkFJRSxLQUFLOzhCQUNMLEtBQUs7MkJBQ0wsS0FBSzsyQkFDTCxLQUFLOzZCQUNMLEtBQUs7OEJBQ0wsS0FBSzt3QkFDTCxLQUFLOzRCQUNMLEtBQUs7aUNBQ0wsS0FBSzt5QkFDTCxNQUFNOzJCQUNOLEtBQUs7b0NBT0wsS0FBSzs7SUFvQlIseUJBQUM7Q0FBQSxBQTlDRCxJQThDQztTQXhDWSxrQkFBa0I7Ozs7OztJQUM3Qix3Q0FBNkM7O0lBRTdDLHVDQUE4Qjs7SUFDOUIseUNBQTZCOztJQUM3QixzQ0FBMEI7O0lBQzFCLHNDQUEwQjs7SUFDMUIsd0NBQTRCOztJQUM1Qix5Q0FBMEI7O0lBQzFCLG1DQUF1Qjs7SUFDdkIsdUNBQTZDOztJQUM3Qyw0Q0FBZ0M7O0lBQ2hDLG9DQUF5RDs7SUFDekQsc0NBTUU7O0lBQ0YsK0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdhbmVmLWlucHV0LXRleHQnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtdGV4dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lucHV0LXRleHQuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSByZWFkb25seSBNQVhfTEVOR1RIOiBudW1iZXIgPSA1MjQyODg7XG5cbiAgQElucHV0KCkgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gIEBJbnB1dCgpIGNvbnRyb2xOYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHJlcXVpcmVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XG4gIEBJbnB1dCgpIGNhcGl0YWxpemUgPSBmYWxzZTtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXIgPSAnJztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgbWF4TGVuZ3RoOiBudW1iZXIgPSB0aGlzLk1BWF9MRU5HVEg7XG4gIEBJbnB1dCgpIGRlZmF1bHREaXNwbGF5ID0gJ04vQSc7XG4gIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBASW5wdXQoKSBtZXNzYWdlcyA9IHtcbiAgICByZXF1aXJlZDogJ0NlIGNoYW1wIGVzdCBvYmxpZ2F0b2lyZScsXG4gICAgcGF0dGVybjogJ0xlIGZvcm1hdCBuXFwnZXN0IHBhcyBjb3JyZWN0JyxcbiAgICBtaW46ICdMYSB2YWxldXIgc2Fpc2llIGVzdCB0cm9wIHBldGl0ZScsXG4gICAgbWF4OiAnTGEgdmFsZXVyIHNhaXNpZSBlc3QgdHJvcCBncmFuZGUnLFxuICAgIG1heExlbmd0aDogJ0xhIHNhaXNpZSBkw6lwYXNzZSBsZSBub21icmUgZGUgY2FyYWN0w6hyZXMgYXV0b3Jpc8OpJ1xuICB9O1xuICBASW5wdXQoKSB0ZXh0QWZ0ZXJSZWFkT25seSA9ICcnO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybUdyb3VwLmdldCh0aGlzLmNvbnRyb2xOYW1lKS52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgIGlmICh0aGlzLmNhcGl0YWxpemUpIHtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHZhbHVlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSk7XG4gICAgICAgIHRoaXMuZm9ybUdyb3VwLmdldCh0aGlzLmNvbnRyb2xOYW1lKS5zZXRWYWx1ZShjaGFuZ2VkLCB7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZm9ybUNvbnRhaW5zRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzW3RoaXMuY29udHJvbE5hbWVdLmVycm9ycyAhPT0gbnVsbCAmJlxuICAgICAgKHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzW3RoaXMuY29udHJvbE5hbWVdLmRpcnR5IHx8IHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzW3RoaXMuY29udHJvbE5hbWVdLnRvdWNoZWQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb250cm9sTmFtZV0udmFsdWUgfHwgdGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb250cm9sTmFtZV0udmFsdWUgPT09IDBcbiAgICAgICAgPyB0aGlzLmZvcm1Hcm91cC5jb250cm9sc1t0aGlzLmNvbnRyb2xOYW1lXS52YWx1ZSA6IHRoaXMuZGVmYXVsdERpc3BsYXk7XG4gIH1cbn1cbiJdfQ==