/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-select/input-select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
var InputSelectComponent = /** @class */ (function () {
    function InputSelectComponent() {
        this.required = false;
        this.readonly = false;
        this.messages = {
            required: 'Ce champ est obligatoire'
        };
        this.defaultDisplay = 'N/A';
        this.dropdownIcon = 'pi pi-chevron-down';
    }
    /**
     * @return {?}
     */
    InputSelectComponent.prototype.formContainsError = /**
     * @return {?}
     */
    function () {
        return this.formGroup.controls[this.controlName].errors !== null &&
            (this.formGroup.controls[this.controlName].dirty || this.formGroup.controls[this.controlName].touched);
    };
    /**
     * @return {?}
     */
    InputSelectComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var found = null;
        if (this.formGroup && this.controlName && this.options) {
            /** @type {?} */
            var value_1 = this.formGroup.controls[this.controlName].value;
            found = (this.options && this.options.filter((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value_1; }))[0]) || null;
        }
        return (found && found.label) || this.defaultDisplay;
    };
    InputSelectComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-select',
                    template: "<div class=\"p-grid nogutter\" [formGroup]=\"formGroup\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" [htmlFor]=\"controlName\">\n      {{label}} <span class=\"redish\" *ngIf=\"required\">*</span> :\n    </label>\n\n    <ng-content select=\"[sub-label]\"></ng-content>\n\n    <p-dropdown *ngIf=\"!readonly; else textual\"\n                [id]=\"controlName\"\n                name=\"controlName\"\n                [placeholder]=\"placeholder\"\n                [options]=options\n                [dropdownIcon]=\"dropdownIcon\"\n                [formControlName]=\"controlName\"></p-dropdown>\n    <ng-template #textual>\n      <span class=\"textual\">{{toString()}}</span>\n    </ng-template>\n\n    <ng-content select=\"[complement]\"></ng-content>\n\n    <div class=\"redish errors\" *ngIf=\"formContainsError()\">\n      <div *ngIf=\"formGroup.controls[controlName].errors.required\">\n        <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>\n        <span> {{messages.required}} </span>\n      </div>\n\n      <ng-content select=\"[messages]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                    styles: [".textual{display:block}"]
                }] }
    ];
    InputSelectComponent.propDecorators = {
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        messages: [{ type: Input }],
        defaultDisplay: [{ type: Input }],
        dropdownIcon: [{ type: Input }]
    };
    return InputSelectComponent;
}());
export { InputSelectComponent };
if (false) {
    /** @type {?} */
    InputSelectComponent.prototype.formGroup;
    /** @type {?} */
    InputSelectComponent.prototype.controlName;
    /** @type {?} */
    InputSelectComponent.prototype.required;
    /** @type {?} */
    InputSelectComponent.prototype.readonly;
    /** @type {?} */
    InputSelectComponent.prototype.label;
    /** @type {?} */
    InputSelectComponent.prototype.placeholder;
    /** @type {?} */
    InputSelectComponent.prototype.options;
    /** @type {?} */
    InputSelectComponent.prototype.messages;
    /** @type {?} */
    InputSelectComponent.prototype.defaultDisplay;
    /** @type {?} */
    InputSelectComponent.prototype.dropdownIcon;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZWYtdWkvIiwic291cmNlcyI6WyJsaWIvZm9ybXMvaW5wdXQtc2VsZWN0L2lucHV0LXNlbGVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNDO0lBQUE7UUFTVyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFJakIsYUFBUSxHQUFHO1lBQ2xCLFFBQVEsRUFBRSwwQkFBMEI7U0FDckMsQ0FBQztRQUNPLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLGlCQUFZLEdBQUcsb0JBQW9CLENBQUM7SUFlL0MsQ0FBQzs7OztJQWJRLGdEQUFpQjs7O0lBQXhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUk7WUFDOUQsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzRyxDQUFDOzs7O0lBRUQsdUNBQVE7OztJQUFSOztZQUNNLEtBQUssR0FBRyxJQUFJO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7O2dCQUNoRCxPQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUs7WUFDN0QsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxLQUFLLEtBQUssT0FBSyxFQUF0QixDQUFzQixFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7U0FDNUY7UUFDRCxPQUFPLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQ3ZELENBQUM7O2dCQWhDRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLCttQ0FBNEM7O2lCQUU3Qzs7OzRCQUVFLEtBQUs7OEJBQ0wsS0FBSzsyQkFDTCxLQUFLOzJCQUNMLEtBQUs7d0JBQ0wsS0FBSzs4QkFDTCxLQUFLOzBCQUNMLEtBQUs7MkJBQ0wsS0FBSztpQ0FHTCxLQUFLOytCQUNMLEtBQUs7O0lBZVIsMkJBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQTNCWSxvQkFBb0I7OztJQUMvQix5Q0FBOEI7O0lBQzlCLDJDQUE2Qjs7SUFDN0Isd0NBQTBCOztJQUMxQix3Q0FBMEI7O0lBQzFCLHFDQUF1Qjs7SUFDdkIsMkNBQTZCOztJQUM3Qix1Q0FBK0I7O0lBQy9CLHdDQUVFOztJQUNGLDhDQUFnQzs7SUFDaEMsNENBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU2VsZWN0SXRlbSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnYW5lZi1pbnB1dC1zZWxlY3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtc2VsZWN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtc2VsZWN0LmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIElucHV0U2VsZWN0Q29tcG9uZW50IHtcbiAgQElucHV0KCkgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gIEBJbnB1dCgpIGNvbnRyb2xOYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHJlcXVpcmVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG9wdGlvbnM6IFNlbGVjdEl0ZW1bXTtcbiAgQElucHV0KCkgbWVzc2FnZXMgPSB7XG4gICAgcmVxdWlyZWQ6ICdDZSBjaGFtcCBlc3Qgb2JsaWdhdG9pcmUnXG4gIH07XG4gIEBJbnB1dCgpIGRlZmF1bHREaXNwbGF5ID0gJ04vQSc7XG4gIEBJbnB1dCgpIGRyb3Bkb3duSWNvbiA9ICdwaSBwaS1jaGV2cm9uLWRvd24nO1xuXG4gIHB1YmxpYyBmb3JtQ29udGFpbnNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb250cm9sTmFtZV0uZXJyb3JzICE9PSBudWxsICYmXG4gICAgICAodGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb250cm9sTmFtZV0uZGlydHkgfHwgdGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb250cm9sTmFtZV0udG91Y2hlZCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgZm91bmQgPSBudWxsO1xuICAgIGlmICh0aGlzLmZvcm1Hcm91cCAmJiB0aGlzLmNvbnRyb2xOYW1lICYmIHRoaXMub3B0aW9ucykge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmZvcm1Hcm91cC5jb250cm9sc1t0aGlzLmNvbnRyb2xOYW1lXS52YWx1ZTtcbiAgICAgIGZvdW5kID0gKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24udmFsdWUgPT09IHZhbHVlKVswXSkgfHwgbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChmb3VuZCAmJiBmb3VuZC5sYWJlbCkgfHwgdGhpcy5kZWZhdWx0RGlzcGxheTtcbiAgfVxufVxuIl19