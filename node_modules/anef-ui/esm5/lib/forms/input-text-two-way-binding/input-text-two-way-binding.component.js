/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-text-two-way-binding/input-text-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { generateGuid } from '../../shared/guid';
/**
 * @record
 */
function Icon() { }
if (false) {
    /** @type {?} */
    Icon.prototype.type;
    /** @type {?} */
    Icon.prototype.class;
}
var InputTextTwoWayBindingComponent = /** @class */ (function () {
    function InputTextTwoWayBindingComponent() {
        this.MAX_LENGTH = 524288;
        this.error = null;
        this.type = 'text';
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.maxLength = this.MAX_LENGTH;
        this.disabled = false;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
    }
    Object.defineProperty(InputTextTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    InputTextTwoWayBindingComponent.prototype.onModelChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.capitalize) {
            event = event.charAt(0).toUpperCase() + event.slice(1);
        }
        this.ngModelChange.emit(event);
    };
    /**
     * @return {?}
     */
    InputTextTwoWayBindingComponent.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.model ? this.model : '-';
    };
    InputTextTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-text-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\" class=\"ui-inputgroup\">\n        <input (ngModelChange)=\"onModelChange($event)\"\n               [(ngModel)]=\"model\"\n               [disabled]=\"disabled\"\n               [maxlength]=maxLength\n               [ngClass]=\"{'error': error && error.length}\"\n               [readonly]=\"readonly\"\n               [required]=\"required\"\n               id=\"{{guid}}\"\n               name=\"{{guid}}\"\n               pInputText\n               placeholder=\"{{placeholder}}\"\n               type=\"{{type}}\">\n        <button *ngIf=\"icon\" [class]=\"icon.class\" [icon]=\"icon.type\" pButton type=\"button\"></button>\n      </div>\n\n      <ng-template #textual>\n        <div class=\"textual\">{{ toString() }}</div>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: ["label{color:#656565;font-size:1.4rem}.textual{margin-top:7px}"]
                }] }
    ];
    InputTextTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input }],
        type: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        capitalize: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        maxLength: [{ type: Input }],
        errors: [{ type: Input }],
        icon: [{ type: Input }],
        disabled: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputTextTwoWayBindingComponent;
}());
export { InputTextTwoWayBindingComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputTextTwoWayBindingComponent.prototype.MAX_LENGTH;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.error;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.model;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.type;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.capitalize;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.placeholder;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.maxLength;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.icon;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.disabled;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputTextTwoWayBindingComponent.prototype.guid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5lZi11aS8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC10ZXh0LXR3by13YXktYmluZGluZy9pbnB1dC10ZXh0LXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUVqRCxtQkFHQzs7O0lBRkMsb0JBQWE7O0lBQ2IscUJBQWM7O0FBR2hCO0lBQUE7UUFPbUIsZUFBVSxHQUFXLE1BQU0sQ0FBQztRQUM3QyxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBR0osU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUNkLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBR25CLGNBQVMsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBV3BDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDaEIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTdDLFNBQUksR0FBRyxZQUFZLEVBQUUsQ0FBQztJQVl4QixDQUFDO0lBekJDLHNCQUFhLG1EQUFNOzs7OztRQUFuQixVQUFvQixNQUE4QjtZQUNoRCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2FBQ25CO2lCQUFNLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7O0lBT0QsdURBQWE7Ozs7SUFBYixVQUFjLEtBQWE7UUFDekIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsa0RBQVE7OztJQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDdkMsQ0FBQzs7Z0JBMUNGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsK3lDQUEwRDs7aUJBRTNEOzs7d0JBS0UsS0FBSzt1QkFDTCxLQUFLOzJCQUNMLEtBQUs7MkJBQ0wsS0FBSzs2QkFDTCxLQUFLO3dCQUNMLEtBQUs7OEJBQ0wsS0FBSzs0QkFDTCxLQUFLO3lCQUNMLEtBQUs7dUJBU0wsS0FBSzsyQkFDTCxLQUFLO2dDQUNMLE1BQU07O0lBY1Qsc0NBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQXJDWSwrQkFBK0I7Ozs7OztJQUMxQyxxREFBNkM7O0lBQzdDLGdEQUFhOztJQUViLGdEQUFvQjs7SUFDcEIsK0NBQXVCOztJQUN2QixtREFBMEI7O0lBQzFCLG1EQUEwQjs7SUFDMUIscURBQTRCOztJQUM1QixnREFBdUI7O0lBQ3ZCLHNEQUE2Qjs7SUFDN0Isb0RBQTZDOztJQVU3QywrQ0FBb0I7O0lBQ3BCLG1EQUEwQjs7SUFDMUIsd0RBQTZDOztJQUU3QywrQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZUd1aWQgfSBmcm9tICcuLi8uLi9zaGFyZWQvZ3VpZCc7XG5cbmludGVyZmFjZSBJY29uIHtcbiAgdHlwZTogc3RyaW5nO1xuICBjbGFzczogc3RyaW5nO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdhbmVmLWlucHV0LXRleHQtdHdvLXdheS1iaW5kaW5nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LXRleHQtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFRleHRUd29XYXlCaW5kaW5nQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBNQVhfTEVOR1RIOiBudW1iZXIgPSA1MjQyODg7XG4gIGVycm9yID0gbnVsbDtcblxuICBASW5wdXQoKSBtb2RlbDogYW55O1xuICBASW5wdXQoKSB0eXBlID0gJ3RleHQnO1xuICBASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuICBASW5wdXQoKSByZWFkb25seSA9IGZhbHNlO1xuICBASW5wdXQoKSBjYXBpdGFsaXplID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1heExlbmd0aDogbnVtYmVyID0gdGhpcy5NQVhfTEVOR1RIO1xuICBASW5wdXQoKSBzZXQgZXJyb3JzKGVycm9yczogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPikge1xuICAgIGlmICghZXJyb3JzKSB7XG4gICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihlcnJvcnMpID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5lcnJvciA9IFtlcnJvcnNdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9yID0gZXJyb3JzO1xuICAgIH1cbiAgfVxuICBASW5wdXQoKSBpY29uOiBJY29uO1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICBAT3V0cHV0KCkgbmdNb2RlbENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBndWlkID0gZ2VuZXJhdGVHdWlkKCk7XG5cbiAgb25Nb2RlbENoYW5nZShldmVudDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FwaXRhbGl6ZSkge1xuICAgICAgZXZlbnQgPSBldmVudC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGV2ZW50LnNsaWNlKDEpO1xuICAgIH1cbiAgICB0aGlzLm5nTW9kZWxDaGFuZ2UuZW1pdChldmVudCk7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm1vZGVsID8gdGhpcy5tb2RlbCA6ICctJztcbiAgfVxufVxuIl19