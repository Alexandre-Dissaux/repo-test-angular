/**
 * @fileoverview added by tsickle
 * Generated from: lib/forms/input-multi-text-two-way-binding/input-multi-text-two-way-binding.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { generateGuid } from '../../shared/guid';
var InputMultiTextTwoWayBindingComponent = /** @class */ (function () {
    function InputMultiTextTwoWayBindingComponent() {
        this.MAX_LENGTH = 524288;
        this.error = null;
        this.type = 'text';
        this.required = false;
        this.readonly = false;
        this.capitalize = false;
        this.maxLength = this.MAX_LENGTH;
        this.ngModelChange = new EventEmitter();
        this.guid = generateGuid();
        this.value = [];
    }
    Object.defineProperty(InputMultiTextTwoWayBindingComponent.prototype, "model", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputMultiTextTwoWayBindingComponent.prototype, "errors", {
        set: /**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (!errors) {
                this.error = null;
            }
            else if (typeof (errors) === 'string') {
                this.error = [errors];
            }
            else {
                this.error = errors;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.onModelChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.capitalize) {
            this.value = this.value.map((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return _this._capitalize(element); }));
        }
        if (this.value[0] === '' && this.value.length === 1) {
            this.value = null;
        }
        this.ngModelChange.emit(this.value);
    };
    /**
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.addItem = /**
     * @return {?}
     */
    function () {
        this.value.push('');
    };
    /**
     * @param {?} index
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.deleteItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.value.splice(index, 1);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.toString = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item ? item : '-';
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return index;
    };
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    InputMultiTextTwoWayBindingComponent.prototype._capitalize = /**
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return (text.charAt(0).toUpperCase() + text.slice(1));
    };
    InputMultiTextTwoWayBindingComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'anef-input-multi-text-two-way-binding',
                    template: "<div class=\"p-grid nogutter\">\n  <div class=\"p-col-12\">\n    <label *ngIf=\"label\" for=\"{{guid}}-0\">\n      {{label}} <span *ngIf=\"required && !readonly\" class=\"redish\">*</span> :\n    </label>\n\n    <div class=\"input\">\n      <div *ngIf=\"!readonly; else textual\">\n        <div class=\"p-grid p-align-center\">\n          <div [ngClass]=\"{\n            'p-col-11': value.length > 1,\n            'p-col-12': value.length <= 1\n          }\">\n            <input pInputText\n                   type=\"{{type}}\"\n                   id=\"{{guid}}-0\"\n                   name=\"{{guid}}-0\"\n                   [placeholder]=\"placeholder\"\n                   [maxlength]=\"maxLength\"\n                   [(ngModel)]=\"value[0]\"\n                   (ngModelChange)=\"onModelChange()\"\n                   [required]=\"required\"\n                   [ngClass]=\"{'error': error && error.length}\">\n          </div>\n\n          <span (click)=\"deleteItem(0)\"\n                *ngIf=\"value.length > 1\"\n                class=\"delete-button delete-{{guid}}-0\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <div *ngFor=\"let modelItem of value | slice:1; index as i; trackBy: trackByFn\"\n             class=\"p-grid p-align-center\">\n          <div [ngClass]=\"{\n            'p-col-11': value.length > 1,\n            'p-col-12': value.length <= 1\n          }\">\n            <input\n              pInputText\n              type=\"{{type}}\"\n              id=\"{{guid}}-{{i+1}}\"\n              name=\"{{guid}}-{{i+1}}\"\n              [maxlength]=\"maxLength\"\n              [(ngModel)]=\"value[i+1]\"\n              (ngModelChange)=\"onModelChange()\"\n              [ngClass]=\"{'error': error && error.length}\">\n          </div>\n\n          <span\n            (click)=\"deleteItem(i+1)\"\n            class=\"delete-button delete-{{guid}}-{{i+1}}\">\n              <i class=\"fa fa-close fa-lg icon\"></i>\n          </span>\n        </div>\n\n        <button (click)=\"addItem()\"\n                *ngIf=\"value[value.length - 1]\"\n                class=\"ui-button-borderless add-item\"\n                pButton>\n          {{addItemLabel}}\n        </button>\n      </div>\n\n      <ng-template #textual>\n        <ul class=\"item-readonly textual\">\n          <li *ngFor=\"let valueItem of value\">{{toString(valueItem)}}</li>\n          <li *ngIf=\"value.length === 0\">-</li>\n        </ul>\n      </ng-template>\n    </div>\n\n    <div *ngIf=\"error && error.length\" class=\"error redish\">\n      <div *ngFor=\"let errorLine of error\">\n        <p>\n          <i class=\"pi pi-info-circle\"></i>\n          <span>{{errorLine}}</span>\n        </p>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    styles: [".item-readonly{list-style-type:none;padding:0;margin:0}label{color:#656565;font-size:1.4rem}.delete-button{margin-bottom:7px;margin-left:5px;cursor:pointer;color:#d13721;font-size:1.2rem}.input{margin-top:-1.3rem}.textual{margin-top:7px}"]
                }] }
    ];
    InputMultiTextTwoWayBindingComponent.propDecorators = {
        model: [{ type: Input, args: ['model',] }],
        type: [{ type: Input }],
        required: [{ type: Input }],
        readonly: [{ type: Input }],
        capitalize: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        maxLength: [{ type: Input }],
        addItemLabel: [{ type: Input }],
        errors: [{ type: Input }],
        ngModelChange: [{ type: Output }]
    };
    return InputMultiTextTwoWayBindingComponent;
}());
export { InputMultiTextTwoWayBindingComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputMultiTextTwoWayBindingComponent.prototype.MAX_LENGTH;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.error;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.type;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.required;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.readonly;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.capitalize;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.label;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.placeholder;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.maxLength;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.addItemLabel;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.ngModelChange;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.guid;
    /** @type {?} */
    InputMultiTextTwoWayBindingComponent.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbXVsdGktdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5lZi11aS8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy9pbnB1dC1tdWx0aS10ZXh0LXR3by13YXktYmluZGluZy9pbnB1dC1tdWx0aS10ZXh0LXR3by13YXktYmluZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqRDtJQUFBO1FBT21CLGVBQVUsR0FBVyxNQUFNLENBQUM7UUFDN0MsVUFBSyxHQUFHLElBQUksQ0FBQztRQUtKLFNBQUksR0FBRyxNQUFNLENBQUM7UUFDZCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUduQixjQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQVczQixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFN0MsU0FBSSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQ3RCLFVBQUssR0FBVSxFQUFFLENBQUM7SUErQnBCLENBQUM7SUF0REMsc0JBQW9CLHVEQUFLOzs7OztRQUF6QixVQUEwQixLQUFLO1lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUMzQixDQUFDOzs7T0FBQTtJQVNELHNCQUFhLHdEQUFNOzs7OztRQUFuQixVQUFvQixNQUE4QjtZQUNoRCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2FBQ25CO2lCQUFNLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFNRCw0REFBYTs7O0lBQWI7UUFBQSxpQkFRQztRQVBDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBekIsQ0FBeUIsRUFBQyxDQUFDO1NBQ25FO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVELHNEQUFPOzs7SUFBUDtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQseURBQVU7Ozs7SUFBVixVQUFXLEtBQWE7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBRUQsdURBQVE7Ozs7SUFBUixVQUFTLElBQVk7UUFDbkIsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUVELHdEQUFTOzs7OztJQUFULFVBQVUsS0FBYSxFQUFFLElBQVk7UUFDbkMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFFTywwREFBVzs7Ozs7SUFBbkIsVUFBb0IsSUFBWTtRQUM5QixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7Z0JBL0RGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLHVDQUF1QztvQkFDakQsMHZGQUFnRTs7aUJBRWpFOzs7d0JBS0UsS0FBSyxTQUFDLE9BQU87dUJBR2IsS0FBSzsyQkFDTCxLQUFLOzJCQUNMLEtBQUs7NkJBQ0wsS0FBSzt3QkFDTCxLQUFLOzhCQUNMLEtBQUs7NEJBQ0wsS0FBSzsrQkFDTCxLQUFLO3lCQUNMLEtBQUs7Z0NBU0wsTUFBTTs7SUFrQ1QsMkNBQUM7Q0FBQSxBQWhFRCxJQWdFQztTQTFEWSxvQ0FBb0M7Ozs7OztJQUMvQywwREFBNkM7O0lBQzdDLHFEQUFhOztJQUtiLG9EQUF1Qjs7SUFDdkIsd0RBQTBCOztJQUMxQix3REFBMEI7O0lBQzFCLDBEQUE0Qjs7SUFDNUIscURBQXVCOztJQUN2QiwyREFBNkI7O0lBQzdCLHlEQUFxQzs7SUFDckMsNERBQThCOztJQVU5Qiw2REFBNkM7O0lBRTdDLG9EQUFzQjs7SUFDdEIscURBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2VuZXJhdGVHdWlkIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2d1aWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdhbmVmLWlucHV0LW11bHRpLXRleHQtdHdvLXdheS1iaW5kaW5nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LW11bHRpLXRleHQtdHdvLXdheS1iaW5kaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtbXVsdGktdGV4dC10d28td2F5LWJpbmRpbmcuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRNdWx0aVRleHRUd29XYXlCaW5kaW5nQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBNQVhfTEVOR1RIOiBudW1iZXIgPSA1MjQyODg7XG4gIGVycm9yID0gbnVsbDtcblxuICBASW5wdXQoJ21vZGVsJykgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlIHx8wqBbXTtcbiAgfVxuICBASW5wdXQoKSB0eXBlID0gJ3RleHQnO1xuICBASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuICBASW5wdXQoKSByZWFkb25seSA9IGZhbHNlO1xuICBASW5wdXQoKSBjYXBpdGFsaXplID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1heExlbmd0aCA9IHRoaXMuTUFYX0xFTkdUSDtcbiAgQElucHV0KCkgYWRkSXRlbUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNldCBlcnJvcnMoZXJyb3JzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+KSB7XG4gICAgaWYgKCFlcnJvcnMpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKGVycm9ycykgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVycm9yID0gW2Vycm9yc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcnM7XG4gICAgfVxuICB9XG4gIEBPdXRwdXQoKSBuZ01vZGVsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGd1aWQgPSBnZW5lcmF0ZUd1aWQoKTtcbiAgdmFsdWU6IGFueVtdID0gW107XG5cbiAgb25Nb2RlbENoYW5nZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jYXBpdGFsaXplKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5tYXAoZWxlbWVudCA9PiB0aGlzLl9jYXBpdGFsaXplKGVsZW1lbnQpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmFsdWVbMF0gPT09ICcnICYmIHRoaXMudmFsdWUubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICBhZGRJdGVtKCk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUucHVzaCgnJyk7XG4gIH1cblxuICBkZWxldGVJdGVtKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICB0b1N0cmluZyhpdGVtOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBpdGVtID8gaXRlbSA6ICctJztcbiAgfVxuXG4gIHRyYWNrQnlGbihpbmRleDogbnVtYmVyLCBpdGVtOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHByaXZhdGUgX2NhcGl0YWxpemUodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHRleHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnNsaWNlKDEpKTtcbiAgfVxufVxuIl19