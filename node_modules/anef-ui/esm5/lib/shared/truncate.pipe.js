/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/truncate.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
var Truncate = /** @class */ (function () {
    function Truncate() {
    }
    // usage : | truncate:[limit, trail, tail]
    // default values : [20, '...', undefined]
    // exemple : | truncate:[10, '(...)', '.jpg'] -> "t(...).jpg"
    // usage : | truncate:[limit, trail, tail]
    // default values : [20, '...', undefined]
    // exemple : | truncate:[10, '(...)', '.jpg'] -> "t(...).jpg"
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    Truncate.prototype.transform = 
    // usage : | truncate:[limit, trail, tail]
    // default values : [20, '...', undefined]
    // exemple : | truncate:[10, '(...)', '.jpg'] -> "t(...).jpg"
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        if (args === void 0) { args = []; }
        /** @type {?} */
        var limit = args.length > 0 ? parseInt(args[0], 10) : 20;
        if (value.length <= limit) {
            return value;
        }
        /** @type {?} */
        var trail = args.length > 1 ? args[1] : '...';
        /** @type {?} */
        var tail = args.length > 2 ? args[2] : '';
        limit -= tail.length + trail.length;
        /** @type {?} */
        var result = value.substring(0, limit) + trail + tail;
        return result;
    };
    Truncate.decorators = [
        { type: Pipe, args: [{ name: 'truncate' },] }
    ];
    return Truncate;
}());
export { Truncate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1bmNhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZWYtdWkvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL3RydW5jYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRDtJQUFBO0lBb0JBLENBQUM7SUFsQkMsMENBQTBDO0lBQzFDLDBDQUEwQztJQUMxQyw2REFBNkQ7Ozs7Ozs7OztJQUM3RCw0QkFBUzs7Ozs7Ozs7O0lBQVQsVUFBVSxLQUFhLEVBQUUsSUFBZ0I7UUFBaEIscUJBQUEsRUFBQSxTQUFnQjs7WUFDbkMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBRXhELElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLEVBQUU7WUFDekIsT0FBTyxLQUFLLENBQUM7U0FDZDs7WUFFSyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSzs7WUFDekMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDM0MsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQzs7WUFFOUIsTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJO1FBRXZELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O2dCQW5CRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFOztJQW9CMUIsZUFBQztDQUFBLEFBcEJELElBb0JDO1NBbkJZLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBQaXBlKHsgbmFtZTogJ3RydW5jYXRlJyB9KVxuZXhwb3J0IGNsYXNzIFRydW5jYXRlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIC8vIHVzYWdlIDogfCB0cnVuY2F0ZTpbbGltaXQsIHRyYWlsLCB0YWlsXVxuICAvLyBkZWZhdWx0IHZhbHVlcyA6IFsyMCwgJy4uLicsIHVuZGVmaW5lZF1cbiAgLy8gZXhlbXBsZSA6IHwgdHJ1bmNhdGU6WzEwLCAnKC4uLiknLCAnLmpwZyddIC0+IFwidCguLi4pLmpwZ1wiXG4gIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nLCBhcmdzOiBhbnlbXSA9IFtdKTogc3RyaW5nIHtcbiAgICBsZXQgbGltaXQgPSBhcmdzLmxlbmd0aCA+IDAgPyBwYXJzZUludChhcmdzWzBdLCAxMCkgOiAyMDtcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPD0gbGltaXQpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFpbCA9IGFyZ3MubGVuZ3RoID4gMSA/IGFyZ3NbMV0gOiAnLi4uJztcbiAgICBjb25zdCB0YWlsID0gYXJncy5sZW5ndGggPiAyID8gYXJnc1syXSA6ICcnO1xuICAgIGxpbWl0IC09IHRhaWwubGVuZ3RoICsgdHJhaWwubGVuZ3RoO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gdmFsdWUuc3Vic3RyaW5nKDAsIGxpbWl0KSArIHRyYWlsICsgdGFpbDtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==