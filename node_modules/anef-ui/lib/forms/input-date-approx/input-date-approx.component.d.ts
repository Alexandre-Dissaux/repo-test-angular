import { OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
import { FormGroup, ValidatorFn } from '@angular/forms';
import { SelectItem } from 'primeng/api';
import { DateErrorMessage } from '../models/date-error-message';
export declare class InputDateApproxComponent implements OnInit, OnChanges, OnDestroy {
    private notifier;
    private unknownMonthItem;
    isDateApprox: boolean;
    /** FormGroup name */
    formGroup: FormGroup;
    /** FormGroup label */
    label: string;
    /** Is FormGroup required */
    required: boolean;
    /** Is FormGroup readonly */
    readonly: boolean;
    /** Default date value displayed in readonly mode
     * @default 'N/A'
     */
    defaultDisplay: string;
    /** FormGroup day control name */
    dayName: string;
    /** FormGroup day control label
     * @default 'Jour'
     */
    dayLabel: string;
    /** FormGroup day control placeholder
     * @default 'JJ'
     */
    dayPlaceholder: string;
    /** FormGroup month control name */
    monthName: string;
    /** FormGroup month control label
     * @default 'Mois'
     */
    monthLabel: string;
    /** FormGroup day control placeholder
     * @default 'MM'
     */
    monthPlaceholder: string;
    /** FormGroup year control name */
    yearName: string;
    /** Puts a required * mark aside the year control */
    yearRequired: boolean;
    /** FormGroup year control label
     * @default 'Année'
     */
    yearLabel: string;
    /** FormGroup year control placeholder
     * @default 'AAAA'
     */
    yearPlaceholder: string;
    /** model property for usage with ngModel to be defined
     */
    model: any;
    /** FormGroup month control dropdown options
     * @default SelectItem[] = [
     * { label: 'Janvier', value: 1 },
     * { label: 'Février', value: 2 },
     * { label: 'Mars', value: 3 },
     * { label: 'Avril', value: 4 },
     * { label: 'Mai', value: 5 },
     * { label: 'Juin', value: 6 },
     * { label: 'Juillet', value: 7 },
     * { label: 'Août', value: 8 },
     * { label: 'Septembre', value: 9 },
     * { label: 'Octobre', value: 10 },
     * { label: 'Novembre', value: 11 },
     * { label: 'Décembre', value: 12 }
     * ]
     */
    monthOptions: SelectItem[];
    /** FormGroup validation error messages
     * @default  DateErrorMessage = {
     *     day: {
     *       required: 'Le jour est requis',
     *       pattern: 'Le jour doit être un nombre',
     *       length: 'Le jour doit contenir 2 chiffres au maximum',
     *       minMax: 'Le jour doit être compris entre 1 et 31'
     *     },
     *     month: {
     *       required: 'Le mois est requis'
     *     },
     *     year: {
     *       required: 'L\'année est requise',
     *       pattern: 'L\'année doit être un nombre',
     *       length: 'L\'année doit contenir 4 chiffres'
     *     },
     *     invalid: 'La date est invalide',
     *     required: 'Ce champ est obligatoire.'
     *   }
     */
    messages: DateErrorMessage;
    /** Can the date be approximative or not
     * @default false
     * @usage [canBeApproximative]="true"
     */
    canBeApproximative: boolean;
    /** FormGroup approximative date label
     * @default 'Approximative'
     */
    dateApproxLabel: string;
    /** FormGroup approximative date checkbox control name, required if approximative date */
    dateApproxCheckboxName?: string;
    /** Approximative date format
     * @values {known: 'FF/FF/FFFF', dayUnknown: '00/FF/FFFF', dayMonthUnknown: '00/00/FFFF'}
     */
    dateApproxMasks: {
        known: string;
        dayUnknown: string;
        dayMonthUnknown: string;
    };
    /** FormGroup approximative date mask hidden control name, required if approximative date */
    dateApproxMaskName?: string;
    /** max value for date DD/MM/YYY or 'now' */
    maxDate?: string;
    /** Error message if date > max value */
    maxDateErrorMessage?: string;
    /** min value for date DD/MM/YYY  */
    minDate?: string;
    /** Error message if date < min value */
    minDateErrorMessage?: string;
    constructor();
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    addDayControlMinMaxValidator(): void;
    addFormGroupValidators(): void;
    crossFieldsMinDateValidator: ValidatorFn;
    crossFieldsMaxDateValidator: ValidatorFn;
    private getFields;
    areFieldsEmpty(): boolean;
    areFieldsFilled(): boolean;
    areFieldsTouched(): boolean;
    crossFieldsDateValidator: ValidatorFn;
    ngOnDestroy(): void;
    /** Returns true if form is invalid */
    formContainsErrors(): boolean;
    formError(): boolean;
    /** Returns true if a control is invalid */
    controlContainsErrors(controlName: string): boolean;
    /** Returns true if control value has pattern errors */
    hasPatternError(controlName: string): boolean;
    /** Returns true if control value is inferior to control min value or superior to control max value */
    hasMinMaxError(controlName: string): boolean;
    /** Returns true if control value length is inferior to control min value length or superior to control max value length */
    hasLengthError(controlName: string): boolean;
    /** Returns true if control is required but not filled */
    hasRequiredError(controlName: string): boolean;
    /** Returns true if control is not a valid date */
    hasInvalidDateError(controlName: string): boolean;
    /** Returns true if form does not have a valid date */
    hasFormGroupInvalidateError(): boolean;
    hasFutureDateError(): boolean;
    hasTooOldDateError(): boolean;
    isAllFieldsFilled(): boolean;
    /*** Returns FormGroup month field value */
    private getMonthValue;
    /** Format date to string for display */
    toString(): string;
    /** Triggers date approx editing functions following date approx checkbox values */
    private dateApproxCheckboxChange;
    /** Triggers SetDateApproxMAsk on monthOptions change */
    private monthOptionChange;
    /** Sets day value to 1 if date is approximative */
    private setDayValue;
    /** Adds or remove 'Inconnu' month option */
    private editMonthOptions;
    /** Sets date approx mask  */
    private setDateApproxMask;
    /** Set approx checkbox style in readonly mode */
    private setCheckboxStyle;
}
